

/*NAME		SUBI02 - CLEANING INDUSTRY DATA ALL

PURPOSE 	CLEAN INDUSTRY DATA OF ALL ASSIGNORS
			ADDITIONAL CHECKS AND CORRECTIONS DEVELOPED IN CODE SUBI03 AND COLLECTED HERE.
STRUCTURE:
			1 	DEFINITIONS AND GRAPHIC OPTIONS
			2 	SPECIAL CORRECTIONS HUBER
			3	VAT RATE AND VAT INCLUDED INDICATOR, GESAMTBETRAG 
			3.1  	IDENTIFICATION 
			3.2  	CORRECTION 
			3.3		VERIFICATION
			4	INCOTERMS AND FREIGHT INCLUDED INDICATOR
			4.1  	IDENTIFICATION 
			4.2  	CORRECTION 
			4.3		VERIFICATION
			5	MISSING ZEDENTEN ID
			6	KILO_PRO_EINHEIT, EINHEIT, MENGE_IN_TONNEN, ANZAHL
			6.1  	IDENTIFICATION 
			6.2  	CORRECTION 
			6.3		VERIFICATION
			7	REBATE VARIABLES  
			8	INCORRECT UNITS
			9 	REPLACE NAMES AS ASSIGNED BY KSP WITH CORRECT ONES 
		   10	VARIOUS CORRECTIONS
		   11	CONSOLIDATE PRODUCT NAMES
		   12 	CURRENCY CONVERSIONS
		   13	CORRECTING MISTAKES / ADDING INFORMATION IN THE VARIABLES REFERENCING SCANS 
		   14	CANCELLATIONS
		   15	DELETING ALL NON-INVOICE POSITIONS AND OUTPUT IN SEPARATE SET (SHOULD BE REPLACED WITH REFINEMENT LATER)
		   16 	CALCULATING EFFECTIVE PRICE AND AVERAGE PRICE
		   17   PRODUCT CLASSIFICATION
		   18	DRILL-DOWN/REPAIR ERRORS FOUND IN SPOT-CHECKS
		   19 	DOCUMENT MATCHING
		   20   CLEAN UP AND CREATE PERMANENT DS*/

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1	DEFINITIONS, GRAPHIC OPTIONS ETC
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
proc datasets library=work kill noprint;run;quit;dm 'clear log';dm 'clear output';
%let 	path=\\Vfilercdc01\cdc_daten\CDC;
libname build "&path\Build\INDUSTRY\SAS Datasets (SUBI)";
libname analysis "&path\Analysis\002 ASSIGNOR SPECIFIC OUTPUT\SAS Datasets (SUA002)";
libname input "Z:\CDC\Build\INDUSTRY\SAS Input (SUBI)";
%let 	input=Z:\CDC\Build\INDUSTRY\SAS Input (SUBI);
%let 	output=Z:\CDC\Build\INDUSTRY;

%let 	date_US_short=%SYSFUNC(today(),MMDDYYS.);     /*01/30/2000*/
%let 	date_US_long=%SYSFUNC(today(),WORDDATE.w.);   /*Jan 30,2000*/
%let 	date_EU_short=%SYSFUNC(today(),DDMMYYP10.);   /*30.01.2000*/ 
%let 	date_short=%SYSFUNC(today(),YYMMDD10.); 
%let	code=SUBI02 - CLEANING INDUSTRY DATA ALL;
%let 	code_short=SUBI02;

data info;
info="This output was created by code &code.";
run;

/*	SET GRAPH OPTIONS*/
%let height=1.5;
%let width=1;
goptions 
     ftext="Times"
     ftitle="Times"
     htitle=1.2
     htext=1
     gsfmode=append
     rotate=landscape;
	
/*axis1 label=('Date' justify=center);*/
/*axis2 label=('av_price' justify=center) ;*/
symbol1 interpol=none value=: height=&height width=&width color=blue;
symbol2 interpol=none value=circle height=&height width=&width color=red;
symbol3 interpol=none value=dot height=&height width=&width color=green;
symbol3 interpol=none value=/ height=&height width=&width color=yellow;
symbol5 interpol=none value=Hash height=&height width=&width color=black;
symbol5 interpol=none value= = height=&height width=&width color=brown;
symbol6 interpol=none value=square height=&height width=&width color=purple;
symbol7 interpol=none value=+ height=&height width=&width color=grey;
symbol8 interpol=none value=triangle height=&height width=&width color=blue;
symbol9 interpol=none value=Z height=&height width=&width color=grey;
symbol10 interpol=none value=% height=&height width=&width color=red;
symbol11 interpol=none value=& height=&height width=&width color=brown;
symbol12 interpol=none value=Hash height=&height width=&width color=red;
symbol13 interpol=none value=square height=&height width=&width color=green;
symbol13 interpol=none value=triangle height=&height width=&width color=green;
legend1 frame shape=symbol(2,2)
position = (bottom left);
footnote j=l "Created by &code_short. on &date_EU_short..";
/*	END OF GRAPH OPTIONS*/

/*proc printto log="&path\Build\INDUSTRY\SAS Programs (SUBI)\SASLOG_&code_short..log"; run;*/
%let date=%SYSFUNC(today(),DATE9.); 
proc sql;
create table LMI_KPs_&date. as select
	zedentenid,name_zedent,name_dok_empfaenger,count(*) as count 
from build.db_tables_industry_joined
group by 1,2,3 order by 1;
quit;

data db_tables_industry_joined_PRE (label="WORKING COPY OF PERM DS WITHOUT HUBER. TO BE RE-JOINED WITH PRE-CLEANED HUBER SET BEFORE GENERAL CLEANING STEPS.");
set build.db_tables_industry_joined;
if zedentenid=1174373 then delete; /*HUBER CUT OUT FROM WORKING COPY OF PERMANENT DATASET*/
run;




/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2	SPECIAL CORRECTIONS HUBER 	
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
proc sql;
	create table huber (label="HUBER DS CUT FROM PERM DS. TO BE PRE-CLEANED AND JOINED BEFORE GENERAL CLEANING STEPS.") as select distinct
		*
	from build.db_tables_industry_joined
	where zedentenid=1174373;
quit;

proc sql;
create table amount_vs_price_qty as select distinct
	dokumententyp,
	dokumentennummer,
	konzentration,
	einheit,
	kilo_pro_einheit,
	anzahl,
	preis_pro_einheit,
	gesamtbetrag,
	anzahl*preis_pro_einheit as anzahl_x_ppe,
	count(*) as count
from huber
group by 1,2,3,4,5,6,7,8;
quit;
/*	13824 OBS (70 CNs) */
/*	GESAMTBETRAG IS INVOICE AMOUNT GIVEN AT EVERY POSITION.*/
/*	GESAMTBETRAG SHOULD BE EQUAL TO ANZAHL x PREIS_PRO_EINHEIT FOR ONE POSITION INVOICES.*/
/*	MULTI-POSITION INVOICES: ONE GESAMTBETRAG PER DOKUMENTENNUMMER SHOULD BE EQUAL TO SUM OF ANZAHL x PREIS_PRO_EINHEIT PER DOKUMENTENNUMMER.*/
/*	70 CREDIT NOTES WERE INCLUDED IN INVOICES. POSITIONS CREDITING DELIVERIES HAVE BEEN SEPARATED NOW BY SETTING DOCUMENTTYPE TO "GUTSCHRIFT".*/

proc sql;
	create table MULTI_POS_V_SINGLE_POS as select distinct
	 	dokumentennummer,
		count(*) as IDs_per_docnr
	from huber
	group by 1 order by 2 desc;
quit;
/* 	3903 DOKUMENTENNUMMER*/
/*	2252 MULTI POS INVOICES*/
/*	GESAMTBETRAG SHOULD BE EQUAL TO ANZAHL x PREIS_PRO_EINHEIT FOR ONE POSITION INVOICES.*/

proc sql; 
	create table amt_v_pq_single_pos as select distinct
	 	dokumentennummer,
		COUNT(id) as nr_pos_per_doc,
		gesamtbetrag,
		sum(anzahl*preis_pro_einheit) as anzahl_x_ppe format commax20.5,
		divide(gesamtbetrag,sum(anzahl*preis_pro_einheit)) as ocr_amt_by_anzahl_x_ppe format commax32.25,
		1 as korrektur_abschnitt
	from huber where dokumententyp="Rechnung" /*IMPORTANT FILTER. MIGHT EXPLAIN THE REMAINING OBS IN amt_v_pq_single_pos_wo_batch_8*/
	group by 1,3;
quit;

/*	STEP 1 - FOR nr_pos_per_doc AND ocr_amt_by_anzahl_x_ppe = 1 korrektur_abschnitt OK.*/
data  amt_v_pq_single_pos_wo_batch_1 clean_batch_1_dok_ids;
retain dokumentennummer nr_pos_per_doc gesamtbetrag anzahl_x_ppe ocr_amt_by_anzahl_x_ppe korrektur_abschnitt Vermutliche_Fehlerquelle;
format Vermutliche_Fehlerquelle $500.;
set amt_v_pq_single_pos;
if nr_pos_per_doc=1 and .99 < ocr_amt_by_anzahl_x_ppe < 1.01 then do korrektur_abschnitt=1; Vermutliche_Fehlerquelle="Rechnungen mit nur einer Position und Gesamtbetrag = anzahl x preis_pro_einheit."; 
output clean_batch_1_dok_ids; end;
else do korrektur_abschnitt=.; Vermutliche_Fehlerquelle=" ";
output amt_v_pq_single_pos_wo_batch_1; end;
run;
/*	FIRST TENTATIVELY ACCEPTABLE BATCH: 905 OF 3903 OBS (23%).korrektur_abschnitt SET TO '0'.*/


/*	STEP 2 - FOR nr_pos_per_doc > 1 AND ocr_amt_by_anzahl_x_ppe = 1 REPLACE GESAMTBETRAG WITH ANZAHL x PREIS_PRO_EINHEIT AND korrektur_abschnitt OK.*/
data  amt_v_pq_single_pos_wo_batch_2 clean_batch_2_dok_ids; 	
retain dokumentennummer nr_pos_per_doc gesamtbetrag anzahl_x_ppe ocr_amt_by_anzahl_x_ppe korrektur_abschnitt Vermutliche_Fehlerquelle;
set amt_v_pq_single_pos_wo_batch_1;
if nr_pos_per_doc>1 and .99 < ocr_amt_by_anzahl_x_ppe < 1.01
then do korrektur_abschnitt=2;Vermutliche_Fehlerquelle="Rechnungen mit mehr als einer Position: je Position, Gesamtbetrag durch anzahl x preis_pro_einheit ('Positionsbetrag') ersetzen."; 
output clean_batch_2_dok_ids; end; 
else do korrektur_abschnitt=.; Vermutliche_Fehlerquelle=" "; 
output amt_v_pq_single_pos_wo_batch_2; end;
run;
/*	SECOND TENTATIVELY ACCEPTABLE BATCH: 1000 OF 3903 OBS (26%).korrektur_abschnitt SET TO '0'.*/


/*	STEP 3 - FOR nr_pos_per_doc = 1 BUT ocr_amt_by_anzahl_x_ppe NE 1 SCAN ERROR / UNIT ERROR MOST LIKELY.*/
data  amt_v_pq_single_pos_wo_batch_3 clean_batch_3_dok_ids;
retain dokumentennummer nr_pos_per_doc gesamtbetrag anzahl_x_ppe ocr_amt_by_anzahl_x_ppe korrektur_abschnitt Vermutliche_Fehlerquelle;
set amt_v_pq_single_pos_wo_batch_2;
if nr_pos_per_doc=1 and  0.0099 < ocr_amt_by_anzahl_x_ppe < 0.01001
then do korrektur_abschnitt=3;Vermutliche_Fehlerquelle="Rechnungen mit nur einer Position und Gesamtbetrag = anzahl x preis_pro_einheit * ~0,01. OCR Fehler: Komma in Anzahl oder Preis_pro_einheit nicht ausgelesen. Anzahl und Preis_pro_einheit prüfen und Kommafehler korrigieren."; 
output clean_batch_3_dok_ids; end; 
else do korrektur_abschnitt=.; Vermutliche_Fehlerquelle=" "; output amt_v_pq_single_pos_wo_batch_3; end;
run;
/*	THIRD TENTATIVELY ACCEPTABLE BATCH: 294 OF 3903 OBS (9%).korrektur_abschnitt SET TO '0'.*/


/*	STEP 4 - FOR nr_pos_per_doc NOT EQUAL TO 1 AND ocr_amt_by_anzahl_x_ppe NE 1 SCAN ERROR / UNIT ERROR MOST LIKELY.*/
data  amt_v_pq_single_pos_wo_batch_4 clean_batch_4_dok_ids;
retain dokumentennummer nr_pos_per_doc gesamtbetrag anzahl_x_ppe ocr_amt_by_anzahl_x_ppe korrektur_abschnitt Vermutliche_Fehlerquelle;
set amt_v_pq_single_pos_wo_batch_3;
if nr_pos_per_doc^=1 and  0.0099 < ocr_amt_by_anzahl_x_ppe < 0.01001
then do korrektur_abschnitt=4;Vermutliche_Fehlerquelle="Rechnungen mit mehr als einer Position und Gesamtbetrag = anzahl x preis_pro_einheit * ~0,01. OCR Fehler: Komma in Anzahl oder Preis_pro_einheit nicht ausgelesen. Anzahl und Preis_pro_einheit prüfen und Kommafehler korrigieren."; 
output clean_batch_4_dok_ids; end; 
else do korrektur_abschnitt=.;Vermutliche_Fehlerquelle="Manuelle Nachbearbeitung nötig. Wahrscheinlich nicht verwertbar."; output amt_v_pq_single_pos_wo_batch_4; end;
run;
/*	FOURTH TENTATIVELY ACCEPTABLE BATCH: 203 OF 3903 OBS (6%).korrektur_abschnitt SET TO '0'.*/


/*	STEP 5 - FOR nr_pos_per_doc NOT EQUAL TO 1 AND ocr_amt_by_anzahl_x_ppe NE 1 SCAN ERROR / UNIT ERROR MOST LIKELY.*/
data  amt_v_pq_single_pos_wo_batch_5 clean_batch_5_dok_ids;
retain dokumentennummer nr_pos_per_doc gesamtbetrag anzahl_x_ppe ocr_amt_by_anzahl_x_ppe korrektur_abschnitt Vermutliche_Fehlerquelle;
set amt_v_pq_single_pos_wo_batch_4;
if nr_pos_per_doc not in (. 0) and  0.00099 < ocr_amt_by_anzahl_x_ppe < 0.001001
then do korrektur_abschnitt=5;Vermutliche_Fehlerquelle="Rechnungen mit einer oder mehr als einer Position und Gesamtbetrag = anzahl x preis_pro_einheit * ~0,001. OCR Fehler: Komma in Anzahl oder Preis_pro_einheit nicht ausgelesen. Anzahl und Preis_pro_einheit prüfen und Kommafehler korrigieren.";
output clean_batch_5_dok_ids; end; 
else do korrektur_abschnitt=.;Vermutliche_Fehlerquelle="Manuelle Nachbearbeitung nötig. Wahrscheinlich nicht verwertbar."; output amt_v_pq_single_pos_wo_batch_5; end;
run;
/*	FIFTH TENTATIVELY ACCEPTABLE BATCH: 276 OF 3903 OBS (7%).korrektur_abschnitt SET TO '0'.*/


/*	STEP 6 - gesamtbetrag=0 und anzahl x preis_pro_einheit ^0: anzahl und preis_pro_einheit korrekt?*/
data  amt_v_pq_single_pos_wo_batch_6 clean_batch_6_dok_ids;
retain dokumentennummer nr_pos_per_doc gesamtbetrag anzahl_x_ppe ocr_amt_by_anzahl_x_ppe korrektur_abschnitt Vermutliche_Fehlerquelle;
set amt_v_pq_single_pos_wo_batch_5;
if gesamtbetrag=0 and anzahl_x_ppe not in (. 0)
then do korrektur_abschnitt=6;Vermutliche_Fehlerquelle="OCR Fehler: Anzahl oder Preis_pro_einheit oder Gesamtbetrag nicht ausgelesen. Anzahl und Preis_pro_einheit und Gesamtbetrag prüfen und nach Möglichkeit korrigieren.";
output clean_batch_6_dok_ids; end; 
else do korrektur_abschnitt=.;Vermutliche_Fehlerquelle="Manuelle Nachbearbeitung nötig. Wahrscheinlich nicht verwertbar."; output amt_v_pq_single_pos_wo_batch_6; end;
run;
/*	SIXTH TENTATIVELY ACCEPTABLE BATCH: 255 OF 3903 OBS (9%).korrektur_abschnitt SET TO '0'.*/


/*	STEP 7 - gesamtbetrag not in (. 0) und anzahl x preis_pro_einheit=0 : anzahl oder preis_pro_einheit befüllt und korrekt?*/
data  amt_v_pq_single_pos_wo_batch_7 clean_batch_7_dok_ids;
retain dokumentennummer nr_pos_per_doc gesamtbetrag anzahl_x_ppe ocr_amt_by_anzahl_x_ppe korrektur_abschnitt Vermutliche_Fehlerquelle;
set amt_v_pq_single_pos_wo_batch_6;
if gesamtbetrag not in (. 0) and anzahl_x_ppe not in (. 0)
then do korrektur_abschnitt=7;Vermutliche_Fehlerquelle="OCR Fehler: Anzahl oder Preis_pro_einheit oder Gesamtbetrag nicht ausgelesen. Anzahl und Preis_pro_einheit und Gesamtbetrag prüfen und nach Möglichkeit korrigieren.";
output clean_batch_7_dok_ids; end; 
else do korrektur_abschnitt=.; Vermutliche_Fehlerquelle="Manuelle Nachbearbeitung nötig. Wahrscheinlich nicht verwertbar."; output amt_v_pq_single_pos_wo_batch_7; end;
run;
/*	SEVENTH TENTATIVELY ACCEPTABLE BATCH: 546 OF 3903 OBS (<1%).korrektur_abschnitt SET TO '0'.*/


/*	STEP 8 - gesamtbetrag not in (. 0) und anzahl x preis_pro_einheit=.: anzahl oder preis_pro_einheit befüllt und korrekt?*/
data  clean_NOT_batch_dok_ids clean_batch_8_dok_ids;
retain dokumentennummer nr_pos_per_doc gesamtbetrag anzahl_x_ppe ocr_amt_by_anzahl_x_ppe korrektur_abschnitt Vermutliche_Fehlerquelle;
set amt_v_pq_single_pos_wo_batch_7;
if gesamtbetrag not in (. 0) and anzahl_x_ppe =.
then do korrektur_abschnitt=8;Vermutliche_Fehlerquelle="OCR Fehler: Anzahl oder Preis_pro_einheit oder Gesamtbetrag nicht ausgelesen. Anzahl und Preis_pro_einheit und Gesamtbetrag prüfen und nach Möglichkeit korrigieren.";
output clean_batch_8_dok_ids; end; 
else do korrektur_abschnitt=9; Prio_HUBER_Nachbearbeitung=9; Vermutliche_Fehlerquelle="Manuelle Nachbearbeitung nötig. Wahrscheinlich nicht verwertbar."; output clean_NOT_batch_dok_ids; end;
run;
/*	EIGHTH TENTATIVELY ACCEPTABLE BATCH: 289 OF 3903 OBS (7%).korrektur_abschnitt SET TO '0'.*/

data to_do_korrektur_abschnitts;
	set clean_batch_1_dok_ids 
		clean_batch_2_dok_ids 
		clean_batch_3_dok_ids 
		clean_batch_4_dok_ids
		clean_batch_5_dok_ids
		clean_batch_6_dok_ids
		clean_batch_7_dok_ids
		clean_batch_8_dok_ids
		clean_NOT_batch_dok_ids;
	keep dokumentennummer korrektur_abschnitt Vermutliche_Fehlerquelle;
	proc sort; by dokumentennummer;
run;
/*	3903 OBS. OK*/

proc sort data=huber; by dokumentennummer; 
run;

data huber_to_dos; 
	merge huber to_do_korrektur_abschnitts; by dokumentennummer; 
run;

proc sql; 
	create table overview as select distinct
		korrektur_abschnitt,
		Vermutliche_Fehlerquelle,
		year(datepart(dokumentendatum)) as year,
		sum(anzahl) as gesamt_anzahl format commax20.,
		sum(gesamtbetrag) as gesamtbetrag format commax20.,
		sum(anzahl*preis_pro_einheit) as anzahl_x_ppe format commax20.,
		count(dokumentennummer) as nr_docs format commax20. 
	from huber_to_dos 
	group by 1,2,3;
quit;

%macro all_corr(n);
proc sql; 
	create table correction_cdc_issue_&n. as select distinct
		dokumentennummer,
		datepart(dokumentendatum) as datum format date9.,
		anzahl,
		preis_pro_einheit,
		gesamtbetrag,
		menge_in_tonnen,
		kilo_pro_einheit,
		einheit,
		anzahl*preis_pro_einheit as anzahl_x_ppe format commax20.,
		Vermutliche_Fehlerquelle,
		abbild_transaktion
	from huber_to_dos where korrektur_abschnitt=&n.;
quit;
%mend all_corr;
%all_corr(1);
%all_corr(2);
%all_corr(3);
%all_corr(4);
%all_corr(5);
%all_corr(6);
%all_corr(7);
%all_corr(8);
%all_corr(9);

data huber_approved (label="HUBER DS PRE-CLEANED. TO BE JOINED BEFORE GENERAL CLEANING STEPS."); 
format Anmerkung_Korrektur_CDC $200.;
set huber_to_dos;
	if korrektur_abschnitt=1 then do;
		Prio_HUBER_Nachbearbeitung=2;
		Anmerkung_Korrektur_CDC="Menge in Tonnen = Anzahl durch 1000.";
		menge_in_tonnen=anzahl/1000; end;

	if korrektur_abschnitt=2 then do; 
		Prio_HUBER_Nachbearbeitung=3;
		Anmerkung_Korrektur_CDC="Gesamtbetrag ersetzt durch anzahl x preis_pro_einheit.";
		gesamtbetrag=anzahl*preis_pro_einheit; end;

	if korrektur_abschnitt=3 then do; 
		Prio_HUBER_Nachbearbeitung=6;
		Anmerkung_Korrektur_CDC="kilo_pro_einheit=1 | menge_in_tonnen=anzahl/1000 | preis_pro_einheit durch 100 geteilt.";
		kilo_pro_einheit=1;menge_in_tonnen=anzahl/1000;preis_pro_einheit=preis_pro_einheit/100;gesamtbetrag=anzahl*preis_pro_einheit;end;

	if korrektur_abschnitt=4 then do; 
		Prio_HUBER_Nachbearbeitung=4;
		Anmerkung_Korrektur_CDC="kilo_pro_einheit=1 | menge_in_tonnen=anzahl/1000 | preis_pro_einheit durch 100 geteilt | Gesamtbetrag=anzahl x preis_pro_einheit.";
		kilo_pro_einheit=1;menge_in_tonnen=anzahl/1000;gesamtbetrag=anzahl*preis_pro_einheit;end;

	if korrektur_abschnitt=5 then do;
		Prio_HUBER_Nachbearbeitung=6;
		Anmerkung_Korrektur_CDC="kilo_pro_einheit=1 | menge_in_tonnen=anzahl/1000 | preis_pro_einheit durch 1000 geteilt | Gesamtbetrag=anzahl x preis_pro_einheit.";
		kilo_pro_einheit=1;menge_in_tonnen=anzahl/1000;preis_pro_einheit=preis_pro_einheit/1000;gesamtbetrag=anzahl*preis_pro_einheit;end;

	if korrektur_abschnitt=6 and preis_pro_einheit>200 then do 
		Prio_HUBER_Nachbearbeitung=8;
		Anmerkung_Korrektur_CDC="kilo_pro_einheit=1 | menge_in_tonnen=anzahl/1000 | preis_pro_einheit durch 1000 (TAUSEND) geteilt | Gesamtbetrag=anzahl x preis_pro_einheit.";
		preis_pro_einheit=preis_pro_einheit/1000;end;else 
	if korrektur_abschnitt=6 then do; 
		Prio_HUBER_Nachbearbeitung=8;
		Anmerkung_Korrektur_CDC="kilo_pro_einheit=1 | menge_in_tonnen=anzahl/1000 | preis_pro_einheit durch 100 (HUNDERT) geteilt | Gesamtbetrag=anzahl x preis_pro_einheit.";
		kilo_pro_einheit=1;menge_in_tonnen=anzahl/1000;preis_pro_einheit=preis_pro_einheit/100;gesamtbetrag=anzahl*preis_pro_einheit;end;

	if korrektur_abschnitt=7 then do; 
		Prio_HUBER_Nachbearbeitung=5;
		Anmerkung_Korrektur_CDC="MANUELLE NACHBEARBERITUNG. Vermutlich: kilo_pro_einheit=1 | menge_in_tonnen=anzahl/1000. Wo preis_pro_einheit=0 manuell nachtragen.";
		kilo_pro_einheit=1;menge_in_tonnen=anzahl/1000;preis_pro_einheit=preis_pro_einheit/100;gesamtbetrag=anzahl*preis_pro_einheit;end;

	if korrektur_abschnitt=8 then do; 
		Prio_HUBER_Nachbearbeitung=7;
		Anmerkung_Korrektur_CDC="OHNE WERTE IN ANZAHL UNBRAUCHBAR. Vermutlich: kilo_pro_einheit=1 | Problematische OCR Ergebnisse: ein-, zweistellige Gesamtbeträge.";
		/*kilo_pro_einheit=1;menge_in_tonnen=anzahl/1000;preis_pro_einheit=preis_pro_einheit/100;gesamtbetrag=anzahl*preis_pro_einheit;*/end;

	if korrektur_abschnitt=9 then Prio_HUBER_Nachbearbeitung=9;
	if find(upcase(artikelbezeichnung),"ZUCKER")>0 then Prio_HUBER_Nachbearbeitung=1;
run;

proc sql;
	create table summary as select distinct
		Prio_HUBER_Nachbearbeitung,
		korrektur_abschnitt,
		Vermutliche_Fehlerquelle,
		Anmerkung_Korrektur_CDC,
		count(dokumentennummer) as Anzahl_Belege format commax20. 
	from huber_approved 
	group by 1,2,3,4 order by Prio_HUBER_Nachbearbeitung;
quit;

/*	STACKING THE PRE-CLEANED HUBER DS BACK TO THE WORKING COPY OF THE PERM DS BEFORE GENERAL CLEANING STEPS.*/
data db_tables_industry_joined (label=" ");
set db_tables_industry_joined_PRE huber_approved;
if Prio_HUBER_Nachbearbeitung in (2 3 4 5 6 7 8 9) then delete;
/* 	SUGAR CONTAINING PRODUCTS REMOVED.*/
run;





/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
3	 VAT RATE AND VAT INCLUDED INDICATOR 	
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
%macro VAT_identification; /*macro is not called to avoid running time 
							consuming issue identification code each time.
							Comment in the the macro calling statement at the 
							end to execute this code*/

/* 3.1  ----- IDENTIFICATION-----*/
	proc sql;
	create table ust_inkl_1st_touch as select
		zedentenid,ust_satz,ust_inklusive,count(*) as count
	from db_tables_industry_joined
	group by 1,2,3 order by 4 desc;
	quit;

	/* INVESTIGATE POTENTIAL PROBLEMS AND SET ERROR INDICATORS ACCORDINGLY */
	data ust_inkl_1st_touch;
  	set ust_inkl_1st_touch;
  	if 0<ust_satz<.07 then do; error_check=1; end; else
  	if ust_satz=0 then do; error_check=1; end; else 
	if ust_satz=7 then do; error_check=1; end; else 
	if ust_inklusive=1 then do; error_check=1; end; else 
	if ust_satz=. then do; error_check=1; end; else do 
	error_check=0; end; 
	proc sort; by zedentenid ust_satz ust_inklusive;
	run;

	proc sort data=db_tables_industry_joined; by zedentenid ust_satz ust_inklusive;

	/*	IDENTIFYING THE ERRORS*/
	/*	ONE SET WITH ONLY THE   ERRORS*/
	proc sql;
		create table Ust_inkl_errors_only as select 
			a.*,
			b.error_check 
		from 	db_tables_industry_joined as a inner join 
				ust_inkl_1st_touch as b
		on a.zedentenid=b.zedentenid and a.ust_satz=b.ust_satz and a.ust_inklusive=b.ust_inklusive
		where error_check=1;
	quit;
	/*	ONE SET WITH FULL ASSIGNOR DATASETS OF THOSE WITH ERRORS*/
	proc sql;
		create table Ust_inkl_all_obs as select 
			a.*,
			b.error_check 
		from 	db_tables_industry_joined as a inner join 
				ust_inkl_1st_touch as b
		on a.zedentenid=b.zedentenid
		where error_check=1;
	quit;
	/*	Generate output files based on a list of undetermined variable values from a source file.*/
	/* 	Assign the library of the file that needs to be split;*/
	%let splitfile=Ust_inkl_all_obs;
	%let splitvar=zedentenid;
	/*	Create a sorted output that is a list to represent all of the splitvar values;*/
	proc freq data = &splitfile (keep=&splitvar) noprint;
	 table &splitvar / out = splitvar_list1;
	run;
	/*	Get the total number of distinct splitvar values;*/
	data splitvar_list1;
	 set splitvar_list1 end=final;
	 splitvar_num = _n_;
	 if final then call symput('lastvar',_n_);
	run;
	%put &lastvar.;
	/*	Sort source file to merge against new splitvar list file;*/
	proc sort data = &splitfile out = subset_audit;
	 by &splitvar;
	run;
	/*	Run macro loop once for each splitvar, creating the ouptut directory and output file; */
	%macro split;
	%do i=1 %to &lastvar %by 1;

	data splitvar&i (drop=count percent splitvar_num);
	 merge
	 subset_audit (in=a)
	 splitvar_list1 (in=b)
	 ;
	 by &splitvar;
	 if &i = splitvar_num then do;
	 call symput('newname',input(compress(&splitvar,'+/- &%().ö'),$32.));
	 output;
	 end;
	 if a;
	run;

	data Ust_inkl_ZID_&newname.; set splitvar&i;
	run;

	/*	NOT WORKING YET. NICE TO HAVE. SAVES OUTPUTS IN AUTIOMATICALLY NAMED AND CREATED SUBFOLDERS*/
	/*systask command "mkdir &path\Build\INDUSTRY\SAS Datasets (SUBI)\&newname.";*/

	/*proc export data=splitvar&i*/
	/* outfile="&path\Build\INDUSTRY\SAS Datasets (SUBI)\&newname\&newname..csv"*/
	/* replace;*/
	/*run;*/

	proc datasets lib=work noprint; delete splitvar&i;
	quit;

	%end;
	%mend;
	%split; 

	/*	INDIVIDUAL CHECKS. MISSING ID: 2 OBS*/
	proc sql;
		create table Ust_inkl_zid_1 as select distinct
			verkaeufer_id,name_verkaeufer,abbild_transaktion
		from Ust_inkl_zid_;
	quit;
	/*	ALL EMPTY*/

		/*	INDIVIDUAL CHECKS. VILSA BAD PYRMONT*/
	proc sql; 
		create table Ust_inkl_zid_102269_1 as select distinct
			name_zedent,name_verkaeufer,ust_satz
		from Ust_inkl_zid_102269;
	quit;
	proc sql; 
		create table Ust_inkl_zid_102269_2 as select distinct
			name_verkaeufer,
			sum(gesamtrabatt_rechnung) as gesamtrabatt_rechnung format commax12.,
			sum(anzahl) as anzahl format commax12.,
			sum(anzahl*PREIS_PRO_EINHEIT) as anz_x_ppe format commax12.,
			sum(menge_in_tonnen) as qty_t format commax12.,
			sum(gesamtbetrag) as amt format commax12.,
			(sum(anzahl*preis_pro_einheit)+sum(gesamtrabatt_rechnung)) as anz_x_ppe_minrabatt format commax12.,
			(sum(anzahl*preis_pro_einheit)+sum(gesamtrabatt_rechnung))*1.07 as anz_x_ppe_minrabatt_plusust format commax12.
		from Ust_inkl_zid_102269
		group by 1 order by 1;
	quit;
	/*	UST_INKL=1 IS CORRECT. */
	/*	NOTE FOR PRICE CALCULATION BELOW: 
			- GESAMTBETRAG INCLUDES UST. 
			- UST IS CALCULATED ON NET AMOUNT TAKING REBATE INTO ACCOUNT
			- GESAMTBETRAG = ((ANZAHL x PREIS_PRO_EINHEIT) + GESAMTRABATT_RECHNUNG) x UST.*/


	/*	INDIVIDUAL CHECKS. VILSA E+L Einkaufs- und Logistik KG*/
	proc sql; 
		create table Ust_inkl_zid_105578_1 as select distinct
			name_zedent,name_verkaeufer,ust_satz
		from Ust_inkl_zid_105578;
	quit;
	proc sql; 
		create table Ust_inkl_zid_105578_2 as select distinct
			name_verkaeufer,
			sum(gesamtrabatt_rechnung) as gesamtrabatt_rechnung format commax12.,
			sum(anzahl) as anzahl format commax12.,
			sum(anzahl*PREIS_PRO_EINHEIT) as anz_x_ppe format commax12.,
			sum(menge_in_tonnen) as qty_t format commax12.,
			sum(gesamtbetrag) as amt format commax12.,
			(sum(anzahl*preis_pro_einheit)+sum(gesamtrabatt_rechnung)) as anz_x_ppe_minrabatt format commax12.,
			(sum(anzahl*preis_pro_einheit)+sum(gesamtrabatt_rechnung))*1.07 as anz_x_ppe_minrabatt_plusust format commax12.
		from Ust_inkl_zid_105578
		group by 1 order by 1;
	quit;
	/*	UST_INKL=1 IS CORRECT. */
	/*	NOTE FOR PRICE CALCULATION BELOW: 
			- GESAMTBETRAG INCLUDES UST. 
			- UST IS CALCULATED ON NET AMOUNT TAKING REBATE INTO ACCOUNT
			- GESAMTBETRAG = ((ANZAHL x PREIS_PRO_EINHEIT) + GESAMTRABATT_RECHNUNG) x UST.*/


	/*	INDIVIDUAL CHECKS. Vilsa Brunnen Otto Rodekohr GmbH Co. KG*/
	proc sql; 
		create table Ust_inkl_zid_108876_1 as select distinct
			name_zedent,name_verkaeufer,ust_satz
		from Ust_inkl_zid_108876;
	quit;
	proc sql; 
		create table Ust_inkl_zid_108876_2 as select distinct
			name_verkaeufer,
			sum(gesamtrabatt_rechnung) as gesamtrabatt_rechnung format commax12.,
			sum(anzahl) as anzahl format commax12.,
			sum(anzahl*PREIS_PRO_EINHEIT) as anz_x_ppe format commax12.,
			sum(menge_in_tonnen) as qty_t format commax12.,
			sum(gesamtbetrag) as amt format commax12.,
			(sum(anzahl*preis_pro_einheit)+sum(gesamtrabatt_rechnung)) as anz_x_ppe_minrabatt format commax12.,
			(sum(anzahl*preis_pro_einheit)+sum(gesamtrabatt_rechnung))*1.07 as anz_x_ppe_minrabatt_plusust format commax12.
		from Ust_inkl_zid_108876
		group by 1 order by 1;
	quit;
	/*	UST_INKL=1 IS CORRECT. */
	/*	NOTE FOR PRICE CALCULATION BELOW: 
			- GESAMTBETRAG INCLUDES UST. 
			- UST IS CALCULATED ON NET AMOUNT TAKING REBATE INTO ACCOUNT
			- GESAMTBETRAG = ((ANZAHL x PREIS_PRO_EINHEIT) + GESAMTRABATT_RECHNUNG [=0]) x UST.*/


	/*	INDIVIDUAL CHECKS. Vilsa Bremer Schweiz Mineralwasserbrunnen GmbH*/
	proc sql; 
		create table Ust_inkl_zid_109924_1 as select distinct
			name_zedent,name_verkaeufer,ust_satz
		from Ust_inkl_zid_109924;
	quit;
	proc sql; 
		create table Ust_inkl_zid_109924_2 as select distinct
			name_verkaeufer,
			sum(gesamtrabatt_rechnung) as gesamtrabatt_rechnung format commax12.,
			sum(anzahl) as anzahl format commax12.,
			sum(anzahl*PREIS_PRO_EINHEIT) as anz_x_ppe format commax12.,
			sum(menge_in_tonnen) as qty_t format commax12.,
			sum(gesamtbetrag) as amt format commax12.,
			(sum(anzahl*preis_pro_einheit)+sum(gesamtrabatt_rechnung)) as anz_x_ppe_minrabatt format commax12.,
			(sum(anzahl*preis_pro_einheit)+sum(gesamtrabatt_rechnung))*1.07 as anz_x_ppe_minrabatt_plusust format commax12.
		from Ust_inkl_zid_109924
		group by 1 order by 1;
	quit;
	/*	UST_INKL=1 IS CORRECT. */
	/*	NOTE FOR PRICE CALCULATION BELOW: 
			- GESAMTBETRAG INCLUDES UST. 
			- UST IS CALCULATED ON NET AMOUNT TAKING REBATE INTO ACCOUNT
			- GESAMTBETRAG = ((ANZAHL x PREIS_PRO_EINHEIT) + GESAMTRABATT_RECHNUNG) x UST.*/


	/*	INDIVIDUAL CHECKS. BERENTZEN BGAG: CORRECTED TO 0.07 | INVOICES CHECKED: P&L is 7%, RAFTI/ORAFTI is 0% (NL), TATE&LYLE is 7%.*/
	proc sql; 
		create table Ust_inkl_zid_130053_1 as select distinct
			ABBILD_TRANSAKTION,name_verkaeufer,preis_pro_einheit,ust_satz,ust_inklusive,EINHEIT,
			sum(anzahl) as anzahl,
			sum(menge_in_tonnen) as qty_t,
			sum(gesamtbetrag) as amt,
			sum(anzahl*preis_pro_einheit) as anz_x_ppe format commax12.
		from Ust_inkl_zid_130053
		group by 1,2,3,4,5,6 order by 2,5,4,1;
	quit;

	/* 	Hafen-Mühlen-Werke set to 7%: 1 OBS with ust_satz 0 of 141 OBS total all with 7%.*/
	proc sql; 
		create table Ust_inkl_zid_130053_2 as select distinct
			verkaeufer_id,name_verkaeufer,abbild_transaktion,ust_satz,ust_inklusive
		from build.db_tables_industry_joined
		where verkaeufer_id=130657;
	quit;


	/*	INDIVIDUAL CHECKS. RAUCH*/
	proc sql;
		create table Ust_inkl_zid_200982_1 as select distinct
			verkaeufer_id,name_verkaeufer,abbild_transaktion
		from Ust_inkl_zid_200982;
	quit;
	proc sql; 
		create table Ust_inkl_zid_200982_2 as select distinct
			ABBILD_TRANSAKTION,name_verkaeufer,preis_pro_einheit,ust_satz,ust_inklusive,EINHEIT,
			sum(anzahl) as anzahl,
			sum(menge_in_tonnen) as qty_t,
			sum(gesamtbetrag) as amt,
			sum(anzahl*preis_pro_einheit) as anz_x_ppe format commax12.
		from Ust_inkl_zid_200982
		group by 1,2,3,4,5,6 order by 2,5,4,1;
	quit;
	/*	1 OBS UST_SATZ=0 AND UST_INKLUSIVE=0. RA_13011250.pdf SHOWS, IT IS CORRECT.*/


	/*	INDIVIDUAL CHECKS. LIELER*/
	proc sql;
		create table Ust_inkl_zid_199720_1 as select distinct
			name_zedent,verkaeufer_id,name_verkaeufer
		from Ust_inkl_zid_199720;
	quit;
	proc sql; 
		create table Ust_inkl_zid_199720_2 as select distinct
			ABBILD_TRANSAKTION,name_verkaeufer,preis_pro_einheit,ust_satz,ust_inklusive,EINHEIT,
			sum(anzahl) as anzahl,
			sum(menge_in_tonnen) as qty_t,
			sum(gesamtbetrag) as amt,
			sum(anzahl*preis_pro_einheit) as anz_x_ppe format commax12.
		from Ust_inkl_zid_199720
		group by 1,2,3,4,5,6 order by 2,5,4,1;
	quit;
	/*	1 OBS UST_SATZ=0 AND UST_INKLUSIVE=0. CREDIT NOTE Li_1590017950.pdf SHOWS, 7% IS THE CORRECT VALUE.*/


	/*	INDIVIDUAL CHECKS. QUEISSER*/
	proc sql;
		create table Ust_inkl_zid_535866_1 as select distinct
			name_zedent,name_verkaeufer,abbild_transaktion
		from Ust_inkl_zid_535866;
	quit;
	proc sql; 
		create table Ust_inkl_zid_535866_2 as select distinct
			ABBILD_TRANSAKTION,name_verkaeufer,preis_pro_einheit,ust_satz,ust_inklusive,EINHEIT,
			sum(anzahl) as anzahl,
			sum(menge_in_tonnen) as qty_t,
			sum(gesamtbetrag) as amt,
			sum(anzahl*preis_pro_einheit) as anz_x_ppe format commax12.
		from Ust_inkl_zid_535866
		group by 1,2,3,4,5,6 order by 2,5,4,1;
	quit;
	/*	UST_SATZ, PREIS_PRO_EINHEIT, ANZAHL EMPTY.*/
	/*	ALL DELIVERIES FROM NORDZUCKER AND SÜDZUCKER. CHECKED RAW DATA. CONTAINS NET AND GROSS AMOUNT. DIFFERENCE ALWAYS 7%*/
	/*	UNIT IS KILO. ANZAHL TO BE FILLED WITH MENGE_IN_TONNEN*1000. PREIS_PRO_EINHEIT TO BE FILLED WITH GESAMTBETRAG/ANZAHL.*/


	/*	INDIVIDUAL CHECKS. SOLDAN: INVOICES STILL MISSING.*/
	proc sql;
		create table Ust_inkl_zid_540368_1 as select distinct
			name_verkaeufer,ust_satz,ust_inklusive
		from Ust_inkl_zid_540368;
	quit;
	/*	5 SELLERS WITH POTENTIAL ERRORS. */
	/*	- 3x SYRAL (BELGIUM): FROM FRANCE. UST_SATZ SHOULD BY 0%. UST_INKLUSIVE SHOULD BE 0.*/
	/*	- 1x AGRANA: FROM AUSTRIA. UST_SATZ SHOULD BY 0%. UST_INKLUSIVE SHOULD BE 1.*/
	/*	- 1x ROQUETTE: FROM GERMANY. UST_SATZ SHOULD BY 7%. UST_INKLUSIVE SHOULD BE ?.*/
	/*	LOOK AT INVOICES*/
	proc sql;
		create table Ust_inkl_zid_540368_2 as select distinct
			Dokumentendatum,name_verkaeufer,preis_pro_einheit,ust_satz,ust_inklusive,
			sum(anzahl) as anzahl,
			sum(menge_in_tonnen) as qty_t,
			sum(gesamtbetrag) as amt
		from Ust_inkl_zid_540368
		group by 1,2,3,4,5 order by 1,2; 
	quit;
	/*	- 95 OBS SYRAL, UPTO 03JUL2008: FROM FRANCE. UST_SATZ SHOULD BY 0%. UST_INKLUSIVE SHOULD BE 0.*/
	/*	- 6 OBS SYRAL Belgium, AS OF 24JUL2008: UST_SATZ SHOULD BY 0%. UST_INKLUSIVE SHOULD BE 0.*/
	/*	- 2 OBS AGRANA STAERKE, 25NOV2014 and 06MAR2015: FROM AUSTRIA. UST_SATZ SHOULD BY 0%. UST_INKLUSIVE SHOULD BE 0.*/
	/*	- 1 OBS ROQUETTE, on 26SEP2008: FROM GERMANY. INVOICE SHOWS UST_SATZ SHOULD BY 7%. GESAMTBETRAG MATCHES 679,- , i.e. UST_INKLUSIVE SHOULD BE 0.*/
	/*	CHANGE ROQUETTE TO UST_SATZ TO 0.07 . CHANGE UST_INKLUSIVE SYRAL AND AGRANA FROM 1 TO 0.*/


	/*	INDIVIDUAL CHECKS. LÖSER*/
	proc sql; 
		create table Ust_inkl_zid_545299_1 as select distinct
			verkaeufer_id,name_verkaeufer,ust_satz,ust_inklusive
		from Ust_inkl_zid_545299;
	quit;
	/*	5 SELLERS. UST_SATZ ALWAYS 0. UST_INKLUSIVE SET TO 1 FOR SOME DELIVERIES OF 2 SELLERS (Felix Koch Offenbach, Couleur und Karamel, Nigay)*/
	/*	NORDZUCKER, SÜDZUCKER, Vitafit Steinhagen UST_SATZ PROBABLY 0.07. UST_INKLUSIVE CORRECT AT 0.*/
	/*	Felix Koch Offenbach, Couleur und Karamel: UST_SATZ PROBABLY 0.07. UST_INKLUSIVE CORRECT AT 0.*/
	/*	Nigay: UST_SATZ PROBABLY 0. UST_INKLUSIVE CORRECT AT 0.*/
	proc sql; 
		create table Ust_inkl_zid_545299_2 as select distinct
			DOKUMENTENNUMMER,name_verkaeufer,preis_pro_einheit,ust_satz,ust_inklusive,EINHEIT,
			sum(anzahl) as anzahl,
			sum(menge_in_tonnen) as qty_t,
			sum(gesamtbetrag) as amt,
			sum(anzahl*preis_pro_einheit) as anz_x_ppe format commax12.
		from Ust_inkl_zid_545299
		group by 1,2,3,4,5,6 order by 2,5,4,1;
	quit;
	/*	NORDZUCKER, SÜDZUCKER, Vitafit Steinhagen UST_SATZ TO BE CORRECTED 0.07. UST_INKLUSIVE CORRECT AT 0.*/
	/*	Felix Koch Offenbach, Couleur und Karamel: UST_SATZ 0.07. UST_INKLUSIVE=1 AND =0 BOTH CORRECT.*/
	/*	Nigay: UST_SATZ 0. UST_INKLUSIVE=0 IS CORRECT. UST_INKLUSIVE=1 TO BE CORRECTED TO 0.*/
	/*	***NOTE*** */
	/*		- SÜDZUCKER (eg. 70388994.pdf): PREIS_PRO_EINHEIT INCORRECT. VALUES PER UNIT ON INVOICE ARE ALREADY PER KG. PREIS_PRO_EINHEIT WAS GIVEN AS PRICE PER KILO */
	/*		- NORDZUCKER (eg. 8665888.pdf): PREIS_PRO_EINHEIT INCORRECT. VALUES PER UNIT ON INVOICE ARE ALREADY PER KG. PREIS_PRO_EINHEIT WAS GIVEN AS PRICE PER KILO */
	/* 		- NIGAY: PREIS_PRO_EINHEIT INCORRECT.*/


	/*	INDIVIDUAL CHECKS. BERGGOLD*/
	proc sql; 
		create table Ust_inkl_zid_558961_1 as select distinct
			verkaeufer_id,name_verkaeufer,ust_satz,ust_inklusive
		from Ust_inkl_zid_558961;
	quit;
	/*	6 SELLERS WITH EMPTY UST_SATZ AND UST_INKLUSIVE=0.*/
	proc sql; 
		create table Ust_inkl_zid_558961_2 as select distinct
			ABBILD_TRANSAKTION,name_verkaeufer,preis_pro_einheit,ust_satz,ust_inklusive,EINHEIT,
			sum(anzahl) as anzahl,
			sum(menge_in_tonnen) as qty_t,
			sum(gesamtbetrag) as amt,
			sum(anzahl*preis_pro_einheit) as anz_x_ppe format commax12.
		from Ust_inkl_zid_558961
		group by 1,2,3,4,5,6 order by 2,5,4,1;
	quit;
	/*	verkaeufer_id=197569 Pfeifer & Langen. SHOULD BE 0.07. UST_INKLUSIVE=0.*/
	/*	verkaeufer_id=200042 Südzucker Mannheim/Ochsenfurt. SHOULD BE 0.07. UST_INKLUSIVE=0.*/
	/*	verkaeufer_id=558963 Krajowa Spolka Cukrowa. SHOULD BE 0. UST_INKLUSIVE=0.*/
	/*	verkaeufer_id=559142 LITOVELSKA CUKROVARNA. SHOULD BE 0. UST_INKLUSIVE=0.*/
	/*	verkaeufer_id=561123 Belgosuc. SHOULD BE 0. UST_INKLUSIVE=0.*/
	/*	verkaeufer_id=561189 RECO-CHEMIE Handelsges. SHOULD BE 0. UST_INKLUSIVE=0.*/
	/*	***NOTE*** */
	/*		- ANZAHL CONTAINS QUANTITY IN TONS.*/
	/*		- MENGE_IN_TONNEN SHOULD BE FILLED WITH ANZAHL.*/
	/*		- ANZAHL SHOULD BE FILLED WITH MENGE_IN_TONNEN x 1000.*/


	/*	INDIVIDUAL CHECKS. PAUL REBER GMBH*/
	proc sql; 
		create table Ust_inkl_zid_7500_1 as select distinct
			NAME_ZEDENT,name_verkaeufer,ust_satz,ust_inklusive
		from Ust_inkl_zid_7500;
	quit;
	proc sql; 
		create table Ust_inkl_zid_7500_2 as select distinct
			ABBILD_TRANSAKTION,name_verkaeufer,preis_pro_einheit,ust_satz,ust_inklusive,EINHEIT,
			sum(anzahl) as anzahl,
			sum(menge_in_tonnen) as qty_t,
			sum(gesamtbetrag) as amt format commax12.,
			sum(anzahl*preis_pro_einheit) as anz_x_ppe format commax12.
		from Ust_inkl_zid_7500
		group by 1,2,3,4,5,6 order by 2,5,4,1;
	quit;
	/*	UST_SATZ 7 TO BE CORRECTED TO 0.07.*/
	/*	UST_INKL IS CORRECT AT 0.*/
	/*	ANZAHL x PREIS_PRO_EINHEIT IS NET AMOUNT. GESAMTBETRAG DOUBLE COUNTS THE INVOICE AMOUNT.*/
	/*	NEEDS TO BE CORRECTED: GESAMTBETRAG = ANZAHL*PREIS_PRO_EINHEIT.*/


	/*	INDIVIDUAL CHECKS. REBER RÜDESHEIMER CONFISERIE PRALINEN*/
	proc sql; 
		create table Ust_inkl_zid_7501_1 as select distinct
			NAME_ZEDENT,name_verkaeufer,ust_satz,ust_inklusive
		from Ust_inkl_zid_7501;
	quit;
	proc sql; 
		create table Ust_inkl_zid_7501_2 as select distinct
			ABBILD_TRANSAKTION,name_verkaeufer,preis_pro_einheit,ust_satz,ust_inklusive,EINHEIT,
			sum(anzahl) as anzahl,
			sum(menge_in_tonnen) as qty_t,
			sum(gesamtbetrag) as amt format commax12.,
			sum(anzahl*preis_pro_einheit) as anz_x_ppe format commax12.
		from Ust_inkl_zid_7501
		group by 1,2,3,4,5,6 order by 2,5,4,1;
	quit;
	/*	UST_SATZ 7 TO BE CORRECTED TO 0.07.*/
	/*	UST_INKL IS CORRECT AT 0.*/
	/*	ANZAHL x PREIS_PRO_EINHEIT IS NET AMOUNT. GESAMTBETRAG DOUBLE COUNTS THE INVOICE AMOUNT.*/
	/*	NEEDS TO BE CORRECTED: GESAMTBETRAG = ANZAHL*PREIS_PRO_EINHEIT.*/


	/*	INDIVIDUAL CHECKS. CARL KÜHNE */
	proc sql; 
		create table Ust_inkl_zid_820295_1 as select distinct
			verkaeufer_id,name_verkaeufer,ust_satz,ust_inklusive
		from Ust_inkl_zid_820295;
	quit;
	proc sql; 
		create table Ust_inkl_zid_866539_2 as select distinct
			name_zedent,name_verkaeufer,preis_pro_einheit,ust_satz,ust_inklusive,EINHEIT,
			sum(anzahl) as anzahl,
			sum(menge_in_tonnen) as qty_t,
			sum(gesamtbetrag) as amt format commax12.,
			sum(anzahl*preis_pro_einheit) as anz_x_ppe format commax12.
		from Ust_inkl_zid_820295
		group by 1,2,3,4,5,6 order by 2,5,4,1;
	quit;
	/*	UST_SATZ INDICATED AS 0.0007. SHOULD BE 0.07.*/


	/*	INDIVIDUAL CHECKS. EISBÄR*/
	proc sql; 
		create table Ust_inkl_zid_866539_1 as select distinct
			verkaeufer_id,name_verkaeufer,ust_satz,ust_inklusive
		from Ust_inkl_zid_866539;
	quit;
	proc sql; 
		create table Ust_inkl_zid_866539_2 as select distinct
			ABBILD_TRANSAKTION,name_verkaeufer,preis_pro_einheit,ust_satz,ust_inklusive,EINHEIT,
			sum(anzahl) as anzahl,
			sum(menge_in_tonnen) as qty_t,
			sum(gesamtbetrag) as amt format commax12.,
			sum(anzahl*preis_pro_einheit) as anz_x_ppe format commax12.
		from Ust_inkl_zid_866539
		group by 1,2,3,4,5,6 order by 2,5,4,1;
	quit;
	/*	UST_SATZ 0 AND .07 LISTED FOR SAME SELLER. NEEDS TO BE CHECKED.*/


	/*	INDIVIDUAL CHECKS. WERDER*/
	proc sql; 
		create table Ust_inkl_zid_901685_1 as select distinct
			name_zedent,name_verkaeufer,ust_satz,ust_inklusive 
		from Ust_inkl_zid_901685;
	quit;
	proc sql; 
		create table Ust_inkl_zid_901685_2 as select distinct
			ABBILD_TRANSAKTION,name_verkaeufer,preis_pro_einheit,ust_satz,ust_inklusive,EINHEIT,
			sum(anzahl) as anzahl,
			sum(menge_in_tonnen) as qty_t,
			sum(gesamtbetrag) as amt format commax12.,
			sum(anzahl*preis_pro_einheit) as anz_x_ppe format commax12.
		from Ust_inkl_zid_901685
		group by 1,2,3,4,5,6 order by 2,5,4,1;
	quit;
	/*	UST_SATZ = 0 CREDIT NOTES. 
		CAUTION: WERDER FOLDER AT KSP
		'VERTRÄGE_JAHRESVERGÜTUNGEN' CONTAINS TWO MORE PDFS
		WITH CREDIT NOTES FROM 1999 AND 2001.*/
	/*	EMAIL FOR CLARIFICATION SENT TO TIM WALTER ON NOV 17TH.*/
	/*	RESPONSE: TO BE DISREGARDED.
			-	01.05.01  31.12.01 VOLUME TARGET NOT ACHIEVED, CREDIT NOTE NOT ISSUED.
			-	01.12.99 - 31.12.00 NO PROOF OF PAYMENT OF CREDIT NOTE.*/


	/*	INDIVIDUAL CHECKS. FRANKONIA*/
	proc sql; 
		create table Ust_inkl_zid_962183_1 as select distinct
			name_verkaeufer,ust_satz
		from Ust_inkl_zid_962183;
	quit;
	proc sql; 
		create table Ust_inkl_zid_962183_2 as select distinct
			ABBILD_TRANSAKTION,name_verkaeufer,preis_pro_einheit,ust_satz,ust_inklusive,EINHEIT,
			sum(anzahl) as anzahl,
			sum(menge_in_tonnen) as qty_t,
			sum(gesamtbetrag) as amt format commax12.,
			sum(anzahl*preis_pro_einheit) as anz_x_ppe format commax12.
		from Ust_inkl_zid_962183
		group by 1,2,3,4,5,6 order by 2,5,4,1;
	quit;
	proc sql; 
		create table Ust_inkl_zid_962183_3 as select distinct
			name_verkaeufer,verkaeufer_id
		from Ust_inkl_zid_962183;
	quit;
	/*	UST_SATZ = 0 FOR GERMAN SUPPLIERS WRONG. CHANGE TO 0.07. KEEP FOREIGN ONES AT 0.*/
	/*	ADRESSES STILL MISSING. REVISIT LATER.*/


	/*	INDIVIDUAL CHECKS. Eichetti Confect GmbH*/
	proc sql; 
		create table Ust_inkl_zid_973349_1 as select distinct
			name_zedent,name_verkaeufer,ust_satz
		from Ust_inkl_zid_973349;
	quit;
	proc sql; 
		create table Ust_inkl_zid_973349_2 as select distinct
			ABBILD_TRANSAKTION,name_verkaeufer,preis_pro_einheit,ust_satz,ust_inklusive,EINHEIT,
			sum(anzahl) as anzahl,
			sum(menge_in_tonnen) as qty_t,
			sum(gesamtbetrag) as amt format commax12.,
			sum(anzahl*preis_pro_einheit) as anz_x_ppe format commax12.
		from Ust_inkl_zid_973349
		group by 1,2,3,4,5,6 order by 2,5,4,1;
	quit;
	/*	*/


	/*	INDIVIDUAL CHECKS. SCHLOSS WACHENHEIM.*/
	proc sql;
		create table Ust_inkl_zid_985629_1 as select distinct
			name_zedent,verkaeufer_id,name_verkaeufer
		from Ust_inkl_zid_985629;
	quit;
	proc sql;
		create table Ust_inkl_zid_985629_2 as select distinct
			ABBILD_TRANSAKTION,name_verkaeufer,preis_pro_einheit,ust_satz,ust_inklusive,EINHEIT,
			sum(anzahl) as anzahl,
			sum(menge_in_tonnen) as qty_t,
			sum(gesamtbetrag) as amt,
			sum(anzahl*preis_pro_einheit) as anz_x_ppe format commax12.
		from Ust_inkl_zid_985629
		group by 1,2,3,4,5,6 order by 2,5,4,1;
	quit;
	proc sql; 
		create table Ust_inkl_zid_985629_3 as select distinct
			name_verkaeufer,
			sum(gesamtrabatt_rechnung) as gesamtrabatt_rechnung format commax12.,
			sum(anzahl) as anzahl format commax12.,
			sum(anzahl*PREIS_PRO_EINHEIT) as anz_x_ppe format commax12.,
			sum(menge_in_tonnen) as qty_t format commax12.,
			sum(gesamtbetrag) as amt format commax12.,
			(sum(anzahl*preis_pro_einheit)-sum(gesamtrabatt_rechnung)) as anz_x_ppe_minrabatt format commax12.,
			(sum(anzahl*preis_pro_einheit)-sum(gesamtrabatt_rechnung))*1.07 as anz_x_ppe_minrabatt_plusust format commax12.
		from Ust_inkl_zid_985629
		group by 1 order by 1;
	quit;
	/*	*/


	/*	INDIVIDUAL CHECKS. BODETA.*/
	proc sql;
		create table Ust_inkl_zid_990382_1 as select distinct
			name_zedent,name_verkaeufer,land_verkaeufer,ust_satz,ust_inklusive 
		from Ust_inkl_zid_990382;
	quit;
	/*	NON GERMAN SUPPLIERS TO BE SET TO 0%.*/
	proc sql;
		create table Ust_inkl_zid_990382_2 as select distinct
			ABBILD_TRANSAKTION,name_verkaeufer,preis_pro_einheit,ust_satz,ust_inklusive,EINHEIT,
			sum(anzahl) as anzahl,
			sum(menge_in_tonnen) as qty_t,
			sum(gesamtbetrag) as amt,
			sum(anzahl*preis_pro_einheit) as anz_x_ppe format commax12.
		from Ust_inkl_zid_990382
		group by 1,2,3,4,5,6 order by 2,5,4,1;
	quit;

 %mend VAT_identification;
/*%Vat_identification;*/ /*Comment back in to run issue identification code*/


/* 3.2  ----- CORRECTION -----*/
/*  CHECKED ON ASSIGNOR SETS CREATED ABOVE.*/
	data db_tables_industry_joined;
		set db_tables_industry_joined;
/*	BERENTZEN BGAG	| CORRECTED TO 0.07 | INVOICES CHECKED: P&L is 7%, RAFTI/ORAFTI is 0% (NL), TATE&LYLE is 7%, Hafen-Mühlen-Werke set to 7%: 1 OBS with ust_satz 0 of 141 OBS total all with 7%.*/
		if zedentenid=130053 and ust_satz=0 then do; ust_satz=.07 ; end; else  			
/*	LIELER 			| CORRECTED TO 0.07 | CREDIT NOTE STATES 7%.*/
		if zedentenid=199720 and ust_satz=0 then do; ust_satz=.07 ; end; else  
/*	QUEISSER 		| CORRECTED TO 0.07 | CHECKED RAW DATA. CONTAINS NET AND GROSS AMOUNT. DIFFERENCE ALWAYS 7%.*/
		if zedentenid=535866 and ust_satz=. then do; ust_satz=.07 ; end; else 
		if zedentenid=535866 then do; anzahl=MENGE_IN_TONNEN*1000; PREIS_PRO_EINHEIT=divide(GESAMTBETRAG,ANZAHL); end; else 
/*	SOLDAN 			| */
		if zedentenid=540368 and ust_satz=. then do; ust_satz=0; end; else
		if zedentenid=540368 and ust_inklusive=1 then do; ust_inklusive=0; end; else
		if zedentenid=540368 and name_verkaeufer="Roquette" then do; ust_satz=0.07; end; else
/*	LÖSER 			| OK verkaeufer_id=545301 set to 7%: 1 OBS with ust_satz 0 of 141 OBS total all with 7%.*/
		if zedentenid=545299 and ust_inklusive=1 then do; ust_inklusive=0; end; else
		if zedentenid=545299 and verkaeufer_id ne 545443 then do; ust_satz=0.07; end; else
/* 	BERGGOLD		| */
		if zedentenid=558961 and verkaeufer_id in (558963 559142 561123 561189) then do; ust_satz=0; end; else 
		if zedentenid=558961 and verkaeufer_id in (197569 200042) then do; ust_satz=.07; end; else
/*	REBER			| INCORRECT ENTRY 7 CORRECTED TO 0.07 */
		if zedentenid=7500 then do; gesamtbetrag=anzahl*preis_pro_einheit; end; else
		if zedentenid=7500 and ust_satz=7 then do; ust_satz=.07; end; else
		if zedentenid=7501 then do; gesamtbetrag=anzahl*preis_pro_einheit; end; else
		if zedentenid=7501 and ust_satz=7 then do; ust_satz=.07; end; else
/* 	CARL KÜHNE KG 	|  */
		if zedentenid=820295 then do; ust_satz=0.07; end; else
/* 	FRANKONIA 		|  */
		if zedentenid=962183 and verkaeufer_id in (963879 962351 962767 962829 966750 962666 963136) then do; ust_satz=0; end; else do ust_satz=.07; end; 
/* 	BODETA 			|  */
		if zedentenid=990382 and land_verkaeufer in (" " "Deutschland") then do; ust_satz=0.07; end; else if zedentenid=990382 then do ust_satz=0; end;
	run;

/* 3.3  ----- VERIFICATION -----*/
proc sql;
create table ust_inkl_1st_CLEAN as select
	zedentenid,name_zedent,ust_satz,ust_inklusive,count(*) as count
	from db_tables_industry_joined
	group by 1,2,3,4 order by 2;
quit;




/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
4	 INCOTERMS AND FREIGHT INCLUDED INDICATOR 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

/* 4.1  ----- IDENTIFICATION-----*/
%macro INCOTERMS_AND_FREIGHT; /*The macro is not called to avoid running the time 
								consuming issue identification code each time.
								Comment in the the macro calling statement at the 
								end to execute this code*/
	proc sql;
	create table incoterms_freight_1st_touch as select
		zedentenid,fracht_inklusive,incoterms,count(*) as count
		from db_tables_industry_joined
		group by 1,2,3 order by 2 desc,4 desc;
	quit;

	/*	INVESTIGATE POTENTIAL PROBLEMS AND SET ERROR INDICATORS ACCORDINGLY */
	data incoterms_freight_1st_touch;
		set incoterms_freight_1st_touch;
		if find(upcase(incoterms),"DDP")>0 and fracht_inklusive=1 then do; error_check=0; end; else 
		if find(upcase(incoterms),"CIP")>0 and fracht_inklusive=1 then do; error_check=0; end; else 
		if find(upcase(incoterms),"CPT")>0 and fracht_inklusive=1 then do; error_check=0; end; else 
		if find(upcase(incoterms),"DAP")>0 and fracht_inklusive=1 then do; error_check=0; end; else 
		if find(upcase(incoterms),"CIF")>0 and fracht_inklusive=1 then do; error_check=0; end; else 
		if find(upcase(incoterms),"FOB")>0 and fracht_inklusive=0 then do; error_check=0; end; else 
		if find(upcase(incoterms),"FCA")>0 and fracht_inklusive=0 then do; error_check=0; end; else 
		if find(upcase(incoterms),"EXW")>0 and fracht_inklusive=0 then do; error_check=0; end; else do 
		error_check=1; end;
		proc sort; by zedentenid incoterms fracht_inklusive;
	run;

	proc sort data=db_tables_industry_joined; by zedentenid fracht_inklusive incoterms;
	run;

	/*	IDENTIFYING THE ERRORS*/
	/*	ONE SET WITH ONLY THE ERRORS*/
	proc sql;
		create table incoterms_freight_incl_errors as select 
			a.*,
			b.error_check 
		from 	db_tables_industry_joined as a inner join 
				incoterms_freight_1st_touch as b
		on a.zedentenid=b.zedentenid and a.fracht_inklusive=b.fracht_inklusive and a.incoterms=b.incoterms
		where error_check=1;
	quit;
	/*	ONE SET WITH FULL ASSIGNOR DATASETS OF THOSE WITH ERRORS*/
	proc sql;
		create table incoterms_freight_incl_all as select 
			a.*,
			b.error_check 
		from 	db_tables_industry_joined as a inner join 
				incoterms_freight_1st_touch as b
		on a.zedentenid=b.zedentenid
		where error_check=1;
	quit;

	/*	Generate output files based on a list of undetermined variable values from a source file.*/
	/* 	Assign the library of the file that needs to be split;*/
	%let splitfile=incoterms_freight_incl_all;
	%let splitvar=zedentenid;
	/*	Create a sorted output that is a list to represent all of the splitvar values;*/
	proc freq data = &splitfile (keep=&splitvar) noprint;
	 table &splitvar / out = splitvar_list2;
	run;
	/*	Get the total number of distinct splitvar values;*/
	data splitvar_list2;
	 set splitvar_list2 end=final;
	 splitvar_num = _n_;
	 if final then call symput('lastvar',_n_);
	run;
	%put &lastvar;
	/*	Sort source file to merge against new splitvar list file;*/
	proc sort data = &splitfile out = subset_audit;
	 by &splitvar;
	run;
	/*	Run macro loop once for each splitvar, creating the ouptut directory and output file; */
	%macro split;
	%do i=1 %to &lastvar %by 1;

	data splitvar&i (drop=count percent splitvar_num);
	 merge
	 subset_audit (in=a)
	 splitvar_list2 (in=b)
	 ;
	 by &splitvar;
	 if &i = splitvar_num then do;
	 call symput('newname',input(compress(&splitvar,'+/- &%().ö'),$32.));
	 output;
	 end;
	 if a;
	run;

	data inco_freight_ZID_&newname.; set splitvar&i;
	run;

	/*	NOT WORKING YET. NICE TO HAVE. SAVES OUTPUTS IN AUTIOMATICALLY NAMED AND CREATED SUBFOLDERS*/
	/*systask command "mkdir &path\Build\INDUSTRY\SAS Datasets (SUBI)\&newname.";*/

	/*proc export data=splitvar&i*/
	/* outfile="&path\Build\INDUSTRY\SAS Datasets (SUBI)\&newname\&newname..csv"*/
	/* replace;*/
	/*run;*/

	proc datasets lib=work noprint; delete splitvar&i;
	quit;

	%end;
	%mend;
	%split; 


	/*	INDIVIDUAL CHECKS. RAUCH*/
	proc sql; 
		create table inco_freight_ZID_200982_1 as select distinct
			name_zedent,name_verkaeufer,fracht_inklusive,incoterms
		from inco_freight_ZID_200982;
	quit;
	proc sql; 
		create table inco_freight_ZID_200982_2 as select distinct
			ABBILD_TRANSAKTION,name_verkaeufer,preis_pro_einheit,fracht_inklusive,incoterms,EINHEIT,
			sum(anzahl) as anzahl,
			sum(menge_in_tonnen) as qty_t,
			sum(gesamtbetrag) as amt format commax12.,
			sum(anzahl*preis_pro_einheit) as anz_x_ppe format commax12.
		from inco_freight_ZID_200982
		group by 1,2,3,4,5,6 order by 2,5,4,1;
	quit;
	/*	1 OBS WITH INCOTERMS=EXW AND FRACHT_INKLUSIVE=1 RA_70380746.pdf shows INCOTERM CPT (MARKTREDWITZ) NOT EXW. TO BE CORRECTED.*/


	/*	INDIVIDUAL CHECKS. SADEX */
	proc sql; 
		create table inco_freight_ZID_5000_1 as select distinct
			name_zedent,name_verkaeufer,fracht_inklusive,incoterms
		from inco_freight_ZID_5000;
	quit;
	/*	INCOTERM ALWAYS CPT, FRACHT_INKLUSIVE 0 AND 1: */
	proc sql; 
		create table inco_freight_ZID_5000_2 as select distinct
			ABBILD_TRANSAKTION,name_verkaeufer,preis_pro_einheit,fracht_inklusive,incoterms,EINHEIT,
			sum(anzahl) as anzahl,
			sum(menge_in_tonnen) as qty_t,
			sum(gesamtbetrag) as amt format commax12.,
			sum(anzahl*preis_pro_einheit) as anz_x_ppe format commax12.
		from inco_freight_ZID_5000
		group by 1,2,3,4,5,6 order by 2,5,4,1;
	quit;
	/*	2 OBS WITH FRACHT_INKLUSIVE=0.
		CDC00768088 IS CREDIT NOTE FOR INVOICE NR 70484962 FROM 03.JAN.2006 (=CDC00768032). WRITE BARCODE INVOICE CDC00768032 INTO REF_NR FIELD OF CN CDC00768088 AND BARCODE CN CDC00768088 INTO ABBILD_ANPASSUNG OF INOVICE CDC00768032.
		CDC00768083 IS INVOICE WITH REBATE. FRACHT_INKLUSIVE SHOULD BE 1. AMOUNT PAID IS  10.937,27. TOTAL AMOUNT BEFORE REBATE:  14.283,70*/


	/*	INDIVIDUAL CHECKS. LÖSER */
	proc sql; 
		create table inco_freight_ZID_545299_1 as select distinct
			name_zedent,name_verkaeufer,fracht_inklusive,incoterms
		from inco_freight_ZID_545299;
	quit;
	/*	INCOTERM ALWAYS CPT, FRACHT_INKLUSIVE 0 AND 1: */
	proc sql; 
		create table inco_freight_ZID_545299_2 as select distinct
			ABBILD_TRANSAKTION,name_verkaeufer,preis_pro_einheit,fracht_inklusive,incoterms,EINHEIT,
			sum(anzahl) as anzahl,
			sum(menge_in_tonnen) as qty_t,
			sum(gesamtbetrag) as amt format commax12.,
			sum(anzahl*preis_pro_einheit) as anz_x_ppe format commax12.
		from inco_freight_ZID_545299
		group by 1,2,3,4,5,6 order by 2,5,4,1;
	quit;
	/*	COMBINATION EXW AND FRACHT_INKLUSIVE=1 FALSE. CIP, CPT CORRECT AT FRACHT_INKLUSIVE=1.*/


	/*	INDIVIDUAL CHECKS. BERGGOLD*/
	proc sql; 
		create table inco_freight_ZID_558961_1 as select distinct
			name_zedent,name_verkaeufer,fracht_inklusive,incoterms
		from inco_freight_ZID_558961;
	quit;
	/*	INCOTERMS ARE DDP,DAP,CPT BUT FRACHT_INKLUSIVE IS 0.*/
	proc sql; 
		create table inco_freight_ZID_558961_2 as select distinct
			ABBILD_TRANSAKTION,name_verkaeufer,preis_pro_einheit,fracht_inklusive,incoterms,EINHEIT,
			sum(anzahl) as anzahl,
			sum(menge_in_tonnen) as qty_t,
			sum(gesamtbetrag) as amt format commax12.,
			sum(anzahl*preis_pro_einheit) as anz_x_ppe format commax12.
		from inco_freight_ZID_558961
		group by 1,2,3,4,5,6 order by 2,5,4,1;
	quit;
	/* 	FRACHT_INKLUSIVE TO BE SET TO 1. SEE ELO ID 853592.*/


	/*	INDIVIDUAL CHECKS.  REBER */
	proc sql; 
		create table inco_freight_ZID_7500_1 as select distinct
			name_zedent,name_verkaeufer,fracht_inklusive,incoterms
		from inco_freight_ZID_7500;
	quit;
	/*	INCOTERMS CPT BUT FRACHT_INKLUSIVE IS 0 AND 1.*/
	proc sql; 
		create table inco_freight_ZID_7500_2 as select distinct
			ABBILD_TRANSAKTION,name_verkaeufer,preis_pro_einheit,fracht_inklusive,incoterms,EINHEIT,
			sum(anzahl) as anzahl,
			sum(menge_in_tonnen) as qty_t,
			sum(gesamtbetrag) as amt format commax12.,
			sum(anzahl*preis_pro_einheit) as anz_x_ppe format commax12.
		from inco_freight_ZID_7500
		group by 1,2,3,4,5,6 order by 2,5,4,1;
	quit;
	/* 	CDC00764041 IS CPT REBER. FRACHT_INKLUSIVE TO BE SET TO 1.*/


	/*	INDIVIDUAL CHECKS.  REBER RÜDESHEIMER CONFISERIE PRALINEN.*/
	proc sql; 
		create table inco_freight_ZID_7501_1 as select distinct
			name_zedent,name_verkaeufer,fracht_inklusive,incoterms
		from inco_freight_ZID_7501;
	quit;
	/*	INCOTERMS FCA BUT FRACHT_INKLUSIVE IS 1.*/
	proc sql; 
		create table inco_freight_ZID_7501_2 as select distinct
			ABBILD_TRANSAKTION,name_verkaeufer,preis_pro_einheit,fracht_inklusive,incoterms,EINHEIT,
			sum(anzahl) as anzahl,
			sum(menge_in_tonnen) as qty_t,
			sum(gesamtbetrag) as amt format commax12.,
			sum(anzahl*preis_pro_einheit) as anz_x_ppe format commax12.
		from inco_freight_ZID_7501
		group by 1,2,3,4,5,6 order by 1,2,5,4;
	quit;
	/* 	CDC00764127 IS FCA REBER. INVOICE IS THE SAME AS THE 4 PRECEDING BARCODES. THEY ARE CPT. FRACHT_INKLUSIVE TO BE SET TO 1.*/


	/*	INDIVIDUAL CHECKS. HACHEZ.*/
	proc sql; 
		create table inco_freight_ZID_830794_1 as select distinct
			name_zedent,name_verkaeufer,fracht_inklusive,incoterms
		from inco_freight_ZID_830794;
	quit;
	/*	INCOTERMS CIF WITH FRACHT_INKLUSIVE=0.*/
	proc sql; 
		create table inco_freight_ZID_830794_2 as select distinct
			ABBILD_TRANSAKTION,name_verkaeufer,preis_pro_einheit,fracht_inklusive,incoterms,EINHEIT,
			sum(anzahl) as anzahl,
			sum(menge_in_tonnen) as qty_t,
			sum(gesamtbetrag) as amt format commax12.,
			sum(anzahl*preis_pro_einheit) as anz_x_ppe format commax12.
		from inco_freight_ZID_830794
		WHERE INCOTERMS="CIF" AND FRACHT_INKLUSIVE=0
		group by 1,2,3,4,5,6 order by 1,2,5,4;
	quit;
	/* 	4 ERRORS CIF EXCL FREIGHT. FRACHT_INKLUSIVE TO BE SET TO 1.*/
	data inco_freight_ZID_830794_3; set 	inco_freight_ZID_830794;
		WHERE INCOTERMS="CIF" AND FRACHT_INKLUSIVE=0;
	run;
	/*	UNCLEAR. MOST LIKELY INCL. FREIGHT. FRACHT_INKL TO BE SET TO 1.*/


	/*	INDIVIDUAL CHECKS. EISBÄR EIS.*/
	proc sql; 
		create table inco_freight_ZID_866539_1 as select distinct
			name_zedent,name_verkaeufer,fracht_inklusive,incoterms
		from inco_freight_ZID_866539;
	quit;
	/*	INCOTERMS CPT WITH FRACHT_INKLUSIVE=0.*/
	proc sql; 
		create table inco_freight_ZID_866539_2 as select distinct
			ABBILD_TRANSAKTION,name_verkaeufer,preis_pro_einheit,fracht_inklusive,incoterms,EINHEIT,
			sum(anzahl) as anzahl,
			sum(menge_in_tonnen) as qty_t,
			sum(gesamtbetrag) as amt format commax12.,
			sum(anzahl*preis_pro_einheit) as anz_x_ppe format commax12.
		from inco_freight_ZID_866539
		WHERE INCOTERMS="CPT" AND FRACHT_INKLUSIVE=0
		group by 1,2,3,4,5,6 order by 1,2,5,4;
	quit;
	/*	ALL GERMAN SUPPLIERS. MOST LIKELY INCL. FREIGHT. FRACHT_INKL TO BE SET TO 1.*/
	
	
	/*	INDIVIDUAL CHECKS. EICHETTI.*/
	proc sql; 
		create table inco_freight_ZID_973349_1 as select distinct
			name_zedent,name_verkaeufer,fracht_inklusive,incoterms
		from inco_freight_ZID_973349;
	quit;
	/*	INCOTERMS EXW WITH FRACHT_INKLUSIVE=1.*/
	proc sql; 
		create table inco_freight_ZID_973349_2 as select distinct
			ABBILD_TRANSAKTION,name_verkaeufer,preis_pro_einheit,fracht_inklusive,incoterms,EINHEIT,
			sum(anzahl) as anzahl,
			sum(menge_in_tonnen) as qty_t,
			sum(gesamtbetrag) as amt format commax12.,
			sum(anzahl*preis_pro_einheit) as anz_x_ppe format commax12.
		from inco_freight_ZID_973349
		WHERE INCOTERMS="EXW" AND FRACHT_INKLUSIVE=1
		group by 1,2,3,4,5,6 order by 1,2,5,4;
	quit;
	
	/*	INDIVIDUAL CHECKS. BODETA.*/
	proc sql; 
		create table inco_freight_ZID_990382_1 as select distinct
			name_zedent,name_verkaeufer,fracht_inklusive,incoterms
		from inco_freight_ZID_990382;
	quit;
	/*	INCOTERMS DDP WITH FRACHT_INKLUSIVE=0.*/
	proc sql; 
		create table inco_freight_ZID_990382_2 as select distinct
			ABBILD_TRANSAKTION,name_verkaeufer,preis_pro_einheit,fracht_inklusive,incoterms,EINHEIT,
			sum(anzahl) as anzahl,
			sum(menge_in_tonnen) as qty_t,
			sum(gesamtbetrag) as amt format commax12.,
			sum(anzahl*preis_pro_einheit) as anz_x_ppe format commax12.
		from inco_freight_ZID_990382
		group by 1,2,3,4,5,6 order by 1,2,5,4;
	quit;
	/*	CORRECT FRACHT_INKLUSIVE TO 1.*/

%mend Incoterms_and_freight;

/* %Incoterms_and_freight; */ /*Comment back in to run issue identification code*/

/* 4.2  ----- CORRECTION-----*/
data db_tables_industry_joined; 
set db_tables_industry_joined;
/*	RAUCH		| EXW TO CPT */
		if zedentenid=200982 and incoterms="EXW" then do; incoterms="CPT"; end; else
/*	SADEX		| FRACHT_INKLUSIVE SET TO 1 FOR INCOTERMS CPT.*/
		if zedentenid=5000 and incoterms="CPT" then do; fracht_inklusive=1; end; else
/*  LÖSER		|  COMBINATION EXW AND FRACHT_INKLUSIVE=1 FALSE.*/
		if zedentenid=545299  and incoterms="EXW" then do; fracht_inklusive=0; end; else
/*	BERGGOLD	|  FRACHT_INKLUSIVE TO BE SET TO 1. SEE ELO ID 853592 */
		if zedentenid=558961  then do; fracht_inklusive=1; end; else
/*	REBER REEBR	|  FRACHT_INKLUSIVE TO BE SET TO 1. */
		if zedentenid=7500 then do; fracht_inklusive=1; end; else
/*	REBER RCP	|  FRACHT_INKLUSIVE TO BE SET TO 1. */
		if zedentenid=7501  then do; fracht_inklusive=1; end; else
/*	HACHEZ		| FOR INCOTERMS CIF FRACHT_INKLUSIVE TO BE SET TO 1. */
		if zedentenid=830794 and incoterms="CIF" and fracht_inklusive=0 then do fracht_inklusive=1 ; end; else 
/*	EISBÄR		|  FOR INCOTERMS CPT FRACHT_INKLUSIVE TO BE SET TO 1. */
		if zedentenid=866539 and incoterms="CPT" and fracht_inklusive=0 then do fracht_inklusive=1 ; end; else 
/*	EICHETTI	|  FOR INCOTERMS EXW FRACHT_INKLUSIVE TO BE SET TO 0. */
		if zedentenid=973349 and incoterms="EXW" and fracht_inklusive=1 then do fracht_inklusive=0 ; end; 
/*	BODETA		|  FOR INCOTERMS DDP FRACHT_INKLUSIVE TO BE SET TO 1.*/
		if zedentenid=973349 and incoterms="DDP" then do fracht_inklusive=1; end; 
run;

/* 4.3  ----- VERIFICATION-----*/
proc sql;
	create table incoterms_freight_1st_clean as select
		zedentenid,fracht_inklusive,incoterms,count(*) as count
	from db_tables_industry_joined
	group by 1,2,3 order by 2 desc,4 desc;
quit;





/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
5	 MISSING ZEDENTEN ID 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
data missing_Zedenten_ID;
	set db_tables_industry_joined; where zedentenid=.;
run; /*--> Should have 0 observations*/




/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
6	 KILO_PRO_EINHEIT, EINHEIT, MENGE_IN_TONNEN, ANZAHL  
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
%macro KG_P_EINH_unit_MENGE_IN_TO_ANZ; 	/*The macro is not called to avoid running the time 
								consuming issue identification code each time.
								Comment in the the macro calling statement at the 
								end to execute this code*/


/* 6.1  ----- IDENTIFICATION-----*/
	proc sql;
	create table unit_weight_per_unit_1st_touch as select distinct
		zedentenid,name_zedent,einheit,kilo_pro_einheit,count(*) as count
	from db_tables_industry_joined
	group by 1,2,3,4 order by 5 desc;
	quit;

	/*	INVESTIGATE POTENTIAL PROBLEMS AND SET ERROR INDICATORS ACCORDINGLY */
	data unit_weight_per_unit_1st_touch;
		set unit_weight_per_unit_1st_touch;
		if find(upcase(einheit),"DEZITONNE")>0 and Kilo_pro_Einheit=100 then do; error_check=0; end; else 
		if find(upcase(einheit),"DT")>0 and Kilo_pro_Einheit=100 then do; error_check=0; end; else 
		if find(upcase(einheit),"KILOGRAMM")>0 and Kilo_pro_Einheit=1 then do; error_check=0; end; else 
		if find(upcase(einheit),"KG")>0 and Kilo_pro_Einheit=1 then do; error_check=0; end; else 
		if find(upcase(einheit),"MT")>0 and Kilo_pro_Einheit=1000 then do; error_check=0; end; else 
		if find(upcase(einheit),"TO")>0 and Kilo_pro_Einheit=1000 then do; error_check=0; end; else 
			do error_check=1; end;
		if upcase(einheit)="T" and Kilo_pro_Einheit=1000 then do; error_check=0; end; 
		proc sort; by zedentenid einheit kilo_pro_einheit;
	run;

	/*	IDENTIFYING THE POTENTIAL ERRORS*/
	/*	ONE SET WITH ONLY THE POTENTIAL ERRORS*/
	proc sql;
	create table unit_and_weight_per_unit_errors as select 
		a.*,
		b.error_check 
	from 	db_tables_industry_joined as a inner join 
			unit_weight_per_unit_1st_touch as b
	on a.zedentenid=b.zedentenid and a.einheit=b.einheit and a.kilo_pro_einheit=b.kilo_pro_einheit
	where error_check=1;
	quit;
	/*	ONE SET WITH FULL ASSIGNOR DATASETS OF THOSE WITH ERRORS*/
	proc sql;
	create table unit_and_weight_per_unit_all as select 
		a.*,
		b.error_check 
	from 	db_tables_industry_joined as a inner join 
			unit_weight_per_unit_1st_touch as b
	on a.zedentenid=b.zedentenid
	where error_check=1;
	quit;
	/*	Generate output files based on a list of undetermined variable values from a source file.*/
	/* 	Assign the library of the file that needs to be split;*/
	%let splitfile=unit_and_weight_per_unit_all;
	%let splitvar=ZEDENTENID;
	/*	Create a sorted output that is a list to represent all of the splitvar values;*/
	proc freq data = &splitfile (keep=&splitvar) noprint;
	table &splitvar / out = splitvar_list3;
	run;
	/*	Get the total number of distinct splitvar values;*/
	data splitvar_list3;
	set splitvar_list3 end=final;
	splitvar_num = _n_;
	if final then call symput('lastvar',_n_);
	run;
	/*	Sort source file to merge against new splitvar list file;*/
	proc sort data = &splitfile out = subset_audit;
	by &splitvar;
	run;
	/*	Run macro loop once for each splitvar, creating the ouptut directory and output file; */
	%macro split;
	%do i=1 %to &lastvar %by 1;

	data splitvar&i (drop=count percent splitvar_num);
	merge
	subset_audit (in=a)
	splitvar_list3 (in=b)
	;
	by &splitvar;
	if &i = splitvar_num then do;
	call symput('newname',input(compress(&splitvar,'+/- &%().ö'),$32.));
	output;
	end;
	if a;
	run;

	data unit_weight_ZID_&newname.; set splitvar&i;
	run;

	/*	NOT WORKING YET. NICE TO HAVE. SAVES OUTPUTS IN AUTIOMATICALLY NAMED AND CREATED SUBFOLDERS*/
	/*systask command "mkdir &path\Build\INDUSTRY\SAS Datasets (SUBI)\&newname.";*/

	/*proc export data=splitvar&i*/
	/* outfile="&path\Build\INDUSTRY\SAS Datasets (SUBI)\&newname\&newname..csv"*/
	/* replace;*/
	/*run;*/

	proc datasets lib=work noprint; delete splitvar&i;
	quit;

	%end;
	%mend;
	%split; 

	/*	INDIVIDUAL CHECKS. MISSING ID*/
	proc sql;
		create table Unit_weight_zid_1 as select distinct
			name_zedent,einheit,kilo_pro_einheit
		from Unit_weight_zid_;
	quit;
	proc sql; 
		create table Unit_weight_zid_2 as select distinct
			ABBILD_TRANSAKTION,einheit,kilo_pro_einheit,
			sum(anzahl) as anzahl,
			sum(menge_in_tonnen) as qty_t,
			sum(gesamtbetrag) as amt,
			sum(anzahl*preis_pro_einheit) as anz_x_ppe format commax12.
		from Unit_weight_zid_
		group by 1,2,3 order by 5,4,1;
	quit;
	/*	*/

	/*	INDIVIDUAL CHECKS. MISSING ID*/
	proc sql;
		create table Unit_weight_zid_130053_1 as select distinct
			name_zedent,einheit,kilo_pro_einheit
		from Unit_weight_zid_130053;
	quit;
	proc sql;
		create table Unit_weight_zid_130053_2 as select distinct
			ABBILD_TRANSAKTION,einheit,kilo_pro_einheit,
			sum(anzahl) as anzahl,
			sum(menge_in_tonnen) as qty_t,
			sum(gesamtbetrag) as amt,
			sum(anzahl*preis_pro_einheit) as anz_x_ppe format commax12.
		from Unit_weight_zid_130053
		group by 1,2,3 order by 5,4,1;
	quit;
	/*	*/


	/**/
	data are_all_missing;
	set db_tables_industry_joined; where zedentenid=558961 AND missing(menge_in_Tonnen)=0;
	run; /*Yes all missing*/

	data other_q_vars_Berggold;
	set db_tables_industry_joined; where zedentenid=558961 AND missing(anzahl);
	run; /*No missing Anzahl*/

	data other_q_vars_Berggold;
	set db_tables_industry_joined; where zedentenid=558961 AND missing(kilo_pro_einheit);
	run; /*No missing kilo_pro_Einheit*/

	/*Result: For Berggold "Menge_in_Tonnen" can be calculated, done below*/

 	/*KÜHNE*/
	data Kuehne_q;
	set db_tables_industry_joined; where Zedentenid=820295 AND missing(menge_in_Tonnen);
	run; 
	/*Email sent to Kühne on 3 NOV 2016*/

	/*Checking for missing ANZAHL*/
	proc sql; 
	create table missing_Anzahl  as select Artikelbezeichnung, zedentenid, name_zedent, count (*)
	from db_tables_industry_joined
	where missing(Anzahl)
	group by 1,2,3;
	quit; 

		/*QUEISSER*/
		data ANZ_MISS_QUEISSER;
		set db_tables_industry_joined; where zedentenid=535866 AND missing(ANZAHL)
		AND (missing(menge_in_tonnen) OR missing(kilo_pro_Einheit));
		run; /*--> Anzahl can be calculated, done below*/

		/*WERDER FEINKOST*/
		data ANZ_MISS_Werder;
		set db_tables_industry_joined; where zedentenid=553068 AND missing(ANZAHL)
		AND (missing(menge_in_tonnen) OR missing(kilo_pro_Einheit));
		run; /*--> Anzahl can be calculated, done below*/

   /*Checking for missing KILO_PRO_EINHEIT*/
	proc sql; 
	create table missing_Anzahl  as select Artikelbezeichnung, zedentenid, name_zedent, count (*)
	from db_tables_industry_joined
	where missing(kilo_pro_Einheit)
	group by 1,2,3;
	quit; /*all correct now*/

	proc sql; 
		create table id_and_name as select distinct
		zedentenid, name_zedent, count(*) as count from db_tables_industry_joined
		where missing(zedentenid)=0
		group by 1,2;
	quit;

	/*Get number of obs in dataset*/
	proc sql noprint;
	select count(*)
	into :OBSCOUNT
	from id_and_name;
	quit;
	%put Count=&OBSCOUNT.;

	/*Plotting quantity per Artikelbezeichnung per KP*/
 /*	ods pdf file="Z:\CDC\Analysis\002 ASSIGNOR SPECIFIC OUTPUT\SAS Outputs (SUA002)\Mengen in Tonnen pro KP.pdf" ;
		%macro select_and_plot;
		%do n=1 %to &Obscount;
			data _NULL_;
			set id_and_name (obs=&n firstobs=&n);
			call symput ('zedentenid',zedentenid);
			call symput ('name_zedent',STRIP(name_zedent));
			run;

			%put &zedentenid;
			%put &name_zedent;
	
			proc gplot data=work.db_tables_industry_joined; where zedentenid=&ZedentenID;
			* [dependent variable]*[independent variable]=[grouping variable];
			title1 "Mengen in Tonnen, pro Artikelbezeichnung, KP: &name_zedent ";
			plot menge_in_tonnen * date = Artikelbezeichnung/
			frame haxis=axis1 vaxis=axis2 legend=le;
			run;quit;
		%end;
		%mend;
		%select_and_plot;
	ods pdf close; 

	/*LOOK AT POTENTIAL ISSUES */
	data lookVilsaBP;
	set db_tables_industry_joined;
	where zedentenid=102269 AND Menge_in_tonnen<0;
	run;		
	data lookVilsaBP2;
	set db_tables_industry_joined;
	where zedentenid=1197920 AND Dokumentennummer="61075028";
	run; /*Invoice and coresponding cancelation*/

	data lookVilsaBP3;
	set db_tables_industry_joined;
	where zedentenid=1197920 AND Menge_in_tonnen<16;
	run; /*4 obs; checked against invoice, correct*/

%mend KG_P_EINH_unit_MENGE_IN_TO_ANZ; 

/*%KG_P_EINH_unit_MENGE_IN_TO_ANZ;*/ /*Comment back in to run issue identification code*/
			
/* 6.2  ----- CORRECTION -----*/
data db_tables_industry_joined;
set db_tables_industry_joined;
/*Berggold*/
	If  zedentenid=558961 AND missing(menge_in_Tonnen)=1 AND missing(Anzahl)=0 AND
	missing (kilo_pro_einheit)=0 
	then menge_in_Tonnen=kilo_pro_einheit*Anzahl/1000;
/*BERENTZEN*/
	IF Zedentenid=130053 and Upcase(einheit)="KG" and Kilo_pro_Einheit=2 
	then Kilo_pro_einheit=1;
/*EISBÄR*/
	If  find(name_zedent,"Eisbär")>0 AND missing(anzahl)=1 AND
	Einheit="Tonne" then Anzahl=menge_in_Tonnen;
/*KÜHNE*/
	If Zedentenid=820295 AND missing(menge_in_Tonnen)=1 
	then delete; /*3 Obs, until further info from Kühne*/
/*HUBER - KARWENDEL*/
	if find(name_zedent,"Karwendel-Werke")>0 AND missing(menge_in_tonnen)=1 
	And missing(anzahl)=0 And EINHEIT="KG" then menge_in_tonnen=Anzahl/1000;
/*LIELER*/
	If FIND(UPCASE(name_zedent),"LIELER")>0 then do
	Anzahl=Menge_in_tonnen;
	Einheit="Tonne";
	Kilo_pro_einheit=1000;
	Preis_pro_einheit=Gesamtbetrag/menge_in_tonnen;
	end;
/*QUEISSER AND WERDER FEINKOST*/
	IF zedentenid in (901685,535866) AND missing(ANZAHL)=1 AND missing(menge_in_tonnen)=0
	AND missing(kilo_pro_Einheit)=0
	THEN Anzahl=Menge_in_tonnen*(1000/kilo_pro_einheit);
/*QUEISSER*/
	/*filling Abbild_transaktion*/
	If zedentenid=535866 then Abbild_Transaktion=CATS("QE_",Dokumentennummer,".pdf");
	/* filling in missing Q info*/
	If FIND(name_zedent,"Queisser")>0 AND menge_in_tonnen=0 AND Anzahl=0 
	then do menge_in_tonnen=Gesamtbetrag/617.4;
			Anzahl=menge_in_tonnen*1000;
	end;
	/*for 5 deliveries, the quantity could not be retrieved but 
	the amount paid including VAT is known. For transactions before and after this
	data gap, the price per ton with VAT was 617.40 EUR. We use 
	this to infer the quantity*/
	If FIND(name_zedent,"Queisser")>0 
	then Preis_pro_einheit=Gesamtbetrag/Anzahl;
/*Trolli*/
	If missing(preis_pro_einheit)=1 AND find(name_zedent,"Trolli")>0 AND
	Einheit="KG" 
	then Preis_pro_einheit=Gesamtbetrag/menge_in_tonnen/1000;
run;

/* 6.3  ----- VERIFICATION -----*/
/*--> check:*/	
proc sql; 
	create table missing_key_vars as select distinct
	name_zedent, artikelbezeichnung, count(*) as count
	from db_tables_industry_joined
	where 	missing(anzahl) OR 
			missing(PREIS_PRO_EINHEIT)
			or missing(menge_in_tonnen)
	group by 1,2 order by 3;
quit; /*Feb 13 2017: Few remaining issues*/

/*Checking that the corrections yielded desired results*/
data d;
set db_tables_industry_joined;
where zedentenid=535866 AND Artikelbezeichnung="Invertzuckerlösung 70 % HM";
/*keep Abbild_Transaktion menge_in_tonnen Anzahl kilo_pro_Einheit Einheit 
Preis_pro_einheit Gesamtbetrag;*/
run; /*correct*/




/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
7	 REBATE VARIABLES  
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/data db_tables_industry_joined;
set db_tables_industry_joined;
/*Standardising rebates variables to non-missing, positive value*/
	If missing(RABATT_PRO_EINHEIT)=0 then RABATT_PRO_EINHEIT=ABS(RABATT_PRO_EINHEIT);
	If missing(RABATT_PRO_EINHEIT)=1 then RABATT_PRO_EINHEIT=0;
	If missing(GESAMTRABATT_RECHNUNG)=0 then GESAMTRABATT_RECHNUNG=ABS(GESAMTRABATT_RECHNUNG);
	if missing(GESAMTRABATT_RECHNUNG)=1 then GESAMTRABATT_RECHNUNG=0;
run;




/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
8	 INCORRECT UNITS  
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*//* 8.1  ----- IDENTIFICATION -----*/
%macro incorrect_units; 	/*The macro is not called to avoid running the time 
							consuming issue identification code each time.
							Comment in the the macro calling statement at the 
							end to execute this code*/

	data bodeta; 
	set db_tables_industry_joined; where find(name_zedent,"Bodeta")>0;
	run;
	
	proc sql; 
		create table bod_overview as select distinct
		einheit, menge_in_tonnen, Anzahl, Preis_pro_einheit, Gesamtbetrag, count (*) as count
		from bodeta
		group by einheit, menge_in_tonnen, Anzahl, Preis_pro_einheit, Gesamtbetrag;
	quit;

	data Wetzel; 
	set db_tables_industry_joined; where find(name_zedent,"Wetzel")>0;
	run;
	
	proc sql; 
		create table Wetzel_overview as select distinct
		einheit, menge_in_tonnen, Anzahl, Preis_pro_einheit, Gesamtbetrag, count (*) as count
		from Wetzel
		group by einheit, menge_in_tonnen, Anzahl, Preis_pro_einheit, Gesamtbetrag;
	quit;

	proc sql; 
		create table Kuechle_overview as select distinct
		einheit, menge_in_tonnen, Anzahl,
		Preis_pro_einheit, kilo_pro_einheit, Gesamtbetrag, count (*) as count
		from db_tables_industry_joined
		where find(name_zedent,"Küchle")>0
		group by 1,2,3,4,5,6;
	quit;

	/*cleaning up*/
	proc datasets library=work;
    save db_tables_industry_joined info;
	run;
	quit;

	%mend incorrect_units; 
/* %incorrect_units*/ /*Comment back in to run issue identification code*/

/* 8.2  ----- CORRECTION -----*/
DATA correct_units;
set db_tables_industry_joined; 
if find(name_zedent,"Bodeta")>0 
then do
einheit="Tons"; Anzahl=Anzahl/1000; 
end;
if find(name_zedent,"Wetzel")>0 then
Preis_pro_einheit=Preis_pro_einheit/10;
if find(name_zedent,"Küchle")>0 then 
preis_pro_einheit=preis_pro_einheit*(kilo_pro_einheit/1000);
if find(name_zedent,"Berggold")>0 then menge_in_tonnen=Anzahl;
run;


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
9	 REPLACE NAMES AS ASSIGNED BY KSP WITH CORRECT ONES CORRESPONDING TO THE ASSIGNMENTS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*//* 9.1  ----- IMPORT -----*/
PROC IMPORT OUT=clean_names 
         	DATAFILE= "&path\Build\Zedenten finale Bezeichnung und Nummern.xlsx" 
            DBMS=EXCEL REPLACE;
     		SHEET="import";
			GETNAMES=YES;
     		MIXED=YES;
    		SCANTEXT=YES;
    		USEDATE=YES;
     		SCANTIME=YES; 
RUN;	

proc sort data=clean_names; by name_zedent name_dok_empfaenger; quit; 
proc sort data=correct_units; by name_zedent name_dok_empfaenger; quit;

/* 8.2  ----- MERGE -----*/
data merged; merge correct_units (in = A) clean_names (in = B );
by name_zedent name_dok_empfaenger;
if A;
run;

data names_clean;
set merged;
drop name_zedent; 
rename jurist_person=name_zedent; 
attrib _all_ label=""; 
run;




/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
10	 VARIOUS CORRECTIONS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/data various_corrections;
	set names_clean; 
	/*Typo / unit mistakes in BGAG observation*/
	if Zedentenid=130053 AND Artikelbezeichnung="Isoglucosesirup Isosweet 470" AND month_year="01May2005"d AND Abbild_Transaktion="0300_2005_0032503837" 
		then do Anzahl=22920; Menge_in_Tonnen=22.92; Preis_pro_Einheit=0.5046;	Einheit="KG"; end;
	If FIND(UPCASE(name_zedent),"LIELER")>0 
		then do anzahl=Menge_in_tonnen; Einheit="Tonne"; Kilo_pro_einheit=1000; Preis_pro_einheit=Gesamtbetrag/menge_in_tonnen;	end;
	/*for 5 deliveries, the quantity could not be retrieved but the amount paid including VAT is known. For transaction before and after this
	data gap, the price per ton with VAT was 617.40 EUR. We use this to infer the quantity*/
	If FIND(name_zedent,"Queisser")>0 AND menge_in_tonnen=0 AND Anzahl=0 
		then do menge_in_tonnen=Gesamtbetrag/617.4; Anzahl=menge_in_tonnen*1000; end;
	If FIND(name_zedent,"Queisser")>0 AND Einheit="Kg" 
		then do Preis_pro_einheit=Gesamtbetrag/Anzahl;	end;*/
	If FIND(UPCASE(name_zedent),"LIELER")>0 and Einheit="kg" 
		then Anzahl=Menge_in_tonnen*1000;
	If FIND(UPCASE(name_zedent),"EISBÄR")>0 and artikelbezeichnung="Kristallzucker (Silo)" 	AND month_year="01DEC2012"d	and aNZAHL=25200 AND preis_pro_Einheit=78.5 
		then preis_pro_einheit=preis_pro_einheit/100;
	If  Find(artikelbezeichnung, "Grundsorte mittel")>1 AND Einheit="KG" AND PREIS_PRO_EINHEIT >6 
		then preis_pro_einheit=preis_pro_einheit/100;
	if find(upcase(name_zedent),"BUSEMANN")>0 AND Preis_pro_einheit=163.68 AND Menge_in_tonnen=0.1 
		then Kommentar_zedent="Dieser Preis resultiert aus den einmaligen Frachtkosten von 100 , siehe ELO-ID:877443 (Email by Jörg Kiefer to BB of 25 Jan 2017)";
run;


	
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
11	 CONSOLIDATE PRODUCT NAMES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
data consolidate_prod_names;
	set various_corrections;
	if find(upcase(name_zedent),"CSM")>0 AND artikelbezeichnung="Diamant Deco-mixture crude III"
		then artikelbezeichnung="DIAMANT DEKO MISCHUNG GROB III";
	if find(upcase(name_zedent),"CSM")>0 AND artikelbezeichnung="Fondant"
		then artikelbezeichnung="FONDANT";
	if find(upcase(name_zedent),"CSM")>0 AND artikelbezeichnung="Hagelzucker"
		then artikelbezeichnung="HAGELZUCKER";
	if find(upcase(name_zedent),"CSM")>0 AND artikelbezeichnung="Kandisfarin FS"
		then artikelbezeichnung="KANDISFARIN FS";
	if find(upcase(name_zedent),"CSM")>0 AND artikelbezeichnung="PROFI BRILLIANT DEKOR NEUTRAL"
		then artikelbezeichnung="Meister-Brilliant-Dekor Neutral PO MB";
	if find(upcase(name_zedent),"CSM")>0 AND artikelbezeichnung="Crude sugar brown"
		then artikelbezeichnung="ROHZUCKER BRAUN";
	if Find (upcase(artikelbezeichnung), "DECO.CRYSTAL")>0  OR Find (upcase(artikelbezeichnung), "TK DE")>0
		then artikelbezeichnung="TK-deco.crystal finaly(quark small ball)";
	if find(upcase(name_zedent),"CSM")>0 AND artikelbezeichnung="ZUCKER FEIN SILO BB"
		then artikelbezeichnung="Sugar fine Silo/BB";	
	if find(upcase(name_zedent),"CSM")>0 AND artikelbezeichnung="ZUCKER FEIN SILO FB" or artikelbezeichnung="ZUCKER KF EG 2 FEIN SILO"
		then artikelbezeichnung="Sugar fine Silo/FB";
	if find(upcase(name_zedent),"CSM")>0 AND artikelbezeichnung="ZUCKER KF EG 2 FEIN SILO"
		then artikelbezeichnung="Sugar KF EG 2 finely Silo/FB";
	if find(upcase(name_zedent),"CSM")>0 AND artikelbezeichnung="bio-sugar" 
		then artikelbezeichnung="BIO ZUCKER";
	if find(upcase(name_zedent),"CSM")>0 AND artikelbezeichnung="Sugar KF EG 2 finely bag" Or artikelbezeichnung="ZUCKER KF EG 2 FEIN SACK"
		then artikelbezeichnung="ZUCKER KF EG 2 FEIN SACK";
	if find(upcase(name_zedent),"CSM")>0 AND artikelbezeichnung="ZUCKER KF EG 2 FEIN SILO FB"
		then artikelbezeichnung="Sugar KF EG 2 finely Silo/FB"; 
	artikelbezeichnung=tranwrd(artikelbezeichnung, "Anlief. 7.00 Uhr", " ");
	if find(upcase(artikelbezeichnung),"SWEETMIX")>0 
		then artikelbezeichnung="Sweetmix 72-33-33";
run;




/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
12	 CURRENCY CONVERSION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
data simple_currency_conv;
	set consolidate_prod_names; 
	Array monetary (6) 
		Gesamtbetrag
		GESAMTRABATT_RECHNUNG
		PREIS_PRO_EINHEIT
		RABATT_PRO_EINHEIT
		PREIS_PRO_POSITION
		RABATT_PRO_EINHEIT;
   Array monetary_EUR (6) 
		Gesamtbetrag_EUR
		GESAMTRABATT_RECHNUNG_EUR
		PREIS_PRO_EINHEIT_EUR
		RABATT_PRO_EINHEIT_EUR
		PREIS_PRO_POSITION_EUR
		RABATT_PRO_EINHEIT_EUR;
	do i=1 to 6;
		if missing(monetary(i))=1 then monetary_EUR(i)=.; 
		else monetary_EUR(i)=monetary(i);
		if UPCASE(Waehrung)="DM" OR UPCASE(Waehrung)="DEM"
		AND missing(monetary(i))=0 then 
		monetary_EUR(i)=monetary(i)/1.95583;
		if UPCASE(Waehrung)="NLG" AND missing(monetary(i))=0 then 
		monetary_EUR(i)=monetary(i)/2.20371;
	end;
run;

proc sql; 
	create table by_zedentenid as select distinct
		zedentenid, name_zedent, count(*) as count
	from simple_currency_conv
	group by 1,2 ;
quit;




/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
13 CORRECTING MISTAKES / ADDING INFORMATION IN THE VARIABLES REFERENCING SCANS 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* 13.1 ----- NOTE -----*/
/* 		Filenames contained in Abbild_transaktion are scans referencing the basic transaction itself. 
		In the most common case this is the scan of an invoice. Abbild_anpassung concerns scans for 
		ex-post changes such as ex post rebates that apply to the transaction. Abbild_sonstige_info 
		is meant for SCANS / IMAGES containing other information about the transaction or the product, 
		for example scans of a delivery slip, annual contract or product specification sheet. 
		As stated, the variables are meant to contain only references to image files / scans. 
		Other info is to be provided in the comment field (Kommentar_zedent). 

		For Trolli, the variable "Abbild_sonstige_info contains both delivery slip numbers that 
		are not filenames and numbers that reference a filename. The code below moves the delivery 
		slip numbers that do not reference a filename to the comments field and reformats 
		the numbers that reference a scan, so that they are actual filenames.*/
data cutout_trolli;
set simple_currency_conv; 
	where Z_no=56 AND missing(Abbild_sonstige_info)=0;
		second_part=SCAN(abbild_sonstige_info,2,":");
		first_part=SCAN(abbild_sonstige_info,1,":");
		lf=length(first_part);
		ls=length(second_part);
	if lf>1 AND lf<6 
		then test1=Cats(Repeat("0",(7-lf)),first_part,".pdf");
	if ls>1 AND ls<6 
		then test2=Cats(Repeat("0",(7-ls)),second_part,".pdf");
	if missing(test1) and missing(test2)
		then do kommentar_zedent=CATX("",kommentar_zedent,"Lieferscheinnummer:",Abbild_sonstige_info);	Abbild_sonstige_info=""; 	end;
	if missing(test1)=0 
		then do Kommentar_zedent=CATX("",kommentar_zedent,"Lieferscheinnummer:",second_part); Abbild_sonstige_info=test1;	end;
	if missing(test2)=0 
		then do Kommentar_zedent=CATX("",kommentar_zedent,"Lieferscheinnummer:",first_part);Abbild_sonstige_info=test2;	 end;
	drop second_part first_part lf ls test1 test2 ;
run;  proc sort; by ID; 
quit;

proc sort data=simple_currency_conv; by iD; quit;
data img_var_corrections1;
   update simple_currency_conv cutout_trolli UPDATEMODE=NOMISSINGCHECK;
   by ID; run;

data img_var_corrections2; 
	set img_var_corrections1; 
	if Abbild_transaktion="Gesamt\00019013.pd" then abbild_transaktion="Gesamt\00019013.pdf";
	if Abbild_transaktion="Gesamt\00019016.pd" then abbild_transaktion="Gesamt\00019016.pdf";
	/*Busemann, typos*/
	If find(abbild_transaktion,"604948975")>0 then abbild_transaktion="Bu_ReNr 60494975";
	If find(abbild_transaktion,"606720636")>0 then abbild_transaktion="Bu_ReNr. 60720636";
	If find(abbild_transaktion,"6073397")>0 then abbild_transaktion="Bu_ReNr. 60713397";
	If find(abbild_transaktion,"60930654")>0 then abbild_transaktion="Bu_ReNr. 609309654";	
	If find(abbild_transaktion,"6107219")>0 then abbild_transaktion="Bu_ReNr. 61072719";	
	If find(abbild_transaktion,"90749951")>0 then abbild_transaktion="Bu_ReNr. 60749951";
	If find(abbild_transaktion,"60674027")>0 then abbild_transaktion="Bu_ReNr. 60764027";
	/*Berggold */
	If find(abbild_transaktion,"00019016")>0 then abbild_transaktion="00019016.pdf";
	If find(abbild_transaktion,"00019013")>0 then abbild_transaktion="00019013.pdf";
	/*Bodeta*/
	if Z_no=7 AND count(abbild_transaktion,"0023366")> 0 
	then abbild_transaktion="00023366.pdf";
	If Z_no=7 AND count(Abbild_transaktion,"000208247")> 0 
	then Abbild_transaktion="00020847.pdf";
	if Z_no=7 and Find(upcase(abbild_transaktion),"00020961PDF")ne 0 
	then abbild_transaktion="00020961.pdf";
	/*Brandt, typos*/
	If Z_no=8 And find(abbild_transaktion,"70067270")>0 
	then abbild_transaktion="70067377";
	If Z_no=8 AND find(abbild_transaktion,"70068354")>0
	then abbild_transaktion="70068360";

	/*Schoko-Dragee*/
	if upcase(abbild_transaktion)="SD_224528.PDF" then abbild_transaktion="SD_224258.PDF";
		/*see email of 13 Sep 2017 by BB to Jörn Schultz, ELO-ID:961295 */
	/*Küchle typos*/	
	If UPCASE(abbild_transaktion)="KU_1510488105.PDF" then abbild_transaktion="KU_150488105.PDF";
	/*Vilsa group, siehe Email von Carsten Heinekamp zu Ben Bornemann 21 Aug 2017*/
	If abbild_transaktion="VB9510558" then abbild_transaktion="VB8610558";
	If abbild_transaktion="VB60839270" then abbild_transaktion="VB60939270";
	If abbild_transaktion="VB60890496" then abbild_transaktion="VB60890493";
	If abbild_transaktion="VB60908399" then abbild_transaktion="VB60908369";
	If abbild_transaktion="VB8591617" then abbild_transaktion="VB8291617";
	If abbild_transaktion="VB60802916" then abbild_transaktion="VB60701916";
	If abbild_transaktion="VB202188287" then abbild_transaktion="VB60701916";
	 /*HUBER - KARWENDEL: TYPO / ARTEFACT*/
	if Abbild_transaktion="162669827089162669821*" then Abbild_transaktion="162669827089162669821";
	/*KATHI: Already identified and reflected rebates / cancellations 
	and additional information pertaining to the transaction in the data supplied (good!) but did not separate 
	the Abbild_transaktion, Abbild_sonstige_info and Abbild_anpassung in separate variables (bad). 
	Instead, the assignor used slashes ("/"), which does not work 
	with our scan matching procedure. Fortunately, this only concerns few observations. 
	The separation is done below.*/
	If abbild_transaktion="KA_2009_03.431/432   _70000.pdf" then do
	Abbild_transaktion="KA_2009_03.431_70000.pdf"; Abbild_anpassung="KA_2009_03.432_70000.pdf"; 
	end;
	If abbild_transaktion="KA_2009_01.100/101_70000.pdf" then do abbild_transaktion="KA_2009_01.101_70000.pdf";
	abbild_anpassung="KA_2009_01.100_70000.pdf"; 
	end;
	If abbild_transaktion="KA_2009_03.446/447   _70000.pdf" then do abbild_transaktion="KA_2009_03.446_70000.pdf";
	abbild_anpassung="KA_2009_03.447_70000.pdf"; 
	end;
	If abbild_transaktion="KA_2010_09.283/291   _70000.pdf" then do abbild_transaktion="KA_2010_09.283_70000.pdf";
	abbild_anpassung="KA_2010_09.291_70000.pdf"; 
	end;
	If abbild_transaktion="KA_2010_10.22-2/3/4  _70000.pdf" then do abbild_transaktion="KA_2010_10.222_70000.pdf";
	Abbild_anpassung="KA_2010_10.223_70000.pdf :KA_2010_10.224_70000.pdf "; 
	end;
	if Upcase(Abbild_transaktion)="KA_2008_03.346/347   _70000.PDF" then do abbild_transaktion="KA_2008_03.347_70000.pdf"; 
	abbild_anpassung="KA_2008_03.346_70000.pdf"; 
	end;
	if Upcase(Abbild_transaktion)="KA_2008_03.373/374   _70000.PDF" then do abbild_transaktion="KA_2008_03.373_70000.pdf"; 
	abbild_anpassung="KA_2008_03.374_70000.pdf"; 
	end;
	/*Kathi does not have any scans available any more for the years before 2004 */
	If name_zedent="KATHI Rainer Thiele GmbH" and year<2004 then abbild_transaktion="-|-Kein Scan vorhanden";
	if prxmatch("m/KA_2004_09.98_70000/oi",Abbild_transaktion) > 0
		then Abbild_transaktion="-|- Beleg definitiv nicht mehr vorhanden"; 
	/*Siehe Emails von Sven Recke (Kathi) to Ben Bornemann (CDC) of 25 Sep 2017,
	ELO-ID:965550 and ELO-ID:965662*/
	/*Lieler Schlossbrunnen Sattler GmbH & Co.KG / Markgräfler Mineralquelle GmbH & Co. KG does not have any scans available for 2005 (or before). 
	See email from Jürgen Boneva to Ben Bornemann of 8 Nov 2016, ELO-ID: 920491 */
	If name_zedent="Markgräfler Mineralquelle GmbH & Co. KG" AND year<2006 then abbild_transaktion="-|-Kein Scan vorhanden";
	If Z_no=48 and prxmatch("m/1590020986/oi",Abbild_transaktion) > 0 then Abbild_transaktion="LI-1590020986.pdf";
	If Z_no=48 and prxmatch("m/1510227566|1510231691|1510238427|1510244655|1510251726|1510256717|1510263317|1510270374|1510274141|1510280557|1510288464|1510296149|1510305876|1590020986/oi",Abbild_transaktion) > 0 then Abbild_transaktion="-|- Kein Beleg vorhanden";
		/*Markgräfer is/was of the opinion that invoices need to be kept only six years (not ten) and hence there are some invoices from 2009 that are no longer available
		(telephone conversation between Ben Bornemann and Jürgen Boneva (Leiter Finanzbuchhaltung Markgräfer))*/
	/*Trolli*/
		/*some documents were only found after the large batch had already been processed by SRZ, those few were scanned by Trolli 
		and named according the pattern "TR_"[Rechnungsnummer]*/
		if z_no=56 AND find(Kommentar_zedent,"TR_xxx")>0 then abbild_transaktion=cats("TR_",Dokumentennummer,".pdf");
		/*typos*/
		If Upcase(Abbild_transaktion)="00032814.PDF" then abbild_transaktion="00003281.PDF";
		If Upcase(Abbild_transaktion)="00003991.PDF" then abbild_transaktion="00003990.PDF";
		If Upcase(Abbild_transaktion)="00132189.PDF" then abbild_transaktion="00013218.PDF";
		If Upcase(Abbild_transaktion)="00154379.PDF" then abbild_transaktion="00015379.PDF";

	/*Marking definitely no longer existing docs,
		and documents for which no scan is required because they will not be used
		in the economic damage analysis (years 2014 and 2015)
		using string -|- as marker*/
		If  (Z_no in (8,9,10,12,61) and year < 2005)
		 OR (Z_no=11 and missing(Abbild_Transaktion) and year<2000)
		 OR (Abbild_transaktion ="NA" and year<2005)
		 OR (missing(Abbild_transaktion) and year <2005 and Z_no=63) /*See email from Kathrin Küchle-Sorg to Ben Bornemann on 29 Aug 2017, ELO-ID: 955061 (1ECC96CF-9778-2A14-27B3-03766F11362B)*/
		 OR (z_no=46 and year<2004)
		then Abbild_Transaktion="-|- definitiv keine Rg. mehr vorh, da Aufbewahrungsfrist bereits abgelaufen war";
		if kommentar_zedent="Kein Beleg vorhanden" then Abbild_transaktion="-|- Kein Beleg vorhanden";
		If Abbild_transaktion in ("4050_2008_0032510321", "4050_2003_0032501214") then Abbild_transaktion="-|- Definitiv kein Beleg vorhanden";/*Berentzen, see email of 9 Sep 2017 by Rita Langhorst to Ben Bornemann, ELO-ID:959357*/
		/*Bodeta*/
		IF Z_no=7 AND year=2000 then Abbild_Transaktion="-|- definitiv keine Rg. mehr vorh, aber noch Buchungslisten vorhanden"; 
		If Z_no=7 AND year=2015 then Abbild_Transaktion="-|- Belege aus 2015 nicht angefordert.";
			/*siehe Kommunikation aus August 2017*/
		If Z_no=17 AND UPCASE(Abbild_transaktion) in (	'EI_38690873.PDF'
												'EI_38694470.PDF'
												'EI_38694844.PDF'
												'EI_38697511.PFD'
												'EI_38699343.PDF'
												'EI_38702149.PDF'
												'EI_38704022.PDF'
												'EI_38706140.PDF'
												'EI_38708379.PDF'
												'EI_38709873.PDF'
												'EI_38710243.PDF'
												'EI_38712557.PDF'
												'EI_38714932.PDF'
												'EI_38717795.PDF'
												'EI_38720050.PDF'
												'EI_38722033.PDF'
												'EI_38722117.PDF'
												'EI_38725258.PDF'
												'EI_38727442.PDF'
												'EI_38729680.PDF'
												'EI_38730662.PDF'
												'EI_38731065.PDF'
												'EI_38735251.PDF'
												'EI_38737119.PDF'
												'EI_54458.PDF'
												'EI_55499.PDF')
		then Abbild_transaktion="-|- Beleg definitiv nicht mehr vorhanden";
		/*Eichetti: For 1997 there are invoices only for part of the year*/
		If Z_no=20 And Abbild_transaktion="n.a." AND year<2005 then 
		Abbild_transaktion= "-|- Beleg definitiv nicht mehr vorhanden";
		/*Queisser*/
			*See Email by Michael Stracke 5. Sept 2017 09:36 ELO-ID:964198;
		if 
		find(upcase(Abbild_transaktion),'QE_301726') > 0 or 
		find(upcase(Abbild_transaktion),'QE_301966') > 0 or 
		find(upcase(Abbild_transaktion),'QE_302121') > 0 or 
		find(upcase(Abbild_transaktion),'QE_302262') > 0 or 
		find(upcase(Abbild_transaktion),'QE_302416') > 0 or 
		find(upcase(Abbild_transaktion),'QE_302676') > 0 or 
		find(upcase(Abbild_transaktion),'QE_302842') > 0 or 
		find(upcase(Abbild_transaktion),'QE_303071') > 0 or 
		find(upcase(Abbild_transaktion),'QE_303218') > 0 or 
		find(upcase(Abbild_transaktion),'QE_303441') > 0 or 
		find(upcase(Abbild_transaktion),'QE_303647') > 0 or 
		find(upcase(Abbild_transaktion),'QE_303758') > 0 or 
		find(upcase(Abbild_transaktion),'QE_303990') > 0 or 
		find(upcase(Abbild_transaktion),'QE_304183') > 0 or 
		find(upcase(Abbild_transaktion),'QE_304430') > 0 or 
		find(upcase(Abbild_transaktion),'QE_304713') > 0 or 
		find(upcase(Abbild_transaktion),'QE_305839') > 0  
		then Abbild_transaktion= "-|- Beleg definitiv nicht mehr vorhanden";
		/*Brandt, Burger*/
		if Z_no=8 AND (
		find(upcase(Abbild_transaktion),'1117117905') > 0 or 
		find(upcase(Abbild_transaktion),'1117123538') > 0 or 
		find(upcase(Abbild_transaktion),'70003028') > 0 or 
		find(upcase(Abbild_transaktion),'70003029') > 0 or 
		find(upcase(Abbild_transaktion),'70003031') > 0)  
		then Abbild_transaktion= "-|- Beleg definitiv nicht mehr vorhanden";
		/*siehe email von Jörn Schultz an Ben Bornemann of 21 Sep 2017, 
		ELO-ID:961295*/
		/*CSM*/
		if z_no=15 AND year in (2008,2009) AND missing(Abbild_transaktion)=1
		then Abbild_transaktion="-|- Fehler bei der Archivierung bei CSM. Beleg nicht mehr im digitalen Archivierungssystem zu finden.";
		/*Hachez*/
		if prxmatch("m/HA_8610453_2005.PDF|HA_70464754_2005.PDF|HA_8616279_2005.PDF|HA_8616479_2005.PDF/oi",Abbild_transaktion) > 0
		then Abbild_transaktion="-|- Beleg versehentlich vernichtet"; 
		/*Philipp Born*/
		If Z_no=21 and year<2005 And find(upcase(Abbild_transaktion),"N.A.")>0
		then Abbild_transaktion= "-|- definitiv keine Rg. mehr vorh, da Aufbewahrungsfrist bereits abgelaufen war";
		/*Werder Feinkost*/
		if Z_no=61 AND prxmatch("m/202006254/oi",Abbild_transaktion) > 0 
		then Abbild_transaktion="WE_202006354"; 
		if Z_no=61 AND prxmatch("m/202068186/oi",Abbild_transaktion) > 0 
		then Abbild_transaktion="WE_202069186"; 
		if Z_no=11 And month_year<"01JUN2001"D then Abbild_transaktion="-|- Beleg definitiv nicht mehr vorhanden";
		/*Email by Rudolf Schellenberger (Schoko-Dragee GmbH) to BB of 29.09.2017, ELO-ID:967561*/
		/*Soldan*/
		If z_no=54 and prxmatch("m/2014030761082619|2014032661088397|201404041510676642|201404111510677951|201404301510682303|201404301510682304|201405091510684525|201405091510684526|2014051661095046|201405231510688033|2014060361097327|2014061161098146|201406201510694693|2014062461099856|201407021510697697|201407111510700519|201407171510702016|201407221510703198|2014072361103929|2014073161105097|201408251510712146|201408251510712147|2014090561110542|2014091761112133|201409191510719034|2014092461113629|2014092961114608|2014100661116213|2014101661118842|201410201510727048|201410221510727960|201410271510729029|201411051510731844|201411101510733169|201411181510735636|201411181510735637|201411271510738317|201412051510741092|201501071510746744|201501091510747446|201501191510749526|201501221510750626|201501301510752391|201502041510753425|201502061510753777|201502131510755369|201502191510756313|201502241510757525|201502271510758475|201503101510760646|201503171510762354|201503191510762939|201503201510763284|201504101510767931|201504221510770748|201504271510771669|201504271510771670|201505041510773018|2015050861159050|201505181510776472|2015051821536628|201506021510780388|201506021510780389|201506081510781605|201506151510783606|201506191510785106|201506301510788154|201507091510790910|201507131510791846|201507141510792428|201507211510794161|201508211510802707|201508271510804223|201508281510804655|201509081510807210|201509085151000962|201509145151001862|201509221510810950|201509245151003676|2015092990296480|201509301510813620|201510021510814376|201510075151006559|2015100840545790|201510121070097133|201510141510816980|201510161070098431|201510191510818025|201510195151011159|201510231510819407|2015102331729571|201510271070101131|201510271510820050|20151102151082153/oi",compress(Abbild_transaktion,,"KD")) > 0 
		then Abbild_transaktion="-|- kein Belegscan zur Verfügung gestellt, da nach aktuellem Kenntnisstand nicht benötigt";
		If z_no=54 and prxmatch("m/1510123887|20050608196924|2005062170424613|20050704201022|2005121554447|2006031031048059|200603301510006682|200607017331|20061127249827|200703281510052654|20070430360033|20070502251508|20070903252949|200806024082002|20080703388313|2009010961275|2009033060739135|2009040960741705|2010012660794696|2010020260795685|20100706721|201109296431109263|201206216431206785|2013042691602775|201308296431404065/oi",compress(Abbild_transaktion,,"KD")) > 0 
		then Abbild_transaktion="-|- Beleg definitiv nicht vorhanden, vermutlich bei Umzug vom Standort Nürnberg an den Standort in Adelsdorf abhanden gekommen. Siehe ELO-ID 972160";
run;

data Z15; 
	set img_var_corrections2; 
	where Z_no=15 and find(abbild_transaktion, "-|-")>0;
ruN; 

/*Busemann data needed some systematic change to match with the naming convention actually used*/
/*data is subsetted and changed*/
	data Busemann_correction; 
	set img_var_corrections2; 
	where name_zedent="Busemann GmbH";
	num_part=compress(Abbild_transaktion, ' ', 'A');
	ditso=tranwrd(num_part, "_", " ");
	abbt=CATT("Bu_ReNr",ditso,".pdf");
	drop abbild_transaktion num_part ditso;
	rename abbt=abbild_transaktion;
	run;
	
	/*main data set is updated with corrected values*/
	proc sort data=img_var_corrections2; by ID; quit;
	proc sort data=Busemann_correction; by ID; quit;
	data img_var_corrections_f;
   	update img_var_corrections2 Busemann_correction;
   	by ID; run;





/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
14	 CANCELLATIONS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
data cancellations;
set img_var_corrections_f;
/*Trolli marked cancellations and corresponding transactions with the string "hebt sich auf", slight spelling
differences of that string are caught by COMPLEV*/
if complev(substr(kommentar_zedent,1,14),"hebt sich auf")<3 then delete;   
if find(Abbild_transaktion,"8017113324") > 0 or 
find(abbild_transaktion,"8017113329") > 0
then delete; /*Order and corresponding cancellations, see email of Jörn
Schultz (Brandt) to Ben Bornemann (CDC) of 22 Sep 2017, 07:44, 
ELO-ID:964703*/
run;

	data test; 
set cancellations; where z_no=56 and
(missing(Abbild_transaktion) OR Abbild_transaktion="NULL");
run;





/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
15	 DELETING ALL NON-INVOICE POSITIONS (SHOULD BE REPLACED WITH REFINEMENT LATER)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
data 	temp_delete_non_inv;
set cancellations;
if menge_in_Tonnen <=0 OR GESAMTBETRAG<=0 
OR Dokumententyp ne "Rechnung" /*or Zedentenid =1174373 */ Or 
missing(Zedentenid) then delete;
run;

data build.non_invoice_positions;
	set  Cancellations;
	where menge_in_Tonnen <=0 OR GESAMTBETRAG<=0 
OR Dokumententyp ne "Rechnung" /*or Zedentenid =1174373 */ Or 
missing(Zedentenid) ;
run;

data missing_gesamtbetrag; 
set build.non_invoice_positions; where (Entspr_Prod_def_VO_EG_318_2006=1 
			OR 		missing(Entspr_Prod_def_VO_EG_318_2006)=1) 
			AND 	(missing(gesamtbetrag)=1 
					or Gesamtbetrag=0);
keep name_zedent Anzahl Menge_in_tonnen preis_pro_einheit Einheit year
Abbild_transaktion Artikelbezeichnung dateiname_import;
run;

proc sql; 
	create table A as select distinct
	name_zedent,year, sum(Anzahl*Preis_pro_einheit_EUR) 
	as ws_inv_amount format comma12.0
	from temp_delete_non_inv
	where 	Entspr_Prod_def_VO_EG_318_2006=1 
			OR missing(Entspr_Prod_def_VO_EG_318_2006)=1
	group by 1,2;
quit;

proc sql; 
	create table B as select distinct
	name_zedent,year, sum(abs(gesamtbetrag_EUR)) 
	as sum_pot_to_be_distrib_on_ws format comma12.0
	from build.non_invoice_positions
	where 	Entspr_Prod_def_VO_EG_318_2006=1 
			OR missing(Entspr_Prod_def_VO_EG_318_2006)=1
	group by 1,2;
quit;

data merged; merge A (in = A) B (in = B);
by name_zedent year ;
if A and not B then match = "A only";
if B and not A then match = "B only";
if A and B then match = "match";
run;

proc sql; create table 
look_at_merge as select distinct
match, count (*) as count
from merged group by 1; quit;
run; 

data NON_inv_as_pc_of_invoice;
set merged;
format non_inv_percentage PERCENT6.3;
if match="B only" then delete;
if missing (sum_pot_to_be_distrib_on_ws)=1 OR missing(ws_inv_amount)=1 then 
non_inv_percentage=0; ELSE
non_inv_percentage= sum_pot_to_be_distrib_on_ws/ws_inv_amount; 
run; proc sort;  by  non_inv_percentage; quit;
/*Up to 13%. Allocation should start with Eichetti */


data temp;
set Cancellations; 
if GESAMTRABATT_RECHNUNG_EUR>0 then Verw_GESAMTRABATT_RECHNUNG_EUR=1;
Else Verw_GESAMTRABATT_RECHNUNG_EUR=0;
if RABATT_PRO_EINHEIT_EUR>0 then Verw_RABATT_PRO_EINHEIT_EUR=1; ELse
Verw_RABATT_PRO_EINHEIT_EUR=0;
run; 

proc sql; 
	create table Verwendung_der_Variablen as select distinct
	name_zedent, Verw_GESAMTRABATT_RECHNUNG_EUR, Verw_RABATT_PRO_EINHEIT_EUR, count(*) as count
	from temp
	where Verw_GESAMTRABATT_RECHNUNG_EUR=1 OR Verw_RABATT_PRO_EINHEIT_EUR=1
	group by 1,2,3;
quit;




/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
16	 EFFECTIVE PRICE AND AVERAGE PRICE
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
data effective_price;
set temp_delete_non_inv;
effective_price=ANZAHL*PREIS_PRO_EINHEIT_EUR/menge_in_tonnen;
run;

	
 proc sql; 
	create table av_prices_white_sugar_only as select distinct
	zedentenid,name_zedent, artikelbezeichnung, month_year, 
	sum(ANZAHL*PREIS_PRO_EINHEIT_EUR) /sum(menge_in_tonnen) as av_price
	from effective_price
	where Entspr_Prod_def_VO_EG_318_2006=1
	/*where missing(Mono_u_disaccharide_pro_100g)=1 OR Mono_u_disaccharide_pro_100g >69*/
	group by 1,2,3,4; 
quit;

/*
PROC EXPORT DATA= av_prices_white_sugar_only
            OUTFILE= "Z:\CDC\Analysis\001 FIRST LOOK\SAS Output (SUA001)\av_prices_white_sugar_only.xlsx" 
            DBMS=EXCEL REPLACE;
     		SHEET="av price by product name"; 
RUN;
PROC EXPORT DATA= info
            OUTFILE= "Z:\CDC\Analysis\001 FIRST LOOK\SAS Output (SUA001)\av_prices_white_sugar_only.xlsx" 
            DBMS=EXCEL REPLACE;
     		SHEET="info"; 
RUN;

PROC EXPORT DATA= Verwendung_der_Variablen
            OUTFILE= "Z:\CDC\Analysis\001 FIRST LOOK\SAS Output (SUA001)\Verwendung der Variablen für Nicht rechnungswirksame Rabatte.xlsx" 
            DBMS=EXCEL REPLACE;
     		SHEET="av price by product name"; 
RUN;
PROC EXPORT DATA= info
            OUTFILE= "Z:\CDC\Analysis\001 FIRST LOOK\SAS Output (SUA001)\Verwendung der Variablen für Nicht rechnungswirksame Rabatte.xlsx" 
            DBMS=EXCEL REPLACE;
     		SHEET="info"; 
RUN;

PROC EXPORT DATA= NON_inv_as_pc_of_invoice
            OUTFILE= "Z:\CDC\Analysis\001 FIRST LOOK\SAS Output (SUA001)\NON_inv_as_pc_of_invoice.xlsx" 
            DBMS=EXCEL REPLACE;
     		SHEET="av price by product name"; 
RUN;
PROC EXPORT DATA= info
            OUTFILE= "Z:\CDC\Analysis\001 FIRST LOOK\SAS Output (SUA001)\NON_inv_as_pc_of_invoice.xlsx" 
            DBMS=EXCEL REPLACE;
     		SHEET="info"; 
RUN;*/





/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
17	 PRODUCT CLASSIFICATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
data product_classification;
format Product_category_name $87.;
set effective_price;
if 		Entspr_Prod_def_VO_EG_318_2006=1 
		or 	find(upcase(Artikelbezeichnung),"RAFF")>0	
		or	find(upcase(Artikelbezeichnung),"FEINSTER ZUCKER")>0	
then do Product_category=1; Product_category_name="Reiner Weisszucker";
end;
ELSE if (find(UPCASE(Artikelbezeichnung),"GLUK")>0 
		OR find(UPCASE(Artikelbezeichnung),"GLUC")>0)
		AND find(UPCASE(Artikelbezeichnung),"GLUCI")=0 
		AND find(UPCASE(Artikelbezeichnung),"HALOSI")=0 
		AND find(UPCASE(Artikelbezeichnung),"TROCKEN")=0 
				/*specialties*/
then do Product_category=3; Product_category_name="Glukosesirup";
end;
ELSE if (find(UPCASE(Artikelbezeichnung), "INV")>0
	   	OR 	find(UPCASE(Artikelbezeichnung), "FLÜ")>0
	   	OR	find(UPCASE(Artikelbezeichnung), "FLU")>0)
		OR 	find(UPCASE(Artikelbezeichnung),"ZUCKERSIRUP")>0
		OR 	find(UPCASE(Artikelbezeichnung),"ISC VUC")>0
		AND find(Artikelbezeichnung,"Cappuc")=0
then do Product_category=2; Product_category_name="Invertzucker";
end;
ELSE if find(UPCASE(Artikelbezeichnung),"FONDANT")>0
then do Product_category=4; Product_category_name="Fondant";
end;
ELSE If Artikelbezeichnung in 
(	'Crude sugar brown' 'FRUCHTZ.BTL.NEUTR 1000G' 
	'FRUCHTZUCK.-BTL.NEUTRAL 500G' 
	'FRUKTOSE' 
	'Fruktose'
	'Karasirup 75/760-02'
	'Rohrohrzucker, R12770'
	'SIRUP # C*TRUSWEET 01750'
	'Zucker Siloware #1110010001'
	'FRUCHTZUCK.KRISTALLIN/BIG BAG1000K2'
	'Halosin Trockenglucose HMW 30211'
	'FRUCHTZUCKER-SIRUP 70% 1L= 1,4286KG'
	'Dextrose-Monohydrat'
	'Meister-Brilliant-Dekor Neutral PO MB'
	'FZ Kirstal..25KG VORS. BESTELLEN   #'
	'Zucchero Velo 3% bags'
	'Diamant Deco mixture IV NH'
	'Zuckerkuloer E 150a P&L Multicol-01 5701'
	'FARBST. KARAMELSIR. 75/760-01'
	'FRUCHTZ.ZUM ABBEUTELN GESTELLT    $'
	'Fruktose, kristallin DAB (phEur)'
	
) 
OR find(upcase(Artikelbezeichnung),"MIXTOSE")>0 
OR find(upcase(Artikelbezeichnung),"AGENABON")>0 	 
OR find(upcase(Artikelbezeichnung),"SWEETMIX")>0 
OR find(upcase(Artikelbezeichnung),"KOMPRI")>0 
OR find(upcase(Artikelbezeichnung),"COMPRI")>0 
OR find(upcase(Artikelbezeichnung),"BRAUN")>0 
OR find(upcase(Artikelbezeichnung),"ISOSWEET")>0 
OR find(upcase(Artikelbezeichnung),"RAFTISWEET")>0 
OR find(upcase(Artikelbezeichnung),"PRIMATIN")>0 
OR find(upcase(Artikelbezeichnung),"KANDISFARIN")>0 
OR find(upcase(Artikelbezeichnung),"AUFTRAGSMASSE 6974")>0 
OR find(upcase(Artikelbezeichnung),"FRUCHTZUCKER")>0 
OR find(upcase(Artikelbezeichnung),"DEXTROSE")>0 
OR find(upcase(Artikelbezeichnung),"DECO.CRYSTA")>0 
OR find(upcase(Artikelbezeichnung),"DEKORIERKRISTALL, FEIN")>0 	
OR find(upcase(Artikelbezeichnung),"DIAMANT DEKO ")>0 
then do Product_category=5; Product_category_name="Fruktose-Glukose Mischungen, Brauner Zucker, Karamellstoffe und andere Zuckermischungen"; end;
if 	find(upcase(Artikelbezeichnung),"KARAM")>0 OR find(upcase(Artikelbezeichnung),"CARAM")>0 
then do Product_category=5; Product_category_name="Fruktose-Glukose Mischungen, Brauner Zucker, Karamellstoffe und andere Zuckermischungen";
end;	
If 		(missing(Mono_u_disaccharide_pro_100g)=0 
			AND Mono_u_disaccharide_pro_100g<60)
		OR	find(Artikelbezeichnung,"Kirsch")>0
		or 	find(Artikelbezeichnung,"Amarettin")>0
		or 	find(Artikelbezeichnung,"BTL")>0
		or 	find(Artikelbezeichnung,"Baiser")>0
		or 	find(Artikelbezeichnung,"Haselnus")>0
		or 	find(Artikelbezeichnung,"Nonpareille")>0	
		or 	find(Artikelbezeichnung,"Sauce")>0	
		or 	find(Artikelbezeichnung,"Sauce")>0	
		or 	find(Artikelbezeichnung,"Nougat")>0
		or 	find(Artikelbezeichnung,"Erdbeer")>0	
		or 	find(Artikelbezeichnung,"Amaretti")>0
		or 	find(Artikelbezeichnung,"Lakritz")>0
		or 	find(Artikelbezeichnung,"Vanille")>0
		OR	find(Artikelbezeichnung,"ZB Zucker Bindemittel")>0
then do Product_category=6; Product_category_name="Zuckerhaltiges Vorprodukt";
end;
 if find(upcase(Artikelbezeichnung),"SORBIT")>0 
or find(upcase(Artikelbezeichnung),"DIÄT")>0
or find(upcase(Artikelbezeichnung),"MALTODEXTRIN")>0 /*"kaum süß" see https://de.wikipedia.org/wiki/Maltodextrin*/
or find(upcase(Artikelbezeichnung),"GLUCIDEX")>0 
or find(upcase(Artikelbezeichnung),"STEVIO")>0
or find(upcase(Artikelbezeichnung),"SPLENDA")>0	
or find(upcase(Artikelbezeichnung),"MALTITPUL.SWEET PEARL")>0	
then delete; /*Zuckeralkohol, kaloriefrei /reduziert*/
format RCSLK_Lieferant RCSLK_Zucker_FG_Gehalt RCSLK_ZFG_Gehaltsklasse RCSLK_Ursprung RCSLK_Koernung RCSLK_Quali RCSLK_Anlieferung RCSLK_Aggregat $100.;
	if sum(NZ_shareholding_yes_or_no,PL_shareholding_yes_or_no,SZ_shareholding_yes_or_no)=0 
		then do RCSLK_Lieferant="Kartellantenbeteiligung: 0%  "; end; else 
	if NZ_shareholding_yes_or_no>0 or PL_shareholding_yes_or_no>0 or SZ_shareholding_yes_or_no>0 
		then do RCSLK_Lieferant="Kartellantenbeteiligung: >0% "; end; else 
	if NZ_shareholding_yes_or_no>0.5 or PL_shareholding_yes_or_no>0.5 or SZ_shareholding_yes_or_no>0.5 
		then do RCSLK_Lieferant="Kartellantenbeteiligung: >50%"; end; else 
		do RCSLK_Lieferant="Kartellantenbeteiligung: k.A."; end; 
		
	if clean_company_ID=1 
		then do RCSLK_Lieferant="Kartellant: Pfeifer & Langen"; end; else 
	if clean_company_ID=2 
		then do RCSLK_Lieferant="Kartellant: Nordzucker"; end; else 
	if clean_company_ID=3 
		then do RCSLK_Lieferant="Kartellant: Südzucker"; end; 

	if Mono_u_disaccharide_pro_100g=. and Saccharose_pro_100G=0 
		then do RCSLK_Zucker_FG_Gehalt="[Noch zu klassifizieren]"; end; 
	if Mono_u_disaccharide_pro_100g=. 
		then do RCSLK_Zucker_FG_Gehalt="[Noch zu klassifizieren]"; end; else 
		do RCSLK_Zucker_FG_Gehalt=strip(Mono_u_disaccharide_pro_100g) || "g Mono-/Disaccharide pro 100g"; end;

	if 	90<=Mono_u_disaccharide_pro_100g<=100 then do;RCSLK_ZFG_Gehaltsklasse="90-100"; end; else 
	if 	80<=Mono_u_disaccharide_pro_100g<90 then do;RCSLK_ZFG_Gehaltsklasse="80-89"; end; else 
	if 	70<=Mono_u_disaccharide_pro_100g<80 then do;RCSLK_ZFG_Gehaltsklasse="70-79"; end; else 
	if 	0<=Mono_u_disaccharide_pro_100g<70 then do;RCSLK_ZFG_Gehaltsklasse="0-69"; end; else 
	if 	0=Mono_u_disaccharide_pro_100g then do;RCSLK_ZFG_Gehaltsklasse="[Noch zu klassifizieren]"; end; 
	else do RCSLK_ZFG_Gehaltsklasse="[Noch zu klassifizieren]";end;

	/*as per Memo RCS "Benötigte Variablen Verarbeitungszucker" of 19.12.2016. */
/*		if product_category_name in ("Reiner Weisszucker" "Invertzucker") */
/*			then do RCSLK_Ursprung="Rübe"; end;*/
/*			else do RCSLK_Ursprung="[Noch zu klassifizieren]"; end;*/

	/* based on raw data where available (=Botanischer Ursprung)*/
	if find(upcase(Botanischer_Ursprung),"RÜBE")>0 
		then do RCSLK_Ursprung="Rübe"; end; 
	if Botanischer_Ursprung="" or 
		find(Botanischer_Ursprung,"gewonnen")>0 or 
		Botanischer_Ursprung="Rohr" or 
		Botanischer_Ursprung="Zichorie" or 
		Botanischer_Ursprung="Zuckerrohr" 
		then do RCSLK_Ursprung="[Noch zu klassifizieren]"; end; 
	if Botanischer_Ursprung="Sugar beet, Sugar cane; Europe" or 
		Botanischer_Ursprung="Zuckerrohr, Zuckerrübe" or
		Botanischer_Ursprung="Zuckerrübe, Weizen" 
		then do RCSLK_Ursprung="Mischung"; end; 
	if find(upcase(Botanischer_Ursprung),"MAIS")>0 or
			find(upcase(Botanischer_Ursprung),"WEIZEN")>0 or 
			Botanischer_Ursprung="Stärke, genaue Herkunft nicht angegeben" 
		then do RCSLK_Ursprung="Stärke"; end;

	
	if find(upcase(ARTIKELBEZEICHNUNG),"RAFFINADE")>0 or
		find(upcase(ARTIKELBEZEICHNUNG),"EU1")>0 or
		find(upcase(ARTIKELBEZEICHNUNG),"EG 1")>0 or
		find(upcase(ARTIKELBEZEICHNUNG),"STAUB")>0 or
		find(upcase(ARTIKELBEZEICHNUNG),"K1")>0 or
		ARTIKELBEZEICHNUNG in ('Puderzucker PSG', 'RKFF',
			'RKFF, Sack', 'Feinster Zucker RKFF Sack', 'Zucker RF 50 kg Saalonia 2010 Art.-Nr. 2010 Südzucker grün') 
		then do RCSLK_Quali="EG-Kat. I (Raffinade)"; end;
		
	else if find(upcase(ARTIKELBEZEICHNUNG),"II")>0 or
		find(upcase(ARTIKELBEZEICHNUNG),"EU2")>0 or
		find(upcase(ARTIKELBEZEICHNUNG),"EG 2")>0 or
	 	find(upcase(ARTIKELBEZEICHNUNG),"K2")>0 or
	 	find(upcase(ARTIKELBEZEICHNUNG),"K 2")>0 or
		find(upcase(ARTIKELBEZEICHNUNG),"KAT. 2")>0 or
	 	find(upcase(ARTIKELBEZEICHNUNG),"WEISS")>0 or
	 	find(upcase(ARTIKELBEZEICHNUNG),"WEIß")>0  or
		/* Changes by TZ */
		find(upcase(ARTIKELBEZEICHNUNG),upcase("Zucker Siloware #1110010000"))>0 or
		find(upcase(ARTIKELBEZEICHNUNG),upcase("Sugar fine Silo/FB"))>0 or
		find(upcase(ARTIKELBEZEICHNUNG),upcase("Zucker, lose  Grundsorte mittel"))>0 or
		find(upcase(ARTIKELBEZEICHNUNG),upcase("Zucker Kristall mittel lose"))>0 or
		find(upcase(ARTIKELBEZEICHNUNG),upcase("Zucker, R12900"))>0 or
		find(upcase(ARTIKELBEZEICHNUNG),upcase("Sugar fine Silo/BB"))>0 or
		find(upcase(ARTIKELBEZEICHNUNG),upcase("Zucker KM lose"))>0 or
		find(upcase(ARTIKELBEZEICHNUNG),upcase("Grundsorte"))>0 or
		ARTIKELBEZEICHNUNG in ('KF', 'KF, SAck', 'KF Sack',
			'KM, Sack', 'KM, lose', 'Zucker KF CeKP PSV 25,00',
			'Zucker Kristall fein Big-Bag  1.000 kg im Big-Bag')  
		/* Changes End */
		then do RCSLK_Quali="EG-Kat. II (Weißzucker)"; end;
	 else do RCSLK_Quali="[Noch zu klassifizieren]"; end;
	if Product_category_name ne "Reiner Weisszucker" 
		then RCSLK_Quali="[Kein reiner WZ]";
/* Changes by TZ */
/* Classification could be used in a later step to classify RCSLK_Koernung */	
	if Product_category_name in ("Zuckerhaltiges Vorprodukt" "Fondant" "Fruktose-Glukose Mischungen, Brauner Zucker, Karamellstoffe und andere Zuckermischungen") 
		then do RCSLK_Aggregat="[Noch zu klassifizieren]"; end;
	if Product_category_name in ("Invertzucker" "Glukosesirup")
		then do RCSLK_Aggregat="Flüssig"; end;
	/* Changes by TZ */
	if find(upcase(ARTIKELBEZEICHNUNG),"RAFTISWEET")>0 or
		find(upcase(ARTIKELBEZEICHNUNG),"ISOSWEET")>0 or
		find(upcase(ARTIKELBEZEICHNUNG),"INVERTZUCKER")>0 or
		find(upcase(ARTIKELBEZEICHNUNG),"GLUKOSESIRUP")>0 or
		find(upcase(ARTIKELBEZEICHNUNG),"SIRUP")>0 or
		find(upcase(ARTIKELBEZEICHNUNG),"SYRUP")>0 or
		find(upcase(ARTIKELBEZEICHNUNG),"SWEETMIX")>0 or
		find(upcase(ARTIKELBEZEICHNUNG),"FLUESSIG")>0 or
		find(upcase(ARTIKELBEZEICHNUNG),"BENEOL95/75(RAFTILOSE)DICHTE(1,39/L")>0 or 
		find(upcase(ARTIKELBEZEICHNUNG),"FARBST. KARAMELSIR. 75/760-01")> 0
		then do RCSLK_Aggregat="Flüssig"; end;
	if Product_category_name = "Reiner Weisszucker" or
		/* Changes by TZ 2*/
		find(upcase(ARTIKELBEZEICHNUNG), "TROCKEN")>0
		/* Changes End 2*/
		then do RCSLK_Aggregat="Fest"; end;
	if ARTIKELBEZEICHNUNG in ('FRUCHTZUCKER PULVER GEMAHLEN')
		then do RCSLK_Aggregat="Fest"; end;
	/* Changes End */
	if z_no=15 and ARTIKELBEZEICHNUNG IN ("PROFI BRILLIANT DEKOR Z" "DIAMANT DEKORIERKRISTALL FEIN" 
										"FARINZUCKER" "PROFI  DIAMANT DEKORIERKRISTALL" 
										"MUSTER/ ZUCKERHALTIGE WA BIG BAG")	
		then do RCSLK_Aggregat="Fest"; end;
	if z_no=54 and ARTIKELBEZEICHNUNG="Biozucker / 25 kg Sack" 
		then do RCSLK_Aggregat="Fest"; end;
	/* Changes by TZ */
	if ARTIKELBEZEICHNUNG in ('Dextrose-Monohydrat')
		then do RCSLK_Aggregat="Fest"; end;
	if find(upcase(ARTIKELBEZEICHNUNG),"FEIN")>0 or
	    find(upcase(ARTIKELBEZEICHNUNG),"FINE")>0 or
		find(upcase(ARTIKELBEZEICHNUNG),"RFF")>0 or
		find(ARTIKELBEZEICHNUNG,"Zucker Raffinade  25Kg/S. 1110020000")>0 or
	/* Changes End */
		find(upcase(ARTIKELBEZEICHNUNG),"KF")>0 or
		ARTIKELBEZEICHNUNG in ('Raffinade RF', 'Zucker RF 50 kg Saalonia 2010 Art.-Nr. 2010 Südzucker grün')
		then do RCSLK_Koernung="Feine Körnung"; end;
	else if find(upcase(ARTIKELBEZEICHNUNG),"FEINST")>0 or
		/* Changes by TZ */
		find(upcase(ARTIKELBEZEICHNUNG),"STAUB")>0 or
		find(upcase(ARTIKELBEZEICHNUNG),"PUDER")>0 or
		find(upcase(ARTIKELBEZEICHNUNG),"RKFF")>0 or
		find(ARTIKELBEZEICHNUNG,"Raffinade R10")>0 or
		ARTIKELBEZEICHNUNG in ("Zucchero Velo 3% bags")
		/* Changes End */
		then do RCSLK_Koernung="Feinste Körnung"; end;
	else if find(upcase(ARTIKELBEZEICHNUNG),"MITT")>0 or
		/* Changes by TZ */
		ARTIKELBEZEICHNUNG in (
			"RO Weißzucker Standard Lose",
			"Zucker Siloware #1110010000", 
			"Weißzucker W0",
			"Weißzucker EECII",
			'Weißzucker 25 kg',
			'Weißzucker lose') or
		/* Changes End */
		find(upcase(ARTIKELBEZEICHNUNG),"KM")>0 
		then do RCSLK_Koernung="Mittlere Körnung"; end;
	else if find(upcase(ARTIKELBEZEICHNUNG),"GROB")>0 or
		/* Changes by TZ */
		find(upcase(ARTIKELBEZEICHNUNG),"HAGEL")>0 or
		ARTIKELBEZEICHNUNG in 
			('EG Zucker Kat. II franz. Kristallzucker GG') 
		/* Changes End */
		then do RCSLK_Koernung="Grobe Körnung"; end;
	else if ARTIKELBEZEICHNUNG in ('Zucker, Raffinade RG 2210', 'Doppelraffinade, R12950')
		then do RCSLK_Koernung="Grobe Körnung"; end;
	/* Changes by TZ */
	/* - Not sure what to do with Fondant (> 900 instances) */
	else if find(upcase(ARTIKELBEZEICHNUNG),"FONDANT")>0
		then do RCSLK_Koernung="Fondant"; end;
	else if ARTIKELBEZEICHNUNG="Weisszucker - lose -" and name_verkaeufer^="Pfeifer & Langen"
		then do RCSLK_Koernung="Grobe Körnung"; end;
	else if upcase(ARTIKELBEZEICHNUNG) in 
		('Raffinade MF 47', 'Raffinade K 1 M', "ZUCKER", "WEISSZUCKER", "Weisszucker - LOSE -", "ZUCKER EG 2 GRUNDSORTE, SILO",
		"ZUCKER EG 2, GRUNDSORTE SACK FNR BACKKRE", 'Zucker, R12900')
		then do RCSLK_Koernung="Mittlere Körnung"; end;
	else if Z_no = 13 and ARTIKELBEZEICHNUNG = "Weißzucker WO"
		then do RCSLK_Koernung="Mittlere Körnung"; end;
	/* Changes End */
	else do RCSLK_Koernung="[Noch zu klassifizieren]"; end;

	if Product_category_name ne "Reiner Weisszucker" 
		then RCSLK_Koernung="[Kein reiner WZ]";
	/* Changes by TZ */
	if ARTIKELBEZEICHNUNG = "Zucker, R12900"
		then do RCSLK_Anlieferung="Lose/Silo"; end;
	/* Changes End */
	if Product_category_name = "Reiner Weisszucker" and
	 	find(upcase(ARTIKELBEZEICHNUNG),"SILO")>0 or
		find(upcase(ARTIKELBEZEICHNUNG),"LOSE")>0 
		then do RCSLK_Anlieferung="Lose/Silo"; end;
	/* Changes by TZ 2*/

	else if find(upcase(ARTIKELBEZEICHNUNG), "Halosin ,Trockenglucose HMW 30211") and
		MOD(ANZAHL, 25) = 0
		then do RCSLK_Anlieferung="Sack"; end; /* Might be not 100% correct. Some deliveries are a mixture of Sack and Big-Bag */
	else if find(upcase(ARTIKELBEZEICHNUNG), "Halosin ,Trockenglucose HMW 30211") and
		MOD(ANZAHL,900) = 0 
		then do RCSLK_Anlieferung="Big Bag"; end;
	/* Changes End 2*/
	else if Product_category_name = "Reiner Weisszucker" and
		find(upcase(ARTIKELBEZEICHNUNG),"BIG BAG")>0 or
		find(upcase(ARTIKELBEZEICHNUNG),"BIGBAG")>0 or
		find(upcase(ARTIKELBEZEICHNUNG),"WEIßZUCKER EECII WO")>0 or
		/* Changes by TZ */
		find(upcase(ARTIKELBEZEICHNUNG),"BIG-BAG")>0
		/* Changes End */
		then do RCSLK_Anlieferung="Big Bag"; end;
	/* Changes by TZ */
	else if find(upcase(ARTIKELBEZEICHNUNG),"SACK")>0 or
		find(upcase(ARTIKELBEZEICHNUNG),"SÄCKEN")>0 or
		find(upcase(ARTIKELBEZEICHNUNG),"BAGGED")>0 or
		find(upcase(ARTIKELBEZEICHNUNG),"HAGELZUCKER")>0 or
		find(upcase(ARTIKELBEZEICHNUNG),"RAFFINADE GEM.")>0 or
		find(upcase(ARTIKELBEZEICHNUNG),"RAFFINADE STANDARD")>0 or
		find(upcase(ARTIKELBEZEICHNUNG),"GRUNDSORTE")>0 or
		find(upcase(ARTIKELBEZEICHNUNG),"25")>0 /* Checked all ARTIKELBEZEICHNUNGEN does not intervene with any other category */
		then do RCSLK_Anlieferung="Sack"; end;
	else if find(upcase(ARTIKELBEZEICHNUNG),"KARTON")>0 or
		find(upcase(ARTIKELBEZEICHNUNG),"ZUCKER, R12900")>0
		then do RCSLK_Anlieferung="Karton"; end;
	else if upcase(ARTIKELBEZEICHNUNG)="WEISSZUCKER" and name_Dok_empfaenger="Bodeta Süßwaren"
		then do RCSLK_Anlieferung="Lose/Silo"; end;
	else if ARTIKELBEZEICHNUNG in ( 
		"Weißzucker W0",
		'ZUCKER',
		'EG Zucker Kat. II franz. Kristallzucker GG',
		'Raffinade RF')
		then do RCSLK_Anlieferung="Lose/Silo"; end;
	else do RCSLK_Anlieferung="[Noch zu klassifizieren]"; end;
	/* Changes End */

	if Product_category_name in 
		("Fruktose-Glukose Mischungen, Brauner Zucker, Karamellstoffe und andere Zuckermischungen"
		 "Invertzucker" 
		 "Glukosesirup" ) and
	 	find(upcase(ARTIKELBEZEICHNUNG),"LOSE")>0 or 
	 	find(upcase(ARTIKELBEZEICHNUNG),"TANK")>0 
		then do RCSLK_Anlieferung="Lose/Tankwagen"; end;
	else if ARTIKELBEZEICHNUNG in ( 'Glukose-Stärkesirup', 'Glukose-Stärkesirup 151',
 		'Glukose-Stärkesirup 351', 'Glukose-Stärkesirup 35B',
 		'Glukosesirup 43 DE', 'Glukosesirup 60 DE, flüssig',
 		'Invert-Zuckersirup 81/55', 'Invertzuckersirup 72,7',
		'Agenabon H20.175-02, F50 Sirup 72,7 TS',
		'Invertzuckerlösung 70 % HM') and MENGE_IN_TONNEN > 20
		then do RCSLK_Anlieferung="Lose/Tankwagen"; end;
	else if ARTIKELBEZEICHNUNG in 
		('Komprizucker f. Zippies', 'Kandisfarin, hellbraun', 'BIO ZUCKER', 'BRAUNER ZUCKER', 'DEKORIERKRISTALL, FEIN',
 		'DIAMANT DEKO MISCHUNG GROB III', 'DIAMANT DEKORIERKRISTALL FEIN',
		'Diamant Deco mixture IV NH', 'Diamant Deco mixture IV NH, FARINZUCKER',
		'FRUKTOSE, KANDISFARIN FS', 'Meister-Brilliant-Dekor Neutral PO MB', 
		'PROFI  DIAMANT DEKORIERKRISTALL', 'Iced sugar', "Zucchero Velo 3% bags", 
		"HAGELZUCKER", 'Dextrose C*Dex 02032,grob', 'Dextrose anhydrat C*DEX 02402'
		'Bio - Puderzucker', 'Lakritz Stäbchen', 'Nonpareille weiß', 
		'Lakritz-Stäbchen Rohlinge', 'Compri-Zucker S', 'Puderzucker', 'Raffinade  R3 grob', 'Raffinade  R4 mittel',
		'Raffinade  R4 mittel "K 1 M"', 'Raffinade K 1 M', 'Raffinade MF 47',
		'Raffinade R 10', 'Raffinade, R 11, extrafein', 'Weisszucker fein   0,0 - 2,5  mm',
		'Weisszucker EU2 Fein 50 kg', 'KF', 'Puderzucker PSG', 'RKFF', 'Weisszucker EU2, fein',
		'Zucker, Raffinade RG 2210', 'Doppelraffinade, R12950', 'Weisszucker EU2 fein',
		'Staubzucker, R12910', 'Raffinade Mittel', 'Weisszucker fein   0,0 - 2,5  mm',
		'Fruktose, kristallin DAB (phEur)', 'Raffinade mittel R4', 'RO Zucker Raffinade Fein, Standard',
		'Raffinade grob R3', 'Raffinade EU 1 Extra fein 50 kg PSV', 'DEXTROSE MONOHYDRAT/KL.MENGEN',
		'FRUCHTZUCKER PULVER GEMAHLEN', 'Zucker RF 50 kg Saalonia 2010 Art.-Nr. 2010 Südzucker grün')
		then do RCSLK_Anlieferung="Sack"; end;
	else if ARTIKELBEZEICHNUNG in 
		('Bio - Glukosesirup', 'Bio-Glukosesirup', 
		 'Flüssigzucker 72,7', 'Invertzucker', 'BENEOL95/75(RAFTILOSE)DICHTE(1,39/L',
		'FONDANT-FRANKONIA CONT 1000KG   # 2', 'FONDANT-FRANKONIA CONT 1120KG   # 2',
		'FONDANT-FRANKONIA CONT 1300KG   # 2')
		then do RCSLK_Anlieferung="Container"; end;
	else if ARTIKELBEZEICHNUNG in ('Bio-Invertzucker Naturesweet I33/73 LC') and ANZAHL > 1000
		then do RCSLK_Anlieferung="Container"; end;
	else if ARTIKELBEZEICHNUNG in ('Bio-Invertzucker Naturesweet I33/73 LC') and ANZAHL <= 500
		then do RCSLK_Anlieferung="Kanister"; end;
	else if Product_category_name in 
		("Fruktose-Glukose Mischungen, Brauner Zucker, Karamellstoffe und andere Zuckermischungen"
		 "Invertzucker", "Glukosesirup" ) and
	 	find(upcase(ARTIKELBEZEICHNUNG),"CONTAINER")>0
		then do RCSLK_Anlieferung="Container"; end;
	else if Product_category_name in 
		("Fruktose-Glukose Mischungen, Brauner Zucker, Karamellstoffe und andere Zuckermischungen"
		 "Invertzucker" 
		 "Glukosesirup" ) and
	 	find(upcase(ARTIKELBEZEICHNUNG),"KANISTER")>0
		then do RCSLK_Anlieferung="Kanister"; end;

	/* Changes by TZ 2*/
	else if Z_no = 13 and ARTIKELBEZEICHNUNG = "Weißzucker WO"
		then do RCSLK_Anlieferung="Sack"; end;
	else if ARTIKELBEZEICHNUNG = "FONDANT" /* unique only CSM */
		then do RCSLK_Anlieferung="Kanister"; end;
	else if ARTIKELBEZEICHNUNG in ('Fondantmasse S 15', 'FONDANT S20                    # 2',
		'Fondantmasse S 20', 'Fondantmasse, R10650')
		then do RCSLK_Anlieferung="Karton"; end;

	if ARTIKELBEZEICHNUNG in
		('Invertzuckersirup 72,7 Kan 14,00')
		then do RCSLK_Anlieferung="Kanister"; end;
	/* Could maybe be generalized for all zedenten */
	if (z_no=2 or z_no=6) and (ANZAHL < 20000 and RCSLK_Aggregat="Flüssig" and MOD(ANZAHL,1200)=0) then
		do; RCSLK_Anlieferung="Kanister"; end;

	if (z_no=2 or z_no=6) and (ANZAHL > 20000 and RCSLK_Aggregat="Flüssig") then
		do; RCSLK_Anlieferung="Lose/Tankwagen"; end;

	if (z_no=54) and (ANZAHL > 20000 and RCSLK_Aggregat="Flüssig") then
		do; RCSLK_Anlieferung="Lose/Tankwagen"; end;
	if (z_no=16) and (MENGE_IN_TONNEN > 3) then
		do; RCSLK_Anlieferung="Lose/Tankwagen"; end;
	if (z_no=16) and (MENGE_IN_TONNEN < 3) then
		do; RCSLK_Anlieferung="Container"; end;

	/* general classifications */
	if RCSLK_Anlieferung in ('Sack', 'Big Bag')
		then do RCSLK_Aggregat="Fest"; end;	


	/* Changes End 2*/

	/* Changes by TZ */
	/* Precausion for wrongly classified data */ 
	/*else if RCSLK_Anlieferung="Lose/Silo" or RCSLK_Anlieferung="Lose/Tankwagen" and MENGE_IN_TONNEN < 18
		then do RCSLK_Anlieferung="[Noch zu klassifizieren]"; end;
	/* Changes End */
	if Product_category_name ="Zuckerhaltiges Vorprodukt"
		then do RCSLK_Anlieferung="[Noch zu klassifizieren]"; end;
run;


goptions reset=all;
options papersize=A3	leftmargin=1 cm rightmargin=1 cm topmargin=1 cm bottommargin=.5 cm 	orientation=landscape nodate nonumber nobyline;
/*ods pdf file="&path\Analysis\002 ASSIGNOR SPECIFIC OUTPUT\SAS Outputs (SUA002)\ Klassifizierung [&code_short.].pdf" style=minimal;*/
/*ods html file="&path\Analysis\002 ASSIGNOR SPECIFIC OUTPUT\SAS Outputs (SUA002)\ Klassifizierung [&code_short.].htm" (title="Created on &date_US_long with code &code.") style=minimal;*/
/*ods pdf file="Z:\Extern\CDC Cartel Damage Claims - German Sugar Cartel\Datasets\Leistungsklage 2017\Klassifizierung [&code_short.].pdf" style=minimal;;*/
/*ods html file="Z:\Extern\CDC Cartel Damage Claims - German Sugar Cartel\Datasets\Leistungsklage 2017\Klassifizierung [&code_short.].htm" (title="Created on &date_US_long with code &code.") style=minimal;*/
/*ods listing close;*/
proc tabulate data=product_classification missing  f=commax15. style=[fontsize=3] ;
class RCSLK_Lieferant RCSLK_ZFG_Gehaltsklasse RCSLK_Zucker_FG_Gehalt RCSLK_Ursprung RCSLK_Quali RCSLK_Koernung RCSLK_Anlieferung RCSLK_Aggregat /  style=[fontsize=3] ;
classlev RCSLK_Lieferant RCSLK_ZFG_Gehaltsklasse RCSLK_Zucker_FG_Gehalt RCSLK_Ursprung RCSLK_Quali RCSLK_Koernung RCSLK_Anlieferung RCSLK_Aggregat / style=[fontsize=3];
var menge_in_tonnen / style=[fontsize=3];
keylabel n=" " sum=" ";
table
(RCSLK_Aggregat="Aggregatszustand" all="Gesamt")*
	(all="Menge (in t)" rowpctsum="Anteil Lieferant in Aggregatszustand (in %)"*f=commax5.2 colpctsum="Anteil des Aggregratszustands in Lieferant (in %)"*f=commax5.2 pctsum="Anteil an Gesamtmenge (in %)"*f=commax5.2)
 ,
(RCSLK_Lieferant="Lieferant (Kartellbeteiligung)" all="Gesamt")*menge_in_tonnen=" "/ row=float style=[just=l] box=" ";
table
(RCSLK_Anlieferung="Anlieferform" all="Gesamt")*
	(all="Menge (in t)" rowpctsum="Anteil Lieferant in Anlieferform (in %)"*f=commax5.2 colpctsum="Anteil der Anlieferungsform in Lieferant (in %)"*f=commax5.2 pctsum="Anteil an Gesamtmenge (in %)"*f=commax5.2)
 ,
(RCSLK_Lieferant="Lieferant (Kartellbeteiligung)" all="Gesamt")*menge_in_tonnen=" "/ row=float style=[just=l] box=" ";
table
(RCSLK_Ursprung="Ursprung" all="Gesamt")*
	(all="Menge (in t)" rowpctsum="Anteil Lieferant in Ursprung (in %)"*f=commax5.2 colpctsum="Anteil des Ursprungs in Lieferant (in %)"*f=commax5.2 pctsum="Anteil an Gesamtmenge (in %)"*f=commax5.2)
 ,
(RCSLK_Lieferant="Lieferant (Kartellbeteiligung)" all="Gesamt")*menge_in_tonnen=" "/ row=float style=[just=l] box=" ";
table
(RCSLK_Quali="Qualität" all="Gesamt")*
	(all="Menge (in t)" rowpctsum="Anteil Lieferant in Qualität (in %)"*f=commax5.2 colpctsum="Anteil der Qualität in Lieferant (in %)"*f=commax5.2 pctsum="Anteil an Gesamtmenge (in %)"*f=commax5.2)
 ,
(RCSLK_Lieferant="Lieferant (Kartellbeteiligung)" all="Gesamt")*menge_in_tonnen=" "/ row=float style=[just=l] box=" ";
table
(RCSLK_Koernung="Körnung" all="Gesamt")*
	(all="Menge (in t)" rowpctsum="Anteil Lieferant in Körnung (in %)"*f=commax5.2 colpctsum="Anteil der Körnung in Lieferant (in %)"*f=commax5.2 pctsum="Anteil an Gesamtmenge (in %)"*f=commax5.2)
 ,
(RCSLK_Lieferant="Lieferant (Kartellbeteiligung)" all="Gesamt")*menge_in_tonnen=" "/ row=float style=[just=l] box=" ";
table
(RCSLK_ZFG_Gehaltsklasse="Zuckergehalt (g pro 100g)" all="Gesamt")*
	(all="Menge (in t)" rowpctsum="Anteil Lieferant in Zuckergehaltsklasse (in %)"*f=commax5.2 colpctsum="Anteil der Zuckergehaltsklasse in Lieferant (in %)"*f=commax5.2 pctsum="Anteil an Gesamtmenge (in %)"*f=commax5.2)
 ,
(RCSLK_Lieferant="Lieferant (Kartellbeteiligung)" all="Gesamt")*menge_in_tonnen=" "/ row=float style=[just=l] box=" ";
title1 j=r h=3 bold "STRICTLY CONFIDENTIAL";
title2 j=r h=2 "&date_US_long - not final";
title3 j=l h=6 bold " ";
title5 h=9 " ";	
*footnote1 j=l h=.25 "XXXXXXXXXXXX";
*footnote2 j=l h=.25 "XXXXXXXXXXXX";
*footnote2 j=l h=.25 "XXXXXXXXXXXX";
*footnote3 j=l h=.25 "XXXXXXXXXXXX";
*footnote4 j=l h=.25 "XXXXXXXXXXXX";
run;
ods pdf close;
ods html close;





/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
19 	 FILE MATCHING
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*This part matches the existing files in the "Datentausch" folder with the references to those files in the data  provided by the assignors (see other build codes), in order to detect 
scans that are missing. It also checks for observations that do not reference any scan and creates a list of scans that are never referenced. 
Depending on the issue, the assignors are then asked to either 
a) provide the missing scan, named according to the reference made in the transaction data
b) upload transaction data again that has more complete or more correct references to scans
c) confirm that for a certain transaction there is definately no more invoice available
Transactions for which it was established that there definitely is no more ivoice
are marked with the string -|- in the Abbild_transaktion variable (often along with other 
explanatory text.*/
/*	19.1 ----- PREPARATIONS FILENAME ENTRIES IN DATABANK -----*/
/*	1.	COMBINING INVOICE POSITION AND NON-INVOICE POSITIONS*/
/*	Preparing the combined data for further analysis; */
	data ind_data_incl_non_inv;
		set product_classification (in=a)
			build.non_invoice_positions;
		/*count, background info: Assignors were instructed to separate several filenames with ":"*/
			count_abbild_transaktion=Count(abbild_transaktion, ":");
			count_abbild_sonstige_info=Count(abbild_sonstige_info, ":");
			count_abbild_anpassung=Count(abbild_anpassung, ":");
		/*preparation*/
			abbild_transaktion=strip(upcase(abbild_transaktion));
			abbild_Anpassung=strip(upcase(abbild_Anpassung));
			abbild_sonstige_info=strip(upcase(abbild_sonstige_info));
		If count(abbild_transaktion,"-|-")>0 then delete;
		/*If count(abbild_sonstige_info,"-|-")>0 then delete;*/
		/*If count(abbild_anpassung,"-|-")>0 then delete;*/
		/*string -|- was used to mark observations for which scans are definitely no more available */
		if a then non_inv_pos=0; else non_inv_pos=1;
		md5_3_abbtra_ppe_menge = put(catt(abbild_transaktion, preis_pro_einheit, menge_in_tonnen), $200.);
  	run;
		
	proc means data=ind_data_incl_non_inv range;
	var count_abbild_transaktion 
		count_abbild_sonstige_info 
		count_abbild_anpassung;
	run; 
/* 	NOTE: Up to 18 separate files in Abbild Transaktion.*/
	data ind_data_incl_non_inv_wCNA;
	set ind_data_incl_non_inv;
	/*W.u.H kuchle*/
	if DOKUMENTENNUMMER ="1510245242" then do;put _all_; MENGE_IN_TONNEN =6.85; ANZAHL=137; put _all_; end;
	/*Bremer Schweiz Mineralwasserbrunnen*/
	if DOKUMENTENNUMMER ="60704068" then do; put "Change #1 " "delete " DOKUMENTENNUMMER; delete; put _all_; end;
	
	run;

 /* Non Invoice Check */
	data ind_data_incl_non_inv_wCNA;
	set ind_data_incl_non_inv;
	/*W.u.H kuchle*/
	if DOKUMENTENNUMMER ="1510245242" then do; put "Change #0 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =6.85; ANZAHL=137; put " --> " MENGE_IN_TONNEN ANZAHL; end;
	/*Bremer Schweiz Mineralwasserbrunnen*/
	if DOKUMENTENNUMMER ="60704068" then do; put "Change #1 " "delete " DOKUMENTENNUMMER; delete; end;
	/*Bad Pyrmonter Mineral- und Heilquellen*/
	if DOKUMENTENNUMMER ="61075028" then do; put "Change #2 " "delete " DOKUMENTENNUMMER; delete; end;
	/*Bodeta Süßwaren*/
	if DOKUMENTENNUMMER ="8673436"  then do; put "Change #3 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR@; PREIS_PRO_EINHEIT_EUR=731.2; put " --> " PREIS_PRO_EINHEIT_EUR; end;
	if DOKUMENTENNUMMER ="61096988" then do; put "Change #4 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL@; MENGE_IN_TONNEN=10.05; ANZAHL=10.05; put " --> " MENGE_IN_TONNEN ANZAHL; end;
	/*This is a strange case. On the non invoice, they are reducing more that what they bought. could not figure out hints to understand it. German handwrittings on it*/
	/*if DOKUMENTENNUMMER ="847775" then do MENGE_IN_TONNEN=-1.6;
	 ANZAHL=-1.6; end;*/
	if DOKUMENTENNUMMER ="61100824" then do; put "Change #5 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN=25.02; ANZAHL=25.02; put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER ="8572559"  then do; put "Change #6 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN=23.18; ANZAHL=23.18; put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER ="8574976"  then do; put "Change #7 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN=8.28; ANZAHL=8.28; put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER ="250211"   then do; put "Change #8 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN=4.44; ANZAHL=4.44; put " --> " MENGE_IN_TONNEN ANZAHL; end;
	/*Busemann GmbH*/
	if DOKUMENTENNUMMER ="60539957" then do; put "Change #9 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN=19.975; ANZAHL=199.75; put " --> " MENGE_IN_TONNEN ANZAHL; end;
	/*1 case left to be checked by thimm*/
	if DOKUMENTENNUMMER ="60663196" then do; put "Change #10 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN=1.454; ANZAHL=14.54; put " --> " MENGE_IN_TONNEN ANZAHL; end;
	/*CSM Deutschland GmbH */
	if DOKUMENTENNUMMER in ("4500292867","4500292868","4500293337","4500293339","4500293340","4500293711","4500293712","4500293713","4500294229","4500294725","4500293321","4500294394","4500293671","4500293506","4500293102","4500292988") then  do  PREIS_PRO_EINHEIT_EUR =0.732; end;
	if DOKUMENTENNUMMER in ("4500291429","4500292833","4500294185") then  do; put "Change #11 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @;  PREIS_PRO_EINHEIT_EUR =0.749; put " --> " PREIS_PRO_EINHEIT_EUR;end;
	/*Still left 6 cases to be done with large quantities on them. check the files with wll the comments* start from non-invoice indec 363-369*/
	/*There can be an error on industry_data dataset. The menge in tonnen is 0.75 and the anzalh is 750. Then they reduce at the non-invoice
	 respectivly 0.05 and 50 which would lead to a false result 0.745 and 700*/
	if DOKUMENTENNUMMER ="4500048756" then do; put "Change #12 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN=0.745; ANZAHL=745; put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER="5105614432" then do; put "Change #13 " "delete " DOKUMENTENNUMMER; delete; end;
	if DOKUMENTENNUMMER ="5105617536" then do; put "Change #14 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN=9.58; ANZAHL=9580; put " --> " MENGE_IN_TONNEN ANZAHL; end;
	 if DOKUMENTENNUMMER ="5105625725" then do; put "Change #15 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =10.475; ANZAHL=10475; put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER ="5105652845" then do; put "Change #16 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =0.87; ANZAHL=870; put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER ="5105675958" then do; put "Change #17 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =16.12; ANZAHL=16120; put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER ="5105686255" then do; put "Change #18 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =9.59; ANZAHL=95900; put " --> " MENGE_IN_TONNEN ANZAHL; end;
	/*Destillerie Dr. Gerald Rauch*/
	if DOKUMENTENNUMMER ="38837162" then do; put "Change #19 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; PREIS_PRO_EINHEIT_EUR=57.47944; put " --> " PREIS_PRO_EINHEIT_EUR; end;
	if DOKUMENTENNUMMER ="501033"   then do; put "Change #20 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =24.9; ANZAHL=24.9; put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER ="70033080" then do; put "Change #21 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; PREIS_PRO_EINHEIT_EUR=57.47943; put " --> " PREIS_PRO_EINHEIT_EUR; end;
	if DOKUMENTENNUMMER ="70049009" then do; put "Change #22 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; PREIS_PRO_EINHEIT_EUR=57.47943; put " --> " PREIS_PRO_EINHEIT_EUR; end;
	/*E+L Einkaufs- und Logistik*. It has some cases that need to be checked again*/
	if DOKUMENTENNUMMER ="30081779" then do; put "Change #23 " "delete " DOKUMENTENNUMMER; delete; end;
	if DOKUMENTENNUMMER ="30093164" then do; put "Change #24 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =23.58; ANZAHL=23.58; put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER ="8336686" then do; put "Change #25 " "delete " DOKUMENTENNUMMER; delete; end;
	/*To be checked again the non-invoice with index 53,54*/
	if DOKUMENTENNUMMER ="8653098" then do; put "Change #26 " "delete " DOKUMENTENNUMMER; delete; end;
	/*Not sure about this change. There is another similiar match that can be done. */
	if DOKUMENTENNUMMER ="8652617" then do; put "Change #27 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =25.22; ANZAHL=252.2; put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER ="8869584" then do; put "Change #28 " "delete " DOKUMENTENNUMMER; delete; end;
	if DOKUMENTENNUMMER ="8869760" then do; put "Change #29 " "delete " DOKUMENTENNUMMER; delete; end;
	if DOKUMENTENNUMMER ="8899860" then do; put "Change #30 " "delete " DOKUMENTENNUMMER; delete; end;
	if DOKUMENTENNUMMER ="8867380" then do; put "Change #31 " "delete " DOKUMENTENNUMMER; delete; end;
	if DOKUMENTENNUMMER ="61009309" then do; put "Change #32 " "delete " DOKUMENTENNUMMER; delete; end;
	if DOKUMENTENNUMMER ="2147483647" then do; put "Change #33 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; PREIS_PRO_EINHEIT_EUR=PREIS_PRO_EINHEIT_EUR - 20; put " --> " PREIS_PRO_EINHEIT_EUR; end;
	/*Eichetti Confect Spezialitäten, A. Eichelmann*/
	if DOKUMENTENNUMMER ="1510547277" then do; put "Change #34 " "delete " DOKUMENTENNUMMER; delete; end;
	if DOKUMENTENNUMMER ="1510141770" then do; put "Change #35 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; PREIS_PRO_EINHEIT_EUR=PREIS_PRO_EINHEIT_EUR - 0.014; put " --> " PREIS_PRO_EINHEIT_EUR; end;
	if DOKUMENTENNUMMER ="1510414195" then do; put "Change #36 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @;  MENGE_IN_TONNEN =MENGE_IN_TONNEN-0.025; ANZAHL=ANZAHL-25; put " --> " MENGE_IN_TONNEN ANZAHL;end;
	if DOKUMENTENNUMMER ="1510414195" and md5_3_abbtra_ppe_menge ="EICHETTI_DIVERSE\00016409.PDF:EI" then  do; put "Change #37 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-0.025;
	 ANZAHL=ANZAHL-25; put " --> " MENGE_IN_TONNEN ANZAHL; end;
	/*I also keep track the md5 value from now on*/
	/*md5_3_abbtra_ppe_menge in ("EICHETTI_DIVERSE\00016297.PDF:EI", "EICHETTI_DIVERSE\00016297.PDF:EI","EICHETTI_DIVERSE\00016295.PDF:EI", 
	 "EICHETTI_DIVERSE\00016294.PDF:EI","EICHETTI_DIVERSE\00016296.PDF:EI)*/
	if DOKUMENTENNUMMER in ("1510635319","1510637751", "1510638914","1510639819","1510638913") 
	then do; put "Change #38 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; PREIS_PRO_EINHEIT_EUR=PREIS_PRO_EINHEIT_EUR-0.107; put " --> " PREIS_PRO_EINHEIT_EUR; end; 
	if DOKUMENTENNUMMER in ("38834417","38836518","38838738","38838150") 
	and md5_3_abbtra_ppe_menge in ("EICHETTI_DIVERSE\00016882.PDF1.4","EICHETTI_DIVERSE\00016880.PDF1.4",
	"EICHETTI_DIVERSE\00016879.PDF1.4","EICHETTI_DIVERSE\00016878.PDF1.4","EICHETTI_DIVERSE\00016878.PDF1.5")then do; put "Change #39 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; PREIS_PRO_EINHEIT_EUR=PREIS_PRO_EINHEIT_EUR-0.00511;  put " --> " PREIS_PRO_EINHEIT_EUR; end; 
	if DOKUMENTENNUMMER="537338" and md5_3_abbtra_ppe_menge ="EICHETTI_DIVERSE\00016538.PDF:EI" then do; put "Change #40 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-0.49; ANZAHL=ANZAHL-490; put " --> " MENGE_IN_TONNEN ANZAHL;end;
	if DOKUMENTENNUMMER="99336009" and md5_3_abbtra_ppe_menge ="EICHETTI_DIVERSE\00016384.PDF0.5" then do; put "Change #41 " "delete " DOKUMENTENNUMMER; delete; end;
	if DOKUMENTENNUMMER="99343899" then do; put "Change #42 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-0.208; ANZAHL=ANZAHL- 208; put " --> " MENGE_IN_TONNEN ANZAHL; end;
	/*Still there are some complicated cases that need to be checked with Thimm/Jakob*/
	/*Paul Reber*/
	/*Still to be confirmed*/
	if DOKUMENTENNUMMER ="1510015832" then do; put "Change #43 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; PREIS_PRO_EINHEIT_EUR=PREIS_PRO_EINHEIT_EUR-0.1; put " --> " PREIS_PRO_EINHEIT_EUR; end;
	/*SADEX Zuckerwarenfabrik GmbH*/
	if DOKUMENTENNUMMER ="70484962" then do; put "Change #44 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; PREIS_PRO_EINHEIT_EUR=PREIS_PRO_EINHEIT_EUR-5.5; put " --> " PREIS_PRO_EINHEIT_EUR;  end;
	if DOKUMENTENNUMMER in ("1510207937","1510211772","1510216232") and md5_3_abbtra_ppe_menge in ("CDC007680780.69524.9","CDC007680790.69525.48","CDC007680800.69525.52")then do; put "Change #45 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; PREIS_PRO_EINHEIT_EUR=PREIS_PRO_EINHEIT_EUR-0.045; put " --> " PREIS_PRO_EINHEIT_EUR; end;
	/*Name_Zedent: Sektkellerei Schloss Wachenheim*/
	if DOKUMENTENNUMMER ="1510014252" then do; put "Change #46 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; PREIS_PRO_EINHEIT_EUR=PREIS_PRO_EINHEIT_EUR-0.03; put " --> " PREIS_PRO_EINHEIT_EUR; end;
	if DOKUMENTENNUMMER ="1510083166" then do; put "Change #47 " "delete " DOKUMENTENNUMMER; delete; end;
	 if DOKUMENTENNUMMER ="1510309826" then do; put "Change #48 " "delete " DOKUMENTENNUMMER; delete; end;
	if DOKUMENTENNUMMER ="1510373770" then do; put "Change #49 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-0.5;ANZAHL=ANZAHL- 500; put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER ="1510468068" then do; put "Change #50 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; PREIS_PRO_EINHEIT_EUR=PREIS_PRO_EINHEIT_EUR-0.032; put " --> " PREIS_PRO_EINHEIT_EUR; end;
	if DOKUMENTENNUMMER ="1510551596" then do; put "Change #51 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; PREIS_PRO_EINHEIT_EUR=PREIS_PRO_EINHEIT_EUR-0.0001; put " --> " PREIS_PRO_EINHEIT_EUR; end;
	if DOKUMENTENNUMMER ="70178901" then do; put "Change #52 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; PREIS_PRO_EINHEIT_EUR=PREIS_PRO_EINHEIT_EUR-0.13; end;
	/*Name_Zedent: Schoko-Dragee*/
	if DOKUMENTENNUMMER="61094876" and md5_3_abbtra_ppe_menge ="SD_61094876.PDF0.7954.2" then do; put "Change #53 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-0.05;
	 ANZAHL=ANZAHL-50; put " --> " MENGE_IN_TONNEN ANZAHL; end;
	/*Name_Zedent: Soldan Holding + Bonbonspezialitäten*/
	if DOKUMENTENNUMMER ="401108" then do; put "Change #54 " "delete " DOKUMENTENNUMMER; delete; end;
	if DOKUMENTENNUMMER ="401379" then do; put "Change #55 " "delete " DOKUMENTENNUMMER; delete; end;
	/*Name_Zedent:Vivaris Getranke GmbH & Co. KG */
	if DOKUMENTENNUMMER ="317389" and md5_3_abbtra_ppe_menge="4005_2002_0032504367535.40.025" then do; put "Change #56 " "delete " DOKUMENTENNUMMER; delete; end;
	if DOKUMENTENNUMMER ="213880" and md5_3_abbtra_ppe_menge="4050_2006_00325025820.54325.3" then do; put "Change #57 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-0.54;
	 ANZAHL=ANZAHL- 540; put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER ="215899" and md5_3_abbtra_ppe_menge="4050_2007_00325074900.5325.24" then do; put "Change #58 " "delete " DOKUMENTENNUMMER; delete; end;
	if DOKUMENTENNUMMER ="319320" then do; put "Change #58a " "delete " DOKUMENTENNUMMER; delete; end;
	if DOKUMENTENNUMMER ="3100484" and md5_3_abbtra_ppe_menge="4050_2009_00325109890.50525.02" then do; put "Change #59 " "delete " DOKUMENTENNUMMER; delete; end;
	if DOKUMENTENNUMMER ="3908935" and md5_3_abbtra_ppe_menge="4050_2009_00325118810.47925.22" then do; put "Change #60 " "delete " DOKUMENTENNUMMER; delete; end;
	if DOKUMENTENNUMMER ="3909715" and md5_3_abbtra_ppe_menge="4050_2010_00325146560.38724.82" then do; put "Change #61 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-0.1;
	 ANZAHL=ANZAHL- 100; put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER ="3911227" and md5_3_abbtra_ppe_menge="4050_2012_00325187910.38725.04" then do; put "Change #62 " "delete " DOKUMENTENNUMMER; delete; end;
	if DOKUMENTENNUMMER ="VKR102001" and md5_3_abbtra_ppe_menge="4050_2012_00325201460.57924.98" then  do; put "Change #63 " "delete " DOKUMENTENNUMMER; delete; end;
	if DOKUMENTENNUMMER ="VKR109002" and md5_3_abbtra_ppe_menge="4050_2014_00325236370.51825" then  do; put "Change #64 " "delete " DOKUMENTENNUMMER; delete; end;
	/*Name_Zedent: Bremer Schweiz Mineralwasserbrunnen*/
	if DOKUMENTENNUMMER ="60704068" then do; put "Change #65 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; PREIS_PRO_EINHEIT_EUR=PREIS_PRO_EINHEIT_EUR-6.27; put " --> " PREIS_PRO_EINHEIT_EUR; end;
	/*Name_Zedent: Berentzen-Gruppe Aktiengesellschaft*/
	if DOKUMENTENNUMMER ="6426006553" then do; put "Change #66 " "delete " DOKUMENTENNUMMER; invoice_source_doc ="6426006553"; cor_from_non_inv ="delete";end;
	if DOKUMENTENNUMMER ="42267" then do; put "Change #67 " "delete " DOKUMENTENNUMMER; invoice_source_doc ="5105640882"; cor_from_non_inv="delete";end;
	if DOKUMENTENNUMMER ="42785" then do; put "Change #68 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; invoice_source_doc ="42784"; MENGE_IN_TONNEN =MENGE_IN_TONNEN-22.9; ANZAHL=ANZAHL-22900; put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER ="6427008268" then do; put "Change #69 " "delete " DOKUMENTENNUMMER; invoice_source_doc ="6428001425"; cor_from_non_inv="delete";end;
	if DOKUMENTENNUMMER ="6428003381" then do; put "Change #70 " "delete " DOKUMENTENNUMMER; invoice_source_doc ="6428003381"; cor_from_non_inv="delete";end;
	if DOKUMENTENNUMMER ="6428004966" or DOKUMENTENNUMMER ="6428004966/KORR" then do; put "Change #71 " "delete " DOKUMENTENNUMMER; invoice_source_doc ="6428004966/KORRE"; cor_from_non_inv="delete";end;
	if DOKUMENTENNUMMER ="43679" or DOKUMENTENNUMMER ="43679/KORR" then do; put "Change #72 " "delete " DOKUMENTENNUMMER; invoice_source_doc ="43679/KORREKTUR"; cor_from_non_inv="delete";end;
	if DOKUMENTENNUMMER ="46659" then do; put "Change #73 " "delete " DOKUMENTENNUMMER; invoice_source_doc ="47013"; cor_from_non_inv="delete";end;
	if DOKUMENTENNUMMER ="55573" then do; put "Change #74 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; invoice_source_doc ="55574"; MENGE_IN_TONNEN =MENGE_IN_TONNEN-23.11; ANZAHL=ANZAHL-23110; put " --> " MENGE_IN_TONNEN ANZAHL;end;
	if DOKUMENTENNUMMER ="6430006644" then do; put "Change #75 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; invoice_source_doc ="6430006644"; MENGE_IN_TONNEN =MENGE_IN_TONNEN-21.52; ANZAHL=ANZAHL-21520;put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER ="31313648" then do; put "Change #76 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; invoice_source_doc ="31315620"; MENGE_IN_TONNEN =MENGE_IN_TONNEN-0.12; ANZAHL=ANZAHL-120;put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER ="2531105497" then do; put "Change #77 " "delete " DOKUMENTENNUMMER; invoice_source_doc ="2531105626"; cor_from_non_inv="delete";end;
	if DOKUMENTENNUMMER ="31401741" then do; put "Change #78 " "delete " DOKUMENTENNUMMER; invoice_source_doc ="31401741"; cor_from_non_inv="delete";end;
	if DOKUMENTENNUMMER ="31534453" then do; put "Change #79 " "delete " DOKUMENTENNUMMER; invoice_source_doc ="31534453"; cor_from_non_inv="delete";end;
	if DOKUMENTENNUMMER ="61044534" or DOKUMENTENNUMMER ="61044534/" then do; put "Change #80 " "delete " DOKUMENTENNUMMER; invoice_source_doc ="61044534/STORNO"; cor_from_non_inv="delete";end;
	if DOKUMENTENNUMMER ="2531500435" and md5_3_abbtra_ppe_menge="0300_2014_00325874900.40124.04" then do; put "Change #81 " "delete " DOKUMENTENNUMMER; invoice_source_doc ="2531500435"; cor_from_non_inv="delete";end;
	if DOKUMENTENNUMMER ="VKR108959" then do; put "Change #82 " "delete " DOKUMENTENNUMMER; invoice_source_doc ="VKG100237"; cor_from_non_inv="delete";end;
	if DOKUMENTENNUMMER ="9266" then  do; put "Change #83 " "delete " DOKUMENTENNUMMER;  invoice_source_doc ="9266"; cor_from_non_inv="delete";end;
	/*not sure*/
	if DOKUMENTENNUMMER ="R021423" then  do; put "Change #84 " "delete " DOKUMENTENNUMMER;  invoice_source_doc ="ABSTIMMUNG WE/RE"; cor_from_non_inv="delete";end;
	/*Name_Zedent: Frankonia Schokoladenwerke*/
	if DOKUMENTENNUMMER ="1631" then do; put "Change #85 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; invoice_source_doc ="1631"; MENGE_IN_TONNEN =MENGE_IN_TONNEN-1.25; ANZAHL=ANZAHL-1250;put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER in ("1446","1900","959","1899","1445","1444","958","1443","1898","1897","1682")
		then do; put "Change #85a " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; invoice_source_doc ="KSP-Frankonia-1022"; PREIS_PRO_EINHEIT_EUR=PREIS_PRO_EINHEIT_EUR-0.014;put " --> " PREIS_PRO_EINHEIT_EUR;  end;
	if DOKUMENTENNUMMER in ("3286","3722","3303","3749","3411","3752")then do; put "Change #86 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; invoice_source_doc ="KSP-Frankonia-1023"; PREIS_PRO_EINHEIT_EUR=PREIS_PRO_EINHEIT_EUR-0.025;put " --> " PREIS_PRO_EINHEIT_EUR;  end;
	if DOKUMENTENNUMMER in ("782","489","472")then do; put "Change #87 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; invoice_source_doc ="KSP-Frankonia-1024"; PREIS_PRO_EINHEIT_EUR=PREIS_PRO_EINHEIT_EUR-0.02;put " --> " PREIS_PRO_EINHEIT_EUR; end;
	if DOKUMENTENNUMMER in ("1413","1412","950","949","1411","948","947","946")then do; put "Change #88 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; invoice_source_doc ="KSP-Frankonia-1025"; PREIS_PRO_EINHEIT_EUR=PREIS_PRO_EINHEIT_EUR-0.015;put " --> " PREIS_PRO_EINHEIT_EUR;  end;
	if DOKUMENTENNUMMER in ("2082","2474","2475","2476","2477","2478")then do; put "Change #89 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; invoice_source_doc ="KSP-Frankonia-1027"; PREIS_PRO_EINHEIT_EUR=PREIS_PRO_EINHEIT_EUR-0.017;put " --> " PREIS_PRO_EINHEIT_EUR; end;
	if DOKUMENTENNUMMER in ("2350","1760","2351","2055")then do; put "Change #90 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; invoice_source_doc ="KSP-Frankonia-1032"; PREIS_PRO_EINHEIT_EUR=PREIS_PRO_EINHEIT_EUR-0.1135;put " --> " PREIS_PRO_EINHEIT_EUR; end;
	if DOKUMENTENNUMMER in ("670","671")then do; put "Change #91 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; invoice_source_doc ="KSP-Frankonia-1033"; PREIS_PRO_EINHEIT_EUR=PREIS_PRO_EINHEIT_EUR-0.1125; put " --> " PREIS_PRO_EINHEIT_EUR; end;
	if DOKUMENTENNUMMER in ("2007","2008")then do; put "Change #92 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; invoice_source_doc ="KSP-Frankonia-1034"; PREIS_PRO_EINHEIT_EUR=PREIS_PRO_EINHEIT_EUR-0.1009; put " --> " PREIS_PRO_EINHEIT_EUR; end;
	if DOKUMENTENNUMMER in ("3412","3341","3671","3396","3352")then do; put "Change #93 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; invoice_source_doc ="KSP-Frankonia-1035"; PREIS_PRO_EINHEIT_EUR=PREIS_PRO_EINHEIT_EUR-0.1135; put " --> " PREIS_PRO_EINHEIT_EUR; end;
	if DOKUMENTENNUMMER in ("289","196","290","370")then do; put "Change #94 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; invoice_source_doc ="KSP-Frankonia-1036"; PREIS_PRO_EINHEIT_EUR=PREIS_PRO_EINHEIT_EUR-0.0885; put " --> " PREIS_PRO_EINHEIT_EUR; end;
	if DOKUMENTENNUMMER in ("1959","289","2606","196","290","370","1960")then do; put "Change #95 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; invoice_source_doc ="KSP-Frankonia-1037"; PREIS_PRO_EINHEIT_EUR=PREIS_PRO_EINHEIT_EUR-0.0959; put " --> " PREIS_PRO_EINHEIT_EUR; end;
	if DOKUMENTENNUMMER in ("2695","2593","2594","2399")then do; put "Change #96 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; invoice_source_doc ="KSP-Frankonia-1038"; PREIS_PRO_EINHEIT_EUR=PREIS_PRO_EINHEIT_EUR-0.1045; put " --> " PREIS_PRO_EINHEIT_EUR; end;
	if DOKUMENTENNUMMER in ("102","256","262","329")then do; put "Change #97 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; invoice_source_doc ="KSP-Frankonia-1039"; PREIS_PRO_EINHEIT_EUR=PREIS_PRO_EINHEIT_EUR-0.118; put " --> " PREIS_PRO_EINHEIT_EUR; end;
	if DOKUMENTENNUMMER ="1964" then do; put "Change #98 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; invoice_source_doc ="KSP-Frankonia-1040"; PREIS_PRO_EINHEIT_EUR=PREIS_PRO_EINHEIT_EUR-0.123;end;
	if DOKUMENTENNUMMER in("2549","2726","2727","2728")then do; put "Change #99 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; invoice_source_doc ="KSP-Frankonia-1041"; PREIS_PRO_EINHEIT_EUR=PREIS_PRO_EINHEIT_EUR-0.144; put " --> " PREIS_PRO_EINHEIT_EUR; end;
	if DOKUMENTENNUMMER ="2014" then do; put "Change #100 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; invoice_source_doc ="KSP-Frankonia-1042"; PREIS_PRO_EINHEIT_EUR=PREIS_PRO_EINHEIT_EUR-0.132; put " --> " PREIS_PRO_EINHEIT_EUR; end;
	if DOKUMENTENNUMMER ="199" then do; put "Change #101 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; invoice_source_doc ="KSP-Frankonia-1043"; PREIS_PRO_EINHEIT_EUR=PREIS_PRO_EINHEIT_EUR-0.165; put " --> " PREIS_PRO_EINHEIT_EUR; end;
	/* BODETA */
	if md5_3_abbtra_ppe_menge in ( "2DBF4095D127FEAD97E6B85BD9D66506", "8F2CD01D3CC5185A54D714F8C6C64C4B", "F0E4A349838D2B779CD125D75F767B8F", "65A69F0CAFFFAA06EDD4F9B6DC49C807", "B258B6ED0DF17F0902F0A73357B12D6F", "5DBBB52EB6A239A2E32AB0E4CFD70D9D", "E4EEEF6661D8C04472D1B93D217A051E") then do; put "101a " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; PREIS_PRO_EINHEIT_EUR=0.8525;put " --> " PREIS_PRO_EINHEIT_EUR; end;
	if md5_3_abbtra_ppe_menge ="D5B36B5C5F37E559C1AE9FBAFBAAA044" then do; put "Change #102 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; PREIS_PRO_EINHEIT_EUR=0.8325;put " --> " PREIS_PRO_EINHEIT_EUR;  end;
	if md5_3_abbtra_ppe_menge in ( "12BA199C8B8963EC00B9C97C067C0F89", "E33E155DE43B2BA4AFDA603046ED5396", "97E1FDAF15B7BCE2562917C30E9C1A33") then do; put "Change #102a " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; PREIS_PRO_EINHEIT_EUR=1.4050;put " --> " PREIS_PRO_EINHEIT_EUR;  end;
	if md5_3_abbtra_ppe_menge ="DE62D76E874DFAF7A44D295D8440E92A" then do; put "Change #103 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; PREIS_PRO_EINHEIT_EUR=1.6050;put " --> " PREIS_PRO_EINHEIT_EUR;  end;
	if ARTIKELBEZEICHNUNG ="Lakritz-Stäbchen Rohlinge" and PREIS_PRO_EINHEIT_EUR < 2 then do; put "Change #104 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; PREIS_PRO_EINHEIT_EUR=PREIS_PRO_EINHEIT_EUR*1000; put " --> " PREIS_PRO_EINHEIT_EUR; end;
	if md5_3_abbtra_ppe_menge in ( '6055C38B6EF95CF112A2FA9584B063E5', '15F48F600DEE602232CAFFBC8ED891A1', '3EF0C6EB72133847573C8EFB10DB508A', 
		'AD282A92EA5F954008FEF2F8E078CAE9', 'F8FC375B84F33C4C064E7CE791BD6C9D') then do; put "Change #105 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; PREIS_PRO_EINHEIT_EUR=0.7100; put " --> " PREIS_PRO_EINHEIT_EUR; end;
	if md5_3_abbtra_ppe_menge = '311909EE2F17E988864A2A564017D177' then do; put "Change #106 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; PREIS_PRO_EINHEIT_EUR=0.69; end;
	if md5_3_abbtra_ppe_menge = '311909EE2F17E988864A2A564017D177' then do; put "Change #107 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @;  ANZAHL=24860;MENGE_IN_TONNEN=24.860; put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if md5_3_abbtra_ppe_menge = '77082EFD12466F9033F62CD91A2B07B2' then do; put "Change #108 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @;  ANZAHL=26.480;  PREIS_PRO_EINHEIT_EUR=0.69; put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if md5_3_abbtra_ppe_menge = '16C97C3F3B97D798BCB80D9AC0C2A942' then do; put "Change #109 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; PREIS_PRO_EINHEIT_EUR=0.69; put " --> " PREIS_PRO_EINHEIT_EUR; end;
	if md5_3_abbtra_ppe_menge = '42A89F6E004584CF0E3FB404935A2B8D' then do; put "Change #110 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; PREIS_PRO_EINHEIT_EUR=0.69; put " --> " PREIS_PRO_EINHEIT_EUR; end;
	if md5_3_abbtra_ppe_menge = '88AE781DF931B3D637838048E8B49B8B' then do; put "Change #112 " DOKUMENTENNUMMER DOKUMENTENDATUM @; DOKUMENTENDATUM="22AUG2001"d; put " --> " DOKUMENTENDATUM; end;
	/* Soldan too many changes. Prices are significantly wrong
	if md5_3_abbtra_ppe_menge = '2DBF4095D127FEAD97E6B85BD9D66506', then do PREIS_PRO_EINHEIT_EUR=0.8525; end;
	if md5_3_abbtra_ppe_menge = '8F2CD01D3CC5185A54D714F8C6C64C4B', then do PREIS_PRO_EINHEIT_EUR=0.8525; end;
	if md5_3_abbtra_ppe_menge = '12BA199C8B8963EC00B9C97C067C0F89', then do PREIS_PRO_EINHEIT_EUR=1.405; end;
	if md5_3_abbtra_ppe_menge = 'F0E4A349838D2B779CD125D75F767B8F', then do PREIS_PRO_EINHEIT_EUR=0.8525; end;
	if md5_3_abbtra_ppe_menge = '65A69F0CAFFFAA06EDD4F9B6DC49C807', then do PREIS_PRO_EINHEIT_EUR=0.8525; end;
	if md5_3_abbtra_ppe_menge = '6F839FB5F886C8B88A5E657B4C4ADAAA', then do PREIS_PRO_EINHEIT_EUR=0.8055; end;
	if md5_3_abbtra_ppe_menge = 'D5B36B5C5F37E559C1AE9FBAFBAAA044', then do PREIS_PRO_EINHEIT_EUR=0.8325; end;
	if md5_3_abbtra_ppe_menge = 'ABA0C0FEE433A22F81889C633776CA22', then do PREIS_PRO_EINHEIT_EUR=0.8055; end;
	if md5_3_abbtra_ppe_menge = 'B258B6ED0DF17F0902F0A73357B12D6F', then do PREIS_PRO_EINHEIT_EUR=0.8525; end;
	if md5_3_abbtra_ppe_menge = '6055C38B6EF95CF112A2FA9584B063E5', then do PREIS_PRO_EINHEIT_EUR=0.71; end;
	if md5_3_abbtra_ppe_menge = '86E0B7184C0024F1F2F954C44CF5E850', then do PREIS_PRO_EINHEIT_EUR=0.8055; end;
	if md5_3_abbtra_ppe_menge = '86E0B7184C0024F1F2F954C44CF5E850', then do PREIS_PRO_EINHEIT_EUR=0.8055; end;
	if md5_3_abbtra_ppe_menge = '86E0B7184C0024F1F2F954C44CF5E850', then do PREIS_PRO_EINHEIT_EUR=0.8055; end;
	if md5_3_abbtra_ppe_menge = '86E0B7184C0024F1F2F954C44CF5E850', then do PREIS_PRO_EINHEIT_EUR=0.8055; end;
	if md5_3_abbtra_ppe_menge = '86E0B7184C0024F1F2F954C44CF5E850', then do PREIS_PRO_EINHEIT_EUR=0.8055; end;
	if md5_3_abbtra_ppe_menge = '86E0B7184C0024F1F2F954C44CF5E850', then do PREIS_PRO_EINHEIT_EUR=0.8055; end;
	*/
	if md5_3_abbtra_ppe_menge = 'A171DFD23FFD9EAA5AE1A252988A7095' then do; put "Change #113 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; ANZAHL=25400; MENGE_IN_TONNEN=25.400; end;
	if md5_3_abbtra_ppe_menge = '36036F6FE740CFB39305772526EF81E3' then do; put "Change #114 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; PREIS_PRO_EINHEIT_EUR=0.55; end;
	if Z_no =48 and ARTIKELBEZEICHNUNG ='Weißzucker WO' 
		then do; put "Change #115 " DOKUMENTENNUMMER ARTIKELBEZEICHNUNG RCSLK_Koernung RCSLK_Aggregat @; ARTIKELBEZEICHNUNG='Invzuckersiurp 72,7 Lose'; RCSLK_Koernung='[Kein reiner WZ]'; RCSLK_Aggregat='flüssig'; put " --> " ARTIKELBEZEICHNUNG RCSLK_Koernung RCSLK_Aggregat; end;
	/* Trolli credit notes*/
	/* Deletes duplicates */
	if DOKUMENTENNUMMER ="8407660" then do; put "Change #116 " "delete " DOKUMENTENNUMMER; cor_from_non_inv ="delete"; invoice_source_doc ="8407660";end;
	if DOKUMENTENNUMMER ="8391456" then do; put "Change #117 " "delete " DOKUMENTENNUMMER; cor_from_non_inv ="delete"; invoice_source_doc ="8391456";end;
	if DOKUMENTENNUMMER ="8409489" then do; put "Change #118 " "delete " DOKUMENTENNUMMER; cor_from_non_inv ="delete"; invoice_source_doc ="8409489";end;
	if DOKUMENTENNUMMER ="1510521180" then do; put "Change #119 " "delete " DOKUMENTENNUMMER;  cor_from_non_inv ="delete"; invoice_source_doc ="1510521180";end;
	if DOKUMENTENNUMMER ="8909460" then  do; put "Change #120 " "delete " DOKUMENTENNUMMER; cor_from_non_inv ="delete"; invoice_source_doc ="8909460";end;
	if DOKUMENTENNUMMER ="99342706" and MENGE_IN_TONNEN =0.06 then do; put "Change #121 " "delete " DOKUMENTENNUMMER; cor_from_non_inv ="delete"; invoice_source_doc ="840799342706660";end;
	/* to be investigated
	if DOKUMENTENNUMMER ="" then do cor_from_non_inv ="delete"; invoice_source_doc ="1590001379";end;*/
	/* to be investigatedif DOKUMENTENNUMMER ="" then do cor_from_non_inv ="delete"; invoice_source_doc ="1590006218"; end;
	*/
	/* to be investigated
	if DOKUMENTENNUMMER ="" then do cor_from_non_inv ="delete";
	invoice_source_doc ="1590006232";
	end;
	*/
	if DOKUMENTENNUMMER ="1510540768" then do; put "Change #122 " "delete " DOKUMENTENNUMMER; cor_from_non_inv ="delete"; invoice_source_doc ="1510540768";end;
	if DOKUMENTENNUMMER ="1510574333" and MENGE_IN_TONNEN =5.4 then  do; put "Change #123 " "delete " DOKUMENTENNUMMER; cor_from_non_inv ="delete"; invoice_source_doc ="1510574333";end;
	if DOKUMENTENNUMMER ="1510588510" then do; put "Change #124 " "delete " DOKUMENTENNUMMER; cor_from_non_inv ="delete"; invoice_source_doc ="1510588510";end;
	if DOKUMENTENNUMMER ="1510596434" and MENGE_IN_TONNEN =5.4 then do; put "Change #125 " "delete " DOKUMENTENNUMMER; cor_from_non_inv ="delete"; invoice_source_doc ="1510596434";end;
	if DOKUMENTENNUMMER ="30015104" then do; put "Change #126 " "delete " DOKUMENTENNUMMER; cor_from_non_inv ="delete"; invoice_source_doc ="30015104";end;
	if DOKUMENTENNUMMER ="60927275" and MENGE_IN_TONNEN =26 then do; put "Change #127 " "delete " DOKUMENTENNUMMER; cor_from_non_inv ="delete"; invoice_source_doc ="60927275";end;
	if DOKUMENTENNUMMER ="8721641" AND MENGE_IN_TONNEN =11.1 then do; put "Change #128 " "delete " DOKUMENTENNUMMER; cor_from_non_inv ="delete"; invoice_source_doc ="8721641";end;
	if DOKUMENTENNUMMER ="8869535" AND MENGE_IN_TONNEN =3.2 then do; put "Change #129 " "delete " DOKUMENTENNUMMER; cor_from_non_inv ="delete"; invoice_source_doc ="8869535";end;
	if DOKUMENTENNUMMER ="8883291" AND MENGE_IN_TONNEN =5.6 then do; put "Change #130 " "delete " DOKUMENTENNUMMER; cor_from_non_inv ="delete"; invoice_source_doc ="8883291";end;
	if DOKUMENTENNUMMER ="8883291" AND MENGE_IN_TONNEN =4 then do; put "Change #131 " "delete " DOKUMENTENNUMMER; cor_from_non_inv ="delete"; invoice_source_doc ="8883291";end;
	if DOKUMENTENNUMMER ="8883312" AND MENGE_IN_TONNEN =6 then do; put "Change #132 " "delete " DOKUMENTENNUMMER; cor_from_non_inv ="delete"; invoice_source_doc ="8883312";end;
	if DOKUMENTENNUMMER ="8901346" AND MENGE_IN_TONNEN =12.2 then do; put "Change #133 " "delete " DOKUMENTENNUMMER; cor_from_non_inv ="delete"; invoice_source_doc ="8901346";end;
	/* end deleting duplicates */
	if DOKUMENTENNUMMER ="13136362" then do; put "Change #134 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-0.18; ANZAHL =ANZAHL-180; invoice_source_doc ="522880"; put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER ="1510241886" and MENGE_IN_TONNEN =15.3 then do; put "Change #135 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-12.6; ANZAHL =ANZAHL-12600; invoice_source_doc ="1510241886";put " --> " MENGE_IN_TONNEN ANZAHL;  end;
	if DOKUMENTENNUMMER ="1510345943" then do; put "Change #136 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-3; ANZAHL =ANZAHL-3000; invoice_source_doc ="1510345943";put " --> " MENGE_IN_TONNEN ANZAHL;  end;
	if DOKUMENTENNUMMER ="1510441827" then do; put "Change #137 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-0.1; ANZAHL =ANZAHL-100; invoice_source_doc ="1510441827";put " --> " MENGE_IN_TONNEN ANZAHL;  end;
	if DOKUMENTENNUMMER ="1510450643" then do; put "Change #138 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-1.14; ANZAHL =ANZAHL-1140; invoice_source_doc ="1510450643";put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER ="1510455185" then do; put "Change #139 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-0.02; ANZAHL =ANZAHL-20; invoice_source_doc ="1510455185";put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER ="1510615211" then do; put "Change #140 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL PREIS_PRO_EINHEIT_EUR@; MENGE_IN_TONNEN =MENGE_IN_TONNEN-0.2; ANZAHL =ANZAHL-200; PREIS_PRO_EINHEIT_EUR =0.835; invoice_source_doc ="1510615211";put " --> " MENGE_IN_TONNEN ANZAHL PREIS_PRO_EINHEIT_EUR; end;
	if DOKUMENTENNUMMER ="1510621195" and MENGE_IN_TONNEN =17.1 then do; put "Change #141 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-2.5; ANZAHL =ANZAHL-2500; invoice_source_doc ="1510621195";put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER ="1510648989" then do; put "Change #142 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-0.34; ANZAHL =ANZAHL-340; PREIS_PRO_EINHEIT_EUR =PREIS_PRO_EINHEIT_EUR-3.03929; invoice_source_doc ="1510648989";put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if ARTIKELBEZEICHNUNG ="RO Weißzucker Standard Lose" and name_verkaeufer ="Südzucker Mannheim/Ochsenfurt" and '01JAN2007'd <=DOKUMENTENDATUM <='30SEP2007'd 
		then  do; put "Change #143 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; PREIS_PRO_EINHEIT_EUR =PREIS_PRO_EINHEIT_EUR + 0.006; invoice_source_doc ="1580005109";put " --> " PREIS_PRO_EINHEIT_EUR; end;
	if DOKUMENTENNUMMER ="202038371" then do; put "Change #144 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-0.54; ANZAHL =ANZAHL-540; invoice_source_doc ="202038371";put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER ="202044776" and MENGE_IN_TONNEN =8 then do; put "Change #145 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-0.8; ANZAHL =ANZAHL-800; invoice_source_doc ="202044776";put " --> " MENGE_IN_TONNEN ANZAHL; end;
	/* not completed
	if DOKUMENTENNUMMER ="" AND MENGE_IN_TONNEN =then do 
	MENGE_IN_TONNEN =MENGE_IN_TONNEN -;
	ANZAHL =ANZAHL-;
	invoice_source_doc ="2858";
	end;
	*/
	if DOKUMENTENNUMMER ="8618336" AND MENGE_IN_TONNEN =10 then do; put "Change #146 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-1; ANZAHL =ANZAHL-1000; invoice_source_doc ="8618336";put " --> " MENGE_IN_TONNEN ANZAHL;end;
	if DOKUMENTENNUMMER ="8673501" AND MENGE_IN_TONNEN =10 then do; put "Change #147 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-10; ANZAHL =ANZAHL-10000; invoice_source_doc ="8673501";put " --> " MENGE_IN_TONNEN ANZAHL;end;
	if DOKUMENTENNUMMER ="8673501" AND MENGE_IN_TONNEN =9 then do; put "Change #148 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-6; ANZAHL =ANZAHL-6000; invoice_source_doc ="8673501";put " --> " MENGE_IN_TONNEN ANZAHL;end;
	if DOKUMENTENNUMMER ="8721641" AND MENGE_IN_TONNEN =7 then do; put "Change #149 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-1; ANZAHL =ANZAHL-1000; invoice_source_doc ="8721641";put " --> " MENGE_IN_TONNEN ANZAHL;end;
	if DOKUMENTENNUMMER ="90584748" then do; put "Change #150 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-0.5; ANZAHL =ANZAHL-500; invoice_source_doc ="90584748";put " --> " MENGE_IN_TONNEN ANZAHL;end;
	/* unclear if this is the right invoice, because it is followed by another non_invoice
	which has a positive value 
	if DOKUMENTENNUMMER ="90817778" AND MENGE_IN_TONNEN= then delete; end;*/
	if DOKUMENTENNUMMER ="90821311" then do; put "Change #151 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-1; ANZAHL =ANZAHL-1000; invoice_source_doc ="90821311";put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER ="90827913" then do; put "Change #152 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-0.18; ANZAHL =ANZAHL-180; invoice_source_doc ="90827913";put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER ="99342355" then do; put "Change #153 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-0.04; ANZAHL =ANZAHL-40; invoice_source_doc ="99342355";put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER ="1510141570" then do; put "Change #154 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; PREIS_PRO_EINHEIT_EUR =PREIS_PRO_EINHEIT_EUR-0.024; invoice_source_doc ="1590006271";put " --> " MENGE_IN_TONNEN ANZAHL; end;
	/* cannot find source right now 
	if DOKUMENTENNUMMER ="1510147243" then do 
	PREIS_PRO_EINHEIT_EUR =PREIS_PRO_EINHEIT_EUR-0.024;
	invoice_source_doc =
	end; */
	if DOKUMENTENNUMMER ="1510141570" then do; put "Change #155 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-10.875; ANZAHL =ANZAHL-10875; invoice_source_doc ="1590006271";put " --> " MENGE_IN_TONNEN ANZAHL; 
end;
	/* to be investigated
	if DOKUMENTENNUMMER ="" then do 
	MENGE_IN_TONNEN =MENGE_IN_TONNEN-;
	ANZAHL =ANZAHL-;
	invoice_source_doc ="1590006416";
	end;
	*/
	/* to be investigated
	if DOKUMENTENNUMMER ="" then do 
	MENGE_IN_TONNEN =MENGE_IN_TONNEN-;
	ANZAHL =ANZAHL-;
	invoice_source_doc ="1590007835";
	end;
	*/
	/* to be investigated
	if DOKUMENTENNUMMER ="" then do 
	MENGE_IN_TONNEN =MENGE_IN_TONNEN-;
	ANZAHL =ANZAHL-;
	invoice_source_doc ="1590008523";
	end;
	*/
	/* to be investigated
	if DOKUMENTENNUMMER ="" then do 
	MENGE_IN_TONNEN =MENGE_IN_TONNEN-;
	ANZAHL =ANZAHL-;
	invoice_source_doc ="1590009492";
	end;
	*/
	/* to be investigated
	if DOKUMENTENNUMMER ="" then do 
	MENGE_IN_TONNEN =MENGE_IN_TONNEN-;
	ANZAHL =ANZAHL-;
	invoice_source_doc ="1590009759";
	end;
	*/
	/* to be investigated
	if DOKUMENTENNUMMER ="" then do 
	MENGE_IN_TONNEN =MENGE_IN_TONNEN-;
	ANZAHL =ANZAHL-;
	invoice_source_doc ="1590009777";
	end;
	*/
	/* to be investigated
	if DOKUMENTENNUMMER ="" then do 
	MENGE_IN_TONNEN =MENGE_IN_TONNEN-;
	ANZAHL =ANZAHL-;
	invoice_source_doc ="1590010075";
	end;
	*/
	/* to be investigated
	if DOKUMENTENNUMMER ="" then do 
	MENGE_IN_TONNEN =MENGE_IN_TONNEN-;
	ANZAHL =ANZAHL-;
	invoice_source_doc ="1590010827";
	end;
	*/
	if DOKUMENTENNUMMER ="1510194652" then do; put "Change #156 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-0.025; ANZAHL =ANZAHL-25; invoice_source_doc ="1590011171";put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER in ("1510203050", "1510204365", "1510206574","1510208045", "1510208638") then do; put "Change #157 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; PREIS_PRO_EINHEIT_EUR =PREIS_PRO_EINHEIT_EUR-0.02; invoice_source_doc ="1590011171";put " --> " PREIS_PRO_EINHEIT_EUR; end;
	if DOKUMENTENNUMMER in ("1510207356", "1510209221", "1510209766") then do; put "Change #158 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; PREIS_PRO_EINHEIT_EUR =PREIS_PRO_EINHEIT_EUR-0.0589; invoice_source_doc ="1590011171";put " --> " PREIS_PRO_EINHEIT_EUR; end;
	if DOKUMENTENNUMMER ="1510325057" and MENGE_IN_TONNEN =7.2 then do; put "Change #159 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-0.45; ANZAHL =ANZAHL-450; invoice_source_doc ="1590012396";put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER ="1510401713" and MENGE_IN_TONNEN =13.5 then do; put "Change #160 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-8.75; ANZAHL =ANZAHL-8750; invoice_source_doc ="1590014435";put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER ="1510447261" then do; put "Change #161 " "delete " DOKUMENTENNUMMER; cor_from_non_inv ="delete"; invoice_source_doc ="1590015624";end;
	if DOKUMENTENNUMMER ="1510603709" and MENGE_IN_TONNEN =13.4 then do; put "Change #162 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-0.1; ANZAHL =ANZAHL-100; invoice_source_doc ="1590019390";put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER ="1510603285" then do; put "Change #163 " "delete " DOKUMENTENNUMMER; cor_from_non_inv ="delete"; invoice_source_doc ="1590019457";end;
	if DOKUMENTENNUMMER ="1510624223" then do; put "Change #164 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-2.2; ANZAHL =ANZAHL-2200; invoice_source_doc ="1590019909";put " --> " MENGE_IN_TONNEN ANZAHL; end;
	/* reference invoice was not clear --> used one that has
	the excact properties and is from the same year */
	if DOKUMENTENNUMMER ="1510626766" then  do; put "Change #165 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; PREIS_PRO_EINHEIT_EUR =PREIS_PRO_EINHEIT_EUR-0.01; invoice_source_doc ="1590020316";put " --> " PREIS_PRO_EINHEIT_EUR; end;
	/* reference invoice was not clear --> used one that has
	the excact properties and is from the same year */
	if DOKUMENTENNUMMER ="1510632380" then  do; put "Change #166 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; PREIS_PRO_EINHEIT_EUR =PREIS_PRO_EINHEIT_EUR-0.01; invoice_source_doc ="1590020317";put " --> " PREIS_PRO_EINHEIT_EUR; end;
	/* reference invoice was not clear --> used one that has
	the excact properties and is from the same year */
	if DOKUMENTENNUMMER ="1510633206" then do; put "Change #167 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; PREIS_PRO_EINHEIT_EUR =PREIS_PRO_EINHEIT_EUR-0.01; invoice_source_doc ="1590020318";put " --> " PREIS_PRO_EINHEIT_EUR; end;
	/* reference invoice was not clear --> used one that has
	the excact properties and is from the same year */
	if DOKUMENTENNUMMER ="1510636279" then  do; put "Change #168 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; PREIS_PRO_EINHEIT_EUR =PREIS_PRO_EINHEIT_EUR-0.01; invoice_source_doc ="1590020319";put " --> " PREIS_PRO_EINHEIT_EUR; end;
	/* reference invoice was not clear --> used one that has
	the excact properties and is from the same year */
	if DOKUMENTENNUMMER ="1510625225" then  do; put "Change #169 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; PREIS_PRO_EINHEIT_EUR =PREIS_PRO_EINHEIT_EUR-0.01; invoice_source_doc ="1590020328";put " --> " PREIS_PRO_EINHEIT_EUR; end;
	if DOKUMENTENDATUM >="01OCT2012"d and DOKUMENTENDATUM <="30SEP2013"d and ARTIKELBEZEICHNUNG ="RO Weißzucker Standard Lose" and name_verkaeufer ="Südzucker Mannheim/Ochsenfurt" then do; put "Change #170 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; PREIS_PRO_EINHEIT_EUR =PREIS_PRO_EINHEIT_EUR-0.001; invoice_source_doc ="1590020833:1590020834:1590020835";put " --> " PREIS_PRO_EINHEIT_EUR; end;
	if DOKUMENTENDATUM >="01OCT2012"d and DOKUMENTENDATUM <="30SEP2013"d and ARTIKELBEZEICHNUNG ="RO Zucker Raffinade Fein, Standard" and name_verkaeufer ="Südzucker Mannheim/Ochsenfurt" then do; put "Change #171 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; PREIS_PRO_EINHEIT_EUR =PREIS_PRO_EINHEIT_EUR-0.001; invoice_source_doc ="1590020833:1590020834:1590020835";put " --> " PREIS_PRO_EINHEIT_EUR; end;
	/* Referenced invoice cannot be found
	 if DOKUMENTENNUMMER ="" and MENGE_IN_TONNEN =
	 then do 
	 MENGE_IN_TONNEN =MENGE_IN_TONNEN-;
	 ANZAHL =ANZAHL-;
	 invoice_source_doc ="1590021511";
	 end; */
	if DOKUMENTENNUMMER ="202035328" and MENGE_IN_TONNEN =0.8 then do; put "Change #172 " "delete " DOKUMENTENNUMMER; cor_from_non_inv ="delete"; invoice_source_doc ="202037057";end;
	if DOKUMENTENNUMMER ="2672" 
	/* Not the right invoice, but with exactly the same properties
	and around the same date */
	 then do; put "Change #173 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-1; ANZAHL =ANZAHL-1000; invoice_source_doc ="2859";put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER ="30012551" and MENGE_IN_TONNEN =6 then do; put "Change #174 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-1; ANZAHL =ANZAHL-1000; invoice_source_doc ="30012551";put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER ="30029972" then do; put "Change #175 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-0.9; ANZAHL =ANZAHL-900; invoice_source_doc ="34001503";put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER ="30059902" then do; put "Change #176 " "delete " DOKUMENTENNUMMER; cor_from_non_inv ="delete"; invoice_source_doc ="34003153";end;
	if DOKUMENTENNUMMER ="30100059" then do; put "Change #178 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; PREIS_PRO_EINHEIT_EUR =PREIS_PRO_EINHEIT_EUR-0.11245;invoice_source_doc ="34005323";put " --> " PREIS_PRO_EINHEIT_EUR; end;
	if DOKUMENTENDATUM >="01JAN2002"d and DOKUMENTENDATUM >="28FEB2002"d and name_verkaeufer ="Nordzucker" and name_Dok_empfaenger ="Gummi Bear Factory Süßwaren" then do; put "Change #179 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; PREIS_PRO_EINHEIT =PREIS_PRO_EINHEIT-0.001;invoice_source_doc ="4026";put " --> " PREIS_PRO_EINHEIT_EUR; end;
	/* Could not find invoice data
	 if DOKUMENTENNUMMER ="" and MENGE_IN_TONNEN =
	 then do 
	 MENGE_IN_TONNEN =MENGE_IN_TONNEN-;
	 ANZAHL =ANZAHL-;
	 invoice_source_doc ="485756";
	 end;
	*/
	/* non invoice is doubled with different weights, but link to the same doc */
	if DOKUMENTENNUMMER ="520502" then do; put "Change #180 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-9.4; ANZAHL =ANZAHL-9400; invoice_source_doc ="520947";put " --> " MENGE_IN_TONNEN ANZAHL; end;
	/* Probably already included in invoice data --> Needs to be check again
	 if DOKUMENTENNUMMER ="" and MENGE_IN_TONNEN =
	 then do 
	 MENGE_IN_TONNEN =MENGE_IN_TONNEN-;
	 ANZAHL =ANZAHL-;
	 invoice_source_doc ="522880";
	 end;
	*/
	/* probably already changed in the data --> Needs to be checked again
	 if DOKUMENTENDATUM >="01Jan2002"d and DOKUMENTENDATUM <="31Dec2002"d and ARTIKELBEZEICHNUNG ="WEISSZUCKER MK LOSE EU-KAT. 2" and name_verkaeufer ="Kaiser"
	 then do 
	 PREIS_PRO_EINHEIT_EUR =PREIS_PRO_EINHEIT_EUR-0.0012 
	 invoice_source_doc ="600315:600341:600370:600378:600409";
	 end;
	 if DOKUMENTENDATUM >="01Jan2003"d and DOKUMENTENDATUM <="31Dec2003"d and ARTIKELBEZEICHNUNG ="WEISSZUCKER MK LOSE EU-KAT. 2" and name_verkaeufer ="Kaiser"
	 then do 
	 PREIS_PRO_EINHEIT_EUR =PREIS_PRO_EINHEIT_EUR-0.002 
	 invoice_source_doc ="600447:600483:600571:600680";
	 end;
	 if DOKUMENTENDATUM >="01Jan2004"d and DOKUMENTENDATUM <="30Sep2004"d and ARTIKELBEZEICHNUNG ="WEISSZUCKER MK LOSE EU-KAT. 2" and name_verkaeufer ="Kaiser"
	 then do 
	 PREIS_PRO_EINHEIT_EUR =PREIS_PRO_EINHEIT_EUR-0.003 
	 invoice_source_doc ="600778:600849:600940";
	 end;
	*/
	if DOKUMENTENNUMMER ="522147" then do; put "Change #181 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-0.05; ANZAHL =ANZAHL-50; invoice_source_doc ="7011932";put " --> " MENGE_IN_TONNEN ANZAHL; end;
	/* No invoicesbefore the year 2002 for Trolli
	 if DOKUMENTENNUMMER ="" then do 
	 MENGE_IN_TONNEN =MENGE_IN_TONNEN-;
	 ANZAHL =ANZAHL-;
	 invoice_source_doc ="70121095";
	 end;
	*/
	if DOKUMENTENNUMMER ="8434931" then do; put "Change #182 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-2.82; ANZAHL =ANZAHL-2820; invoice_source_doc ="7013185";put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER ="8439920" then do; put "Change #183 " "delete " DOKUMENTENNUMMER; cor_from_non_inv ="delete"; invoice_source_doc ="7013345";end;
	if DOKUMENTENNUMMER ="8456553" then do; put "Change #184 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-3.06; ANZAHL =ANZAHL-3060; invoice_source_doc ="7013789";put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER ="522147" then do; put "Change #185 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-0.05; ANZAHL =ANZAHL-50; invoice_source_doc ="7011932";put " --> " MENGE_IN_TONNEN ANZAHL; end;
	/* no invoices before 2001 
	 if DOKUMENTENNUMMER ="" then do 
	 MENGE_IN_TONNEN =MENGE_IN_TONNEN-;
	 ANZAHL =ANZAHL-;
	 invoice_source_doc ="70121095";
	 end;*/
	if DOKUMENTENNUMMER ="8434931" then do; put "Change #186 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-2.82; ANZAHL =ANZAHL-2820; invoice_source_doc ="7013185";put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER ="8439920" then do; put "Change #187 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-1.5; ANZAHL =ANZAHL-1500; invoice_source_doc ="7013345";put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER ="8456553" and MENGE_IN_TONNEN =3.9 then do; put "Change #188 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-3.06; ANZAHL =ANZAHL-3060; invoice_source_doc ="7013789";put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER ="70156791" then do; put "Change #189 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-1.52; ANZAHL =ANZAHL-1520; invoice_source_doc ="70156404";put " --> " MENGE_IN_TONNEN ANZAHL; end;
	/* Could not find the exact invoice, but this one has the same properties
	 if DOKUMENTENNUMMER ="8572256" then do 
	 MENGE_IN_TONNEN =MENGE_IN_TONNEN-3.5;
	 ANZAHL =ANZAHL-3500;
	 invoice_source_doc ="7018829";
	 end;
	*/
	/* unclear for me --> Somehow more than what they bought in 2002 in total
	 if DOKUMENTENNUMMER ="" then do 
	 MENGE_IN_TONNEN =MENGE_IN_TONNEN-;
	 ANZAHL =ANZAHL-;
	 invoice_source_doc ="70202076";
	 end;
	*/
	if DOKUMENTENNUMMER in ("8611850", "8612305", "8612542", "8612806", "8612807", "8613336", "8614005", "8614222", "8614642", "8615066", "8615510") 
		then do; put "Change #190 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; PREIS_PRO_EINHEIT_EUR =PREIS_PRO_EINHEIT_EUR-0.0036 ;invoice_source_doc ="7020302:7020328";put " --> " PREIS_PRO_EINHEIT_EUR;end;
	if DOKUMENTENNUMMER ="8654720" then do; put "Change #191 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-1; ANZAHL =ANZAHL-1000; invoice_source_doc ="7021967";put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER ="70231128" then do; put "Change #192 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-4.08; ANZAHL =ANZAHL-4080; invoice_source_doc ="70233516";put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER ="8697143" then do; put "Change #193 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; cor_from_non_inv ="delete"; invoice_source_doc ="7023924";put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER ="8721641" and MENGE_IN_TONNEN =11 then do; put "Change #194 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; cor_from_non_inv ="delete"; invoice_source_doc ="7025280";put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER ="8721641" and MENGE_IN_TONNEN =1.05 then do; put "Change #195 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; cor_from_non_inv ="delete"; invoice_source_doc ="7025280";put " --> " MENGE_IN_TONNEN ANZAHL; end;
	/* could not find the equivalent invoice 
	 if DOKUMENTENNUMMER ="" then do 
	 MENGE_IN_TONNEN =MENGE_IN_TONNEN-;
	 ANZAHL =ANZAHL-;
	 invoice_source_doc ="70290920";
	 end;
	*/
	/* Anzahl is way to low for the year for the given product category.
	 Maybe ciombining it with different products might be a solution
	 if DOKUMENTENNUMMER ="" then do 
	 MENGE_IN_TONNEN =MENGE_IN_TONNEN-;
	 ANZAHL =ANZAHL-;
	 invoice_source_doc ="70298848";
	 end;
	*/
	if DOKUMENTENNUMMER ="8905932" and MENGE_IN_TONNEN =0.8 then do; put "Change #196 " "delete " DOKUMENTENNUMMER; cor_from_non_inv ="delete"; invoice_source_doc ="7030302";end;
	if DOKUMENTENNUMMER ="8900694" then do; put "Change #197 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-0.2; ANZAHL =ANZAHL-200; invoice_source_doc ="7030315";put " --> " MENGE_IN_TONNEN ANZAHL; end;
	/* Could not find invoice
	 if DOKUMENTENNUMMER ="" then do 
	 MENGE_IN_TONNEN =MENGE_IN_TONNEN-;
	 ANZAHL =ANZAHL-;
	 invoice_source_doc ="7031339";
	 end;
	*/
	/* To be investigated
	 if DOKUMENTENNUMMER ="" then do 
	 MENGE_IN_TONNEN =MENGE_IN_TONNEN-;
	 ANZAHL =ANZAHL-;
	 invoice_source_doc ="7031480";
	 end;
	*/
	if DOKUMENTENNUMMER ="89289230" then do; put "Change #198 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-0.2; ANZAHL =ANZAHL-200; invoice_source_doc ="703148";put " --> " MENGE_IN_TONNEN ANZAHL; end;
	if DOKUMENTENNUMMER ="9000018913" then do; put "Change #199 " DOKUMENTENNUMMER MENGE_IN_TONNEN ANZAHL @; MENGE_IN_TONNEN =MENGE_IN_TONNEN-5; ANZAHL =ANZAHL-5000; invoice_source_doc ="7033322";put " --> " MENGE_IN_TONNEN ANZAHL; end;
	/* Could only find one of the two invoices and iven the one I found might npot be toe correct one
	 if DOKUMENTENNUMMER ="9000032610" then do 
	 MENGE_IN_TONNEN =MENGE_IN_TONNEN-16;
	 ANZAHL =ANZAHL-16000;
	 invoice_source_doc ="7034246";
	 end;
	*/
	/* Rebate over the entire year for 15.000 DT
	 For simplicity over the total year instead of the first 1500t
	 --> Total amount of the year ~ 2431t
	 --> For 1500t --> 5.1 Euro
	 --> 15/24.31 *5.1 =3.1458
	 if DOKUMENTENDATUM >='01JAN2004'd and DOKUMENTENDATUM <='31DEC2004'd and ARTIKELBEZEICHNUNG ="RO Weißzucker Standard Lose" and name_verkaeufer ="Südzucker Mannheim/Ochsenfurt"
	 then do 
	 MENGE_IN_TONNEN =MENGE_IN_TONNEN-0.2;
	 ANZAHL =ANZAHL-200;
	 invoice_source_doc ="70382256";
	 end;
	*/
	if DOKUMENTENNUMMER ="8617205" then do; put "Change #200 " "delete " DOKUMENTENNUMMER; cor_from_non_inv ="delete"; invoice_source_doc ="8617204";end;
	if DOKUMENTENNUMMER ="90817605" then do; put "Change #201 " "delete " DOKUMENTENNUMMER; cor_from_non_inv ="delete"; invoice_source_doc ="90817799";end;
	if DOKUMENTENNUMMER in ("60774338", "60774802", "60775298", "60777440", "60778326", "60773801") then do; put "Change #202 " DOKUMENTENNUMMER PREIS_PRO_EINHEIT_EUR @; PREIS_PRO_EINHEIT_EUR =PREIS_PRO_EINHEIT_EUR-0.0024;invoice_source_doc ="KSP-Trolli-Doknr-1000";put " --> " PREIS_PRO_EINHEIT_EUR; end;
run;


/* 	2.	SEPARATE MULTIPLE FILENAME ENTRIES, REMOVE DUPLICATES*/
/*	Separating all filenames from the three "Abbild" variables, stacking them all into one long file, */
/*	removing duplicates.*/
	data t_1 ;
	set ind_data_incl_non_inv;
	keep name_zedent id z_no x;
		cnt = COUNTW(Abbild_transaktion, ':') ;
		i=0;
	do while(i < cnt);
		i+1;
		x = SCAN(SCAN(Upcase(ABBILD_TRANSAKTION),i,':'),-1,'\');
		output;
	end;
	run ;

	data t_2 ;
	set ind_data_incl_non_inv ;
	keep name_zedent id z_no x;
		cnt = COUNTW(Abbild_anpassung, ':') ;
		i=0;
	do while(i < cnt);
		i+1;
		x = SCAN(SCAN(Upcase(ABBILD_Anpassung),i,':'),-1,'\');
		output;
	end;
	run ;

	data t_3 ;
	set ind_data_incl_non_inv ;
	keep name_zedent id z_no x;
		cnt = COUNTW(Abbild_sonstige_info,':') ;
		i=0;
	do while(i < cnt);
		i+1;
		x = SCAN(SCAN(Upcase(ABBILD_sonstige_info),i,':'),-1,'\');
		output;
	end;
	run ;

	data referenced_filenames;
	set t_1-t_3;
		if missing(x)=1 then delete;
			x=tranwrd(x, ".XLSX", "");
			x=tranwrd(x, ".PDF", "");
			x=tranwrd(x, ".XLS", "");
			x=strip(compress(x,,"KN")); /*keep EN letters and digits only */
		rename  x=filename;
	run; 

	/*Abcdefghijklmnopqrstuvwxyzäöüß*/
	proc sort data=referenced_filenames nodup; by name_zedent z_no filename; 
	quit;

/*	19.1 ----- CREATE FILE LIST (no MD5 hash) and import -----*/
/*	1.	Faster, current info but no MD5 hash */
filename DIRLIST pipe 'dir "Z:\Datenaustausch\" /s /b /a-d';
data dirlist ;
length buffer $256 ;
infile dirlist length=reclen ;
input buffer $varying256. reclen ;
run ;

data prepd_filelist;
set dirlist;
  y=find(buffer,'\',-length(buffer));
  filename_w_extension=substr(buffer,y+1,length(buffer)-y);
  dot=find(filename_w_extension,'.',-length(filename_w_extension));
  extension=substr(filename_w_extension,dot+1,length(filename_w_extension)-dot);
  path=substr(buffer,1,y);
  filename=UPCASE(strip(compress(substr(filename_w_extension,1,dot-1),,"KN"))); /*keep EN letters and digits only*/
  if UPCASE(extension) not in ("PDF","TIF","XLS","XLSX","DOC", "JPG") then delete;
  drop y; 
run;
/*	19.3 ----- MATCHING FILES TO FILENAME ENTRIES FOR ALL THREE ABBILD VARIABLES -----*/
/*	1.	The part below matches the references in the three "Abbild" variable against the list of all files in the Datentausch folder.*/
	proc sort nodupkey data=prepd_filelist; by filename; quit;
	proc sort nodup data=referenced_filenames; by filename; quit;

	data MATCH_DATA_VS_SCANS 
	(label="created by &code. compares observations in data to list of available scans");
	format filename $256.;
	merge referenced_filenames (in = A) prepd_filelist (in = B);
	by filename;
	if A and not B then match = "Referenced in data but no correspondingly named scan existing";
	if B and not A then match = "No reference to this file in data";
	if A and B then match = "match";
	run;

	data temp; set MATCH_DATA_VS_SCANS; where match="match"; run; proc sort; 
	by id; quit;

	proc transpose data=temp out=B let prefix=filepath;  by ID;  var buffer ;	run;
	proc sort; by ID; quit;

	proc sort data=ind_data_incl_non_inv; by id; quit;

	proc sql;
 		select distinct 	name 
		into: 	KEEP_names separated by " " from dictionary.columns 
		where  	lowcase(memname)='ind_data_incl_non_inv' 
		and 	(UPCASE(name) like '%DOK_ABSENDER' 
		or 		 UPCASE(name) like '%DOK_EMPFAENGER' 
		or 		 UPCASE(name) like '%VERKAEUFER' 
		or 		 UPCASE(name) like '%HERSTELLUNG'
		or 		 UPCASE(name) like '%WARENANNAHME');
	quit;
	%put &keep_names;

	data industry_data build.non_invoice_positions;
	if non_inv_pos=1 then output build.non_invoice_positions; else output industry_data; 
		merge	ind_data_incl_non_inv (in = A)
				B (in = B );
		by ID;
		if A and B;
	run;
			
	data missing_scans_narrow 
	(label="created by &code. lists scans that are referenced in observations but do not exist (under that name) in the Datentausch folder.");
	set MATCH_DATA_VS_SCANS; 
		where match="Referenced in data but no correspondingly named scan existing" AND
				find(UPCASE(filename),"KEINSCAN")=0 AND 
				find(UPCASE(filename),"NULL")=0 AND
				missing(filename)=0;
	keep name_zedent z_no short_name match id filename;
	short_name=Strip(Compress(tranwrd(substr(name_zedent,1,20),".","_")));
	short_name2=Compress(substr(name_zedent,1,20),".");
	run;

	data OBS_WO_REF (label="Observations with Abbild_transaktion empty or 'NULL'");
	set ind_data_incl_non_inv; 
	format Abbild_filled_or_not $3.;
	If Abbild_transaktion in("NULL", "") Then Abbild_filled_or_not="NO";
	ELSE Abbild_filled_or_not="YES";
	if Abbild_filled_or_not="YES" then delete;
	If count(abbild_transaktion,"-|-")ne 0 then delete;
	run;

		
	data BUILD.NON_REFERENCED_SCANS
	(label="LIST OF FILES THAT ARE ON THE SERVER BUT ARE NOT REFERENCED IN THE
			DATA. MIGHT BE USEFUL FOR FINDING 'MISSING' FILES THAT ARE ACTUALLY NOT 
			MISSING BUT MERELY NOT REFERENCED CORRECTLY / NOT NAMED CORRECTLY");
	set MATCH_DATA_VS_SCANS; 
	where match="No reference to this file in data";
	keep path extension filename;
	run; 

	proc sql; 
	create table non_ref_scans_by_path as select distinct
	path, count (*) as count from BUILD.NON_REFERENCED_SCANS
	group by 1; quit;

	proc sort data=ind_data_incl_non_inv; by ID name_zedent Z_no; quit;

	data prep_merge; 
	set missing_scans_narrow; 
	rename filename=filename_with_issue;
	rename match=issue_description;
	drop short_name;
	run; proc sort; by ID name_zedent Z_no; quit;

	data missing_scans_w_info; 
	merge prep_merge (in = A)
	ind_data_incl_non_inv (in = B);
	by ID name_zedent Z_no;
	if A and B; 
	run;

	proc sql; 
		create table missing_scans_per_assignor as select distinct
		Z_no, count (*) as count_missing_scan from missing_scans_w_info
		group by 1; 
	quit;

	proc sql; 
		create table obs_wo_ref_per_assignor as select distinct
		Z_no, count (*) as count_obs_wo_ref from Obs_wo_ref
		group by 1; 
	quit;

	data issues_per_assignor; merge missing_scans_per_assignor (in = A) obs_wo_ref_per_assignor (in = B);
	by Z_no;if A or B; run;



/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20	 CLEAN UP AND CREATE PERMANENT DS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Getting rid of balast*/
/*Dropping all variables that are empty for all observations*/

/*Technical explanation:*/
/* Create two macro variables, NUM_QTY and CHAR_QTY, to hold */
/* the number of numeric and character variables, respectively. */
/* These will be used to define the number of elements in the arrays */
/* in the next DATA step. */

data _null_;
   set industry_data (obs=1);
   array num_vars[*] _NUMERIC_;
   array char_vars[*] _CHARACTER_;
   call symputx('num_qty', dim(num_vars));
   call symputx('char_qty', dim(char_vars));
run;

data _null_;
   	set merged end=finished;
   /* Use the reserved word _NUMERIC_ to load all numeric variables  */
   /* into the NUM_VARS array.  Use the reserved word _CHARACTER_ to */ 
   /* to load all character variables into the CHAR_VARS array.      */
   array num_vars[*] _NUMERIC_;
   array char_vars[*] _CHARACTER_;

   /* Create 'flag' arrays for the variables in NUM_VARS and CHAR_VARS. */
   /* Initialize their values to 'missing'.  Values initialized in an   */
   /* ARRAY statement are retained.                                     */
   array num_miss [&num_qty] $ (&num_qty * 'missing');
   array char_miss [&char_qty] $ (&char_qty * 'missing'); 
  
   /* LIST will contain the list of variables to be dropped. */
   /* Ensure that its length is sufficient. */
   length list $ 660; 
  
   /* Check for non-missing values.  Reassign the corresponding 'flag' */
   /* value accordingly.                                               */
   do i=1 to dim(num_vars);
      if num_vars(i) ne . then num_miss(i)='non-miss';
   end;
   do i=1 to dim(char_vars);
      if char_vars(i) ne '' then char_miss(i)='non-miss';
   end;

   /* On the last observation of the data set, if a 'flag' value is still */
   /* 'missing', the variable needs to be dropped.  Concatenate the       */
   /* variable's name onto LIST to build the values of a DROP statement   */
   /* to be executed in another step.                                     */
   if finished then do;
      do i= 1 to dim(num_vars);
         if num_miss(i) = 'missing' then list=trim(list)||' '||trim(vname(num_vars(i)));
      end;
      do i= 1 to dim(char_vars);
         if char_miss(i) = 'missing' then list=trim(list)||' '||trim(vname(char_vars(i)));
      end;
      call symput('mlist',list);
   end;
run;

%put &mlist;

/* Use the macro variable MLIST in the DROP statement. Other dropped
variables are not alway missing but contain info that is not useful 
going forward*/

Data industry_data;
set industry_data;
drop CCI anmerkung_korrektur_CDC end_date i korrektur_abschnitt F11 F21 Prio_HUBER_Nachbearbeitung Vermutliche_Fehlerquelle
	 &mlist.; 
run;

/*	20.2 ----- OUTPUT CLEANED SET -----*/
DATA build.industry_data (label="created by &code. on &date_EU_short");
SET industry_data;
RUN;
/*	OUTPUT AS STATA SET FOR RCS*/
proc export 
data=build.industry_data replace 
outfile="Z:\Extern\CDC Cartel Damage Claims - German Sugar Cartel\Datasets\Assignor Data\DTA\Verarbeitungszucker\Industry Data [&code_short. on &date_EU_short].dta";
run;




/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
18 new 20	 DRILL-DOWN/REPAIR ERRORS FOUND IN SPOT-CHECKS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

/*continue here from build.industry_data */

/*	do */

/*	if DOKUMENTENNUMMER = 396193*/
/*		then do ANZAHL=25400; MENGE_IN_TONNEN=25.4; end;*/
/*	if DOKUMENTENNUMMER = 452857 */
/*		then do ANZAHL=25400; end;*/
/*	if DOKUMENTENNUMMER = 214208 */
/*		then do ANZAHL=25180; end;*/
/*	if DOKUMENTENNUMMER = 310113 */
/*		then do ANZAHL=25020; end;*/

/*	and*/

/*	include next changes TZ/RB*/

/*	and credit note alloc from subi04*/

/*	to arrive at */

/*	build.industry_data_FINAL_(nach corrections)_version2_edit_final_final!*/

/*	the end !!!! */
